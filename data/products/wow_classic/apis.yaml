---
AbandonQuest: {}
AbandonSkill: {}
abs:
  alias: math.abs
AcceptAreaSpiritHeal:
  inputs:
  - {}
  outputs: {}
AcceptArenaTeam: {}
AcceptBattlefieldPort:
  inputs:
  - - type: number
    - type: boolean
  outputs:
  - type: boolean
  protection: hardware
AcceptDuel: {}
AcceptGroup: {}
AcceptGuild: {}
AcceptQuest: {}
AcceptResurrect: {}
AcceptSockets: {}
AcceptSpellConfirmationPrompt: {}
AcceptTrade: {}
AcknowledgeSurvey: {}
acos:
  impl: acos
  nowrap: true
ActionBindsItem: {}
ActionHasRange: {}
AddChatWindowChannel: {}
AddChatWindowMessages:
  inputs:
  - - name: chatFrameID
      type: number
    - name: group
      type: string
  outputs: {}
addframetext: {}
AddPreviewTalentPoints: {}
AddQuestWatch:
  inputs:
  - - name: questIndex
      type: number
  outputs: {}
AddTrackedAchievement: {}
AddTradeMoney: {}
Ambiguate:
  inputs:
  - - name: fullName
      type: string
    - name: context
      type: string
  outputs:
  - name: name
    type: string
AntiAliasingSupported:
  inputs:
  - {}
  outputs:
  - type: boolean
AreDangerousScriptsAllowed:
  inputs:
  - {}
  outputs:
  - name: value
    stub: true
    type: boolean
ArenaTeamDisband: {}
ArenaTeamInviteByName: {}
ArenaTeamLeave: {}
ArenaTeamRoster: {}
ArenaTeamSetLeaderByName: {}
ArenaTeamUninviteByName: {}
AscendStop:
  inputs:
  - {}
  outputs: {}
asin:
  impl: asin
  nowrap: true
assert:
  stdlib: assert
AssistUnit:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs: {}
atan:
  impl: atan
  nowrap: true
atan2:
  impl: atan2
  nowrap: true
AttackTarget:
  inputs:
  - {}
  outputs: {}
AutoChooseCurrentGraphicsSetting: {}
AutoEquipCursorItem: {}
AutoLootMailItem: {}
AutoStoreGuildBankItem: {}
BankButtonIDToInvSlotID:
  inputs:
  - - type: number
    - nilable: true
      type: number
  outputs:
  - type: number
BeginTrade: {}
BindEnchant: {}
bit.arshift:
  stdlib: bit.arshift
bit.band:
  stdlib: bit.band
bit.bnot:
  stdlib: bit.bnot
bit.bor:
  stdlib: bit.bor
bit.bxor:
  stdlib: bit.bxor
bit.lshift:
  stdlib: bit.lshift
bit.mod:
  stdlib: bit.mod
bit.rshift:
  stdlib: bit.rshift
BNAcceptFriendInvite: {}
BNCheckBattleTagInviteToGuildMember: {}
BNCheckBattleTagInviteToUnit: {}
BNConnected: {}
BNDeclineFriendInvite: {}
BNFeaturesEnabled:
  inputs:
  - {}
  outputs:
  - type: boolean
BNFeaturesEnabledAndConnected:
  inputs:
  - {}
  outputs:
  - type: boolean
BNGetBlockedInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: blockID
    type: number
  - name: blockName
    type: string
BNGetDisplayName: {}
BNGetFOFInfo: {}
BNGetFriendGameAccountInfo: {}
BNGetFriendIndex: {}
BNGetFriendInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: bnetIDAccount
    type: string
  - name: accountName
    type: string
  - name: battleTag
    type: string
  - name: isBattleTag
    type: boolean
  - name: characterName
    type: string
  - name: bnetIDGameAccount
    type: string
  - name: client
    type: string
  - name: isOnline
    type: boolean
  - name: lastOnline
    type: number
  - name: isAFK
    type: boolean
  - name: isDND
    type: boolean
  - name: broadcastText
    type: string
  - name: noteText
    type: string
  - name: isRealIDFriend
    type: boolean
  - name: broadcastTime
    type: number
  - name: canSoR
    type: boolean
  - name: isReferAFriend
    type: boolean
  - name: canSummonFriend
    type: boolean
BNGetFriendInfoByID: {}
BNGetFriendInviteInfo:
  inputs:
  - - name: inviteIndex
      type: number
  outputs:
  - name: inviteID
    type: number
  - name: accountName
    type: string
  - name: isBattleTag
    type: boolean
BNGetGameAccountInfo: {}
BNGetGameAccountInfoByGUID: {}
BNGetInfo:
  inputs:
  - {}
  outputs:
  - type: nil
  - type: string
  - type: number
  - type: string
  - type: boolean
  - type: boolean
  - type: boolean
BNGetNumBlocked:
  inputs:
  - {}
  outputs:
  - name: numBlocked
    type: number
BNGetNumFOF: {}
BNGetNumFriendGameAccounts: {}
BNGetNumFriendInvites:
  inputs:
  - {}
  outputs:
  - name: numInvites
    type: number
BNGetNumFriends:
  inputs:
  - {}
  outputs:
  - name: numBNetTotal
    type: number
  - name: numBNetOnline
    type: number
  - name: numBNetFavorite
    type: number
  - name: numBNetFavoriteOnline
    type: number
BNGetSelectedBlock: {}
BNGetSelectedFriend: {}
BNInviteFriend: {}
BNIsBlocked: {}
BNIsFriend: {}
BNIsSelf: {}
BNRemoveFriend: {}
BNRequestFOFInfo: {}
BNRequestInviteFriend: {}
BNSendFriendInvite: {}
BNSendFriendInviteByID: {}
BNSendGameData: {}
BNSendSoR: {}
BNSendVerifiedBattleTagInvite: {}
BNSendWhisper: {}
BNSetAFK: {}
BNSetBlocked: {}
BNSetCustomMessage: {}
BNSetDND: {}
BNSetFriendNote: {}
BNSetSelectedBlock: {}
BNSetSelectedFriend: {}
BNSummonFriendByIndex: {}
BNTokenFindName: {}
BreakUpLargeNumbers:
  inputs:
  - - type: number
  outputs:
  - name: valueString
    type: string
BuyArenaCharter: {}
BuybackItem: {}
BuyGuildBankTab: {}
BuyGuildCharter: {}
BuyMerchantItem: {}
BuyStableSlot: {}
BuyTrainerService: {}
C_AccountInfo.IsGUIDBattleNetAccountType:
  inputs:
  - - name: guid
      type: string
  outputs:
  - name: isBNet
    type: boolean
C_AccountInfo.IsGUIDRelatedToLocalAccount:
  inputs:
  - - name: guid
      type: string
  outputs:
  - name: isLocalUser
    type: boolean
C_AchievementInfo.GetRewardItemID:
  inputs:
  - - name: achievementID
      type: number
  outputs:
  - name: rewardItemID
    nilable: true
    type: number
C_AchievementInfo.GetSupercedingAchievements:
  inputs:
  - - name: achievementID
      type: number
  outputs:
  - innerType: number
    name: supercedingAchievements
    type: table
C_AchievementInfo.IsValidAchievement:
  inputs:
  - - name: achievementId
      type: number
  outputs:
  - name: isValidAchievement
    type: boolean
C_AchievementInfo.SetPortraitTexture:
  inputs:
  - - name: textureObject
      type: table
  outputs: {}
C_ActionBar.FindPetActionButtons:
  inputs:
  - - name: petActionID
      type: number
  outputs:
  - innerType: number
    name: slots
    type: table
C_ActionBar.FindSpellActionButtons:
  inputs:
  - - name: spellID
      type: number
  outputs:
  - innerType: number
    name: slots
    type: table
C_ActionBar.GetPetActionPetBarIndices:
  inputs:
  - - name: petActionID
      type: number
  outputs:
  - innerType: number
    name: slots
    type: table
C_ActionBar.HasPetActionButtons:
  inputs:
  - - name: petActionID
      type: number
  outputs:
  - name: hasPetActionButtons
    type: boolean
C_ActionBar.HasPetActionPetBarIndices:
  inputs:
  - - name: petActionID
      type: number
  outputs:
  - name: hasPetActionPetBarIndices
    type: boolean
C_ActionBar.HasSpellActionButtons:
  inputs:
  - - name: spellID
      type: number
  outputs:
  - name: hasSpellActionButtons
    type: boolean
C_ActionBar.IsAutoCastPetAction:
  inputs:
  - - name: slotID
      type: number
  outputs:
  - name: isAutoCastPetAction
    type: boolean
C_ActionBar.IsEnabledAutoCastPetAction:
  inputs:
  - - name: slotID
      type: number
  outputs:
  - name: isEnabledAutoCastPetAction
    type: boolean
C_ActionBar.IsHarmfulAction:
  inputs:
  - - name: actionID
      type: number
    - name: useNeutral
      type: boolean
  outputs:
  - name: isHarmful
    type: boolean
C_ActionBar.IsHelpfulAction:
  inputs:
  - - name: actionID
      type: number
    - name: useNeutral
      type: boolean
  outputs:
  - name: isHelpful
    type: boolean
C_ActionBar.IsOnBarOrSpecialBar:
  inputs:
  - - name: spellID
      type: number
  outputs:
  - name: isOnBarOrSpecialBar
    type: boolean
C_ActionBar.ShouldOverrideBarShowHealthBar:
  inputs:
  - {}
  outputs:
  - name: showHealthBar
    type: boolean
C_ActionBar.ShouldOverrideBarShowManaBar:
  inputs:
  - {}
  outputs:
  - name: showManaBar
    type: boolean
C_ActionBar.ToggleAutoCastPetAction:
  inputs:
  - - name: slotID
      type: number
  outputs: {}
C_AreaPoiInfo.GetAreaPOIForMap:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: number
    name: areaPoiIDs
    type: table
C_AreaPoiInfo.GetAreaPOIInfo:
  inputs:
  - - name: uiMapID
      type: number
    - name: areaPoiID
      type: number
  outputs:
  - name: poiInfo
    type: C_AreaPoiInfo.AreaPOIInfo
C_AreaPoiInfo.GetAreaPOITimeLeft:
  inputs:
  - - name: areaPoiID
      type: number
  outputs:
  - name: minutesLeft
    type: number
C_AreaPoiInfo.IsAreaPOITimed:
  inputs:
  - - name: areaPoiID
      type: number
  outputs:
  - name: isTimed
    type: boolean
C_AuthChallenge.Cancel: {}
C_AuthChallenge.DidChallengeSucceed: {}
C_AuthChallenge.OnTabPressed: {}
C_AuthChallenge.SetFrame: {}
C_AuthChallenge.Submit: {}
C_AzeriteEmpoweredItem.CanSelectPower:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
    - name: powerID
      type: number
  outputs:
  - name: canSelect
    type: boolean
C_AzeriteEmpoweredItem.ConfirmAzeriteEmpoweredItemRespec:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
  outputs: {}
C_AzeriteEmpoweredItem.GetAllTierInfo:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
  outputs:
  - innerType: C_AzeriteEmpoweredItem.AzeriteEmpoweredItemTierInfo
    name: tierInfo
    type: table
C_AzeriteEmpoweredItem.GetAllTierInfoByItemID:
  inputs:
  - - name: itemInfo
      type: string
    - name: classID
      nilable: true
      type: number
  outputs:
  - innerType: C_AzeriteEmpoweredItem.AzeriteEmpoweredItemTierInfo
    name: tierInfo
    type: table
C_AzeriteEmpoweredItem.GetAzeriteEmpoweredItemRespecCost:
  inputs:
  - {}
  outputs:
  - name: cost
    type: number
C_AzeriteEmpoweredItem.GetPowerInfo:
  inputs:
  - - name: powerID
      type: number
  outputs:
  - name: powerInfo
    type: C_AzeriteEmpoweredItem.AzeriteEmpoweredItemPowerInfo
C_AzeriteEmpoweredItem.GetPowerText:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
    - name: powerID
      type: number
    - name: level
      type: number
  outputs:
  - name: powerText
    type: C_AzeriteEmpoweredItem.AzeriteEmpoweredItemPowerText
C_AzeriteEmpoweredItem.GetSpecsForPower:
  inputs:
  - - name: powerID
      type: number
  outputs:
  - innerType: C_AzeriteEmpoweredItem.AzeriteSpecInfo
    name: specInfo
    type: table
C_AzeriteEmpoweredItem.HasAnyUnselectedPowers:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
  outputs:
  - name: hasAnyUnselectedPowers
    type: boolean
C_AzeriteEmpoweredItem.HasBeenViewed:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
  outputs:
  - name: hasBeenViewed
    type: boolean
C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItem:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: isAzeriteEmpoweredItem
    type: boolean
C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: isAzeriteEmpoweredItem
    type: boolean
C_AzeriteEmpoweredItem.IsAzeritePreviewSourceDisplayable:
  inputs:
  - - name: itemInfo
      type: string
    - name: classID
      nilable: true
      type: number
  outputs:
  - name: isAzeritePreviewSourceDisplayable
    type: boolean
C_AzeriteEmpoweredItem.IsHeartOfAzerothEquipped:
  inputs:
  - {}
  outputs:
  - name: isHeartOfAzerothEquipped
    type: boolean
C_AzeriteEmpoweredItem.IsPowerAvailableForSpec:
  inputs:
  - - name: powerID
      type: number
    - name: specID
      type: number
  outputs:
  - name: isPowerAvailableForSpec
    type: boolean
C_AzeriteEmpoweredItem.IsPowerSelected:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
    - name: powerID
      type: number
  outputs:
  - name: isSelected
    type: boolean
C_AzeriteEmpoweredItem.SelectPower:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
    - name: powerID
      type: number
  outputs:
  - name: success
    type: boolean
C_AzeriteEmpoweredItem.SetHasBeenViewed:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteEmpoweredItemLocation
      type: ItemLocation
  outputs: {}
C_AzeriteEssence.ActivateEssence:
  inputs:
  - - name: essenceID
      type: number
    - name: milestoneID
      type: number
  outputs: {}
C_AzeriteEssence.CanActivateEssence:
  inputs:
  - - name: essenceID
      type: number
    - name: milestoneID
      type: number
  outputs:
  - name: canActivate
    type: boolean
C_AzeriteEssence.CanDeactivateEssence:
  inputs:
  - - name: milestoneID
      type: number
  outputs:
  - name: canDeactivate
    type: boolean
C_AzeriteEssence.CanOpenUI:
  inputs:
  - {}
  outputs:
  - name: canOpen
    type: boolean
C_AzeriteEssence.ClearPendingActivationEssence:
  inputs:
  - {}
  outputs: {}
C_AzeriteEssence.CloseForge:
  inputs:
  - {}
  outputs: {}
C_AzeriteEssence.GetEssenceHyperlink:
  inputs:
  - - name: essenceID
      type: number
    - name: rank
      type: number
  outputs:
  - name: link
    type: string
C_AzeriteEssence.GetEssenceInfo:
  inputs:
  - - name: essenceID
      type: number
  outputs:
  - name: info
    type: C_AzeriteEssence.AzeriteEssenceInfo
C_AzeriteEssence.GetEssences:
  inputs:
  - {}
  outputs:
  - innerType: C_AzeriteEssence.AzeriteEssenceInfo
    name: essences
    type: table
C_AzeriteEssence.GetMilestoneEssence:
  inputs:
  - - name: milestoneID
      type: number
  outputs:
  - name: essenceID
    type: number
C_AzeriteEssence.GetMilestoneInfo:
  inputs:
  - - name: milestoneID
      type: number
  outputs:
  - name: info
    type: C_AzeriteEssence.AzeriteMilestoneInfo
C_AzeriteEssence.GetMilestones:
  inputs:
  - {}
  outputs:
  - stub:
    - slot: 1
    type: table
C_AzeriteEssence.GetMilestoneSpell:
  inputs:
  - - name: milestoneID
      type: number
  outputs:
  - name: spellID
    type: number
C_AzeriteEssence.GetNumUnlockedEssences:
  inputs:
  - {}
  outputs:
  - name: numUnlockedEssences
    type: number
C_AzeriteEssence.GetNumUsableEssences:
  inputs:
  - {}
  outputs:
  - name: numUsableEssences
    type: number
C_AzeriteEssence.GetPendingActivationEssence:
  inputs:
  - {}
  outputs:
  - name: essenceID
    type: number
C_AzeriteEssence.HasNeverActivatedAnyEssences:
  inputs:
  - {}
  outputs:
  - name: hasNeverActivatedAnyEssences
    type: boolean
C_AzeriteEssence.HasPendingActivationEssence:
  inputs:
  - {}
  outputs:
  - name: hasEssence
    type: boolean
C_AzeriteEssence.IsAtForge:
  inputs:
  - {}
  outputs:
  - name: isAtForge
    type: boolean
C_AzeriteEssence.SetPendingActivationEssence:
  inputs:
  - - name: essenceID
      type: number
  outputs: {}
C_AzeriteEssence.UnlockMilestone:
  inputs:
  - - name: milestoneID
      type: number
  outputs: {}
C_AzeriteItem.FindActiveAzeriteItem:
  inputs:
  - {}
  outputs:
  - mixin: ItemLocationMixin
    name: activeAzeriteItemLocation
    type: ItemLocation
C_AzeriteItem.GetAzeriteItemXPInfo:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteItemLocation
      type: ItemLocation
  outputs:
  - name: xp
    type: number
  - name: totalLevelXP
    type: number
C_AzeriteItem.GetPowerLevel:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteItemLocation
      type: ItemLocation
  outputs:
  - name: powerLevel
    type: number
C_AzeriteItem.GetUnlimitedPowerLevel:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteItemLocation
      type: ItemLocation
  outputs:
  - name: powerLevel
    type: number
C_AzeriteItem.HasActiveAzeriteItem:
  inputs:
  - {}
  outputs:
  - name: hasActiveAzeriteItem
    type: boolean
C_AzeriteItem.IsAzeriteItem:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: isAzeriteItem
    type: boolean
C_AzeriteItem.IsAzeriteItemAtMaxLevel:
  inputs:
  - {}
  outputs:
  - name: isAtMax
    type: boolean
C_AzeriteItem.IsAzeriteItemByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: isAzeriteItem
    type: boolean
C_AzeriteItem.IsAzeriteItemEnabled:
  inputs:
  - - mixin: ItemLocationMixin
      name: azeriteItemLocation
      type: ItemLocation
  outputs:
  - name: isEnabled
    type: boolean
C_BarberShop.ApplyCustomizationChoices:
  inputs:
  - {}
  outputs:
  - name: success
    type: boolean
C_BarberShop.Cancel:
  inputs:
  - {}
  outputs: {}
C_BarberShop.ClearPreviewChoices:
  inputs:
  - - default: false
      name: clearSavedChoices
      type: boolean
  outputs: {}
C_BarberShop.CycleCharCustomization:
  inputs:
  - - name: type
      type: number
    - name: forward
      type: boolean
  outputs: {}
C_BarberShop.GetAvailableCustomizations:
  inputs:
  - {}
  outputs:
  - innerType: CharCustomizationCategory
    name: categories
    type: table
C_BarberShop.GetBarbersChoiceCost:
  inputs:
  - {}
  outputs:
  - name: cost
    type: number
C_BarberShop.GetCurrentCameraZoom:
  inputs:
  - {}
  outputs:
  - name: zoomLevel
    type: number
C_BarberShop.GetCurrentCharacterData:
  inputs:
  - {}
  outputs:
  - name: characterData
    type: C_BarberShop.BarberShopCharacterData
C_BarberShop.GetCurrentCost:
  inputs:
  - {}
  outputs:
  - name: cost
    type: number
C_BarberShop.GetCustomizationTypeInfo:
  inputs:
  - - name: type
      type: number
  outputs:
  - name: customizationName
    type: string
  - name: name
    type: string
  - name: isCurrent
    type: boolean
C_BarberShop.GetViewingChrModel:
  inputs:
  - {}
  outputs:
  - name: chrModelID
    nilable: true
    type: number
C_BarberShop.HasAnyChanges:
  inputs:
  - {}
  outputs:
  - name: hasChanges
    type: boolean
C_BarberShop.IsValidCustomizationType:
  inputs:
  - - name: type
      type: number
  outputs:
  - name: isValid
    type: boolean
C_BarberShop.IsViewingAlteredForm:
  inputs:
  - {}
  outputs:
  - name: isViewingAlteredForm
    type: boolean
C_BarberShop.IsViewingNativeSex:
  inputs:
  - {}
  outputs:
  - name: isNativeSex
    type: boolean
C_BarberShop.IsViewingVisibleSex:
  inputs:
  - - name: sex
      type: number
  outputs:
  - name: isVisibleSex
    type: boolean
C_BarberShop.PreviewCustomizationChoice:
  inputs:
  - - name: optionID
      type: number
    - name: choiceID
      type: number
  outputs: {}
C_BarberShop.RandomizeCustomizationChoices:
  inputs:
  - {}
  outputs: {}
C_BarberShop.ResetCameraRotation:
  inputs:
  - {}
  outputs: {}
C_BarberShop.ResetCustomizationChoices:
  inputs:
  - {}
  outputs: {}
C_BarberShop.RotateCamera:
  inputs:
  - - name: diffDegrees
      type: number
  outputs: {}
C_BarberShop.SetCameraDistanceOffset:
  inputs:
  - - name: offset
      type: number
  outputs: {}
C_BarberShop.SetCameraZoomLevel:
  inputs:
  - - name: zoomLevel
      type: number
    - name: keepCustomZoom
      nilable: true
      type: boolean
  outputs: {}
C_BarberShop.SetCustomizationChoice:
  inputs:
  - - name: optionID
      type: number
    - name: choiceID
      type: number
  outputs: {}
C_BarberShop.SetModelDressState:
  inputs:
  - - name: dressedState
      type: boolean
  outputs: {}
C_BarberShop.SetSelectedSex:
  inputs:
  - - name: sex
      type: number
  outputs: {}
C_BarberShop.SetViewingAlteredForm:
  inputs:
  - - name: isViewingAlteredForm
      type: boolean
  outputs: {}
C_BarberShop.SetViewingChrModel:
  inputs:
  - - name: chrModelID
      nilable: true
      type: number
  outputs: {}
C_BarberShop.SetViewingShapeshiftForm:
  inputs:
  - - name: shapeshiftFormID
      nilable: true
      type: number
  outputs: {}
C_BarberShop.ZoomCamera:
  inputs:
  - - name: zoomAmount
      type: number
  outputs: {}
C_BehavioralMessaging.SendNotificationReceipt:
  inputs:
  - - name: dbId
      type: string
    - name: openTimeSeconds
      type: number
    - name: readTimeSeconds
      type: number
  outputs: {}
C_Calendar.AddEvent:
  inputs:
  - {}
  outputs: {}
C_Calendar.AreNamesReady:
  inputs:
  - {}
  outputs:
  - name: ready
    type: boolean
C_Calendar.CanAddEvent:
  inputs:
  - {}
  outputs:
  - name: canAddEvent
    type: boolean
C_Calendar.CanSendInvite:
  inputs:
  - {}
  outputs:
  - name: canSendInvite
    type: boolean
C_Calendar.CloseEvent:
  inputs:
  - {}
  outputs: {}
C_Calendar.ContextMenuEventCanComplain:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
    - name: eventIndex
      type: number
  outputs:
  - name: canComplain
    type: boolean
C_Calendar.ContextMenuEventCanEdit:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
    - name: eventIndex
      type: number
  outputs:
  - name: canEdit
    type: boolean
C_Calendar.ContextMenuEventCanRemove:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
    - name: eventIndex
      type: number
  outputs:
  - name: canRemove
    type: boolean
C_Calendar.ContextMenuEventClipboard:
  inputs:
  - {}
  outputs:
  - name: exists
    type: boolean
C_Calendar.ContextMenuEventCopy:
  inputs:
  - {}
  outputs: {}
C_Calendar.ContextMenuEventGetCalendarType:
  inputs:
  - {}
  outputs:
  - name: calendarType
    nilable: true
    type: string
C_Calendar.ContextMenuEventPaste:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
  outputs: {}
C_Calendar.ContextMenuEventRemove:
  inputs:
  - {}
  outputs: {}
C_Calendar.ContextMenuEventSignUp:
  inputs:
  - {}
  outputs: {}
C_Calendar.ContextMenuGetEventIndex:
  inputs:
  - {}
  outputs:
  - name: info
    type: C_Calendar.CalendarEventIndexInfo
C_Calendar.ContextMenuInviteAvailable:
  inputs:
  - {}
  outputs: {}
C_Calendar.ContextMenuInviteDecline:
  inputs:
  - {}
  outputs: {}
C_Calendar.ContextMenuInviteRemove:
  inputs:
  - {}
  outputs: {}
C_Calendar.ContextMenuInviteTentative:
  inputs:
  - {}
  outputs: {}
C_Calendar.ContextMenuSelectEvent:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
    - name: eventIndex
      type: number
  outputs: {}
C_Calendar.CreateCommunitySignUpEvent:
  inputs:
  - {}
  outputs: {}
C_Calendar.CreateGuildAnnouncementEvent:
  inputs:
  - {}
  outputs: {}
C_Calendar.CreateGuildSignUpEvent:
  inputs:
  - {}
  outputs: {}
C_Calendar.CreatePlayerEvent:
  inputs:
  - {}
  outputs: {}
C_Calendar.EventAvailable:
  inputs:
  - {}
  outputs: {}
C_Calendar.EventCanEdit:
  inputs:
  - {}
  outputs:
  - name: canEdit
    type: boolean
C_Calendar.EventClearAutoApprove:
  inputs:
  - {}
  outputs: {}
C_Calendar.EventClearLocked:
  inputs:
  - {}
  outputs: {}
C_Calendar.EventClearModerator:
  inputs:
  - - name: inviteIndex
      type: number
  outputs: {}
C_Calendar.EventDecline:
  inputs:
  - {}
  outputs: {}
C_Calendar.EventGetCalendarType:
  inputs:
  - {}
  outputs:
  - name: calendarType
    nilable: true
    type: string
C_Calendar.EventGetClubId:
  inputs:
  - {}
  outputs:
  - name: info
    nilable: true
    type: string
C_Calendar.EventGetInvite:
  inputs:
  - - name: eventIndex
      type: number
  outputs:
  - name: info
    type: C_Calendar.CalendarEventInviteInfo
C_Calendar.EventGetInviteResponseTime:
  inputs:
  - - name: eventIndex
      type: number
  outputs:
  - name: time
    type: CalendarTime
C_Calendar.EventGetInviteSortCriterion:
  inputs:
  - {}
  outputs:
  - name: criterion
    type: string
  - name: reverse
    type: boolean
C_Calendar.EventGetSelectedInvite:
  inputs:
  - {}
  outputs:
  - name: inviteIndex
    nilable: true
    type: number
C_Calendar.EventGetStatusOptions:
  inputs:
  - - name: eventIndex
      type: number
  outputs:
  - innerType: C_Calendar.CalendarEventStatusOption
    name: options
    type: table
C_Calendar.EventGetTextures:
  inputs:
  - - name: eventType
      type: number
  outputs:
  - innerType: C_Calendar.CalendarEventTextureInfo
    name: textures
    type: table
C_Calendar.EventGetTypes:
  inputs:
  - {}
  outputs:
  - innerType: string
    name: types
    type: table
C_Calendar.EventGetTypesDisplayOrdered:
  inputs:
  - {}
  outputs:
  - innerType: C_Calendar.CalendarEventTypeDisplayInfo
    name: infos
    type: table
C_Calendar.EventHasPendingInvite:
  inputs:
  - {}
  outputs:
  - name: hasPendingInvite
    type: boolean
C_Calendar.EventHaveSettingsChanged:
  inputs:
  - {}
  outputs:
  - name: haveSettingsChanged
    type: boolean
C_Calendar.EventInvite:
  inputs:
  - - name: name
      type: string
  outputs: {}
C_Calendar.EventRemoveInvite:
  inputs:
  - - name: inviteIndex
      type: number
  outputs: {}
C_Calendar.EventRemoveInviteByGuid:
  inputs:
  - - name: guid
      type: string
  outputs: {}
C_Calendar.EventSelectInvite:
  inputs:
  - - name: inviteIndex
      type: number
  outputs: {}
C_Calendar.EventSetAutoApprove:
  inputs:
  - {}
  outputs: {}
C_Calendar.EventSetClubId:
  inputs:
  - - name: clubId
      nilable: true
      type: string
  outputs: {}
C_Calendar.EventSetDate:
  inputs:
  - - name: month
      type: number
    - name: monthDay
      type: number
    - name: year
      type: number
  outputs: {}
C_Calendar.EventSetDescription:
  inputs:
  - - name: description
      type: string
  outputs: {}
C_Calendar.EventSetInviteStatus:
  inputs:
  - - name: eventIndex
      type: number
    - name: status
      type: number
  outputs: {}
C_Calendar.EventSetLocked:
  inputs:
  - {}
  outputs: {}
C_Calendar.EventSetModerator:
  inputs:
  - - name: inviteIndex
      type: number
  outputs: {}
C_Calendar.EventSetTextureID:
  inputs:
  - - name: textureIndex
      type: number
  outputs: {}
C_Calendar.EventSetTime:
  inputs:
  - - name: hour
      type: number
    - name: minute
      type: number
  outputs: {}
C_Calendar.EventSetTitle:
  inputs:
  - - name: title
      type: string
  outputs: {}
C_Calendar.EventSetType:
  inputs:
  - - name: typeIndex
      type: number
  outputs: {}
C_Calendar.EventSignUp:
  inputs:
  - {}
  outputs: {}
C_Calendar.EventSortInvites:
  inputs:
  - - name: criterion
      type: string
    - name: reverse
      type: boolean
  outputs: {}
C_Calendar.EventTentative:
  inputs:
  - {}
  outputs: {}
C_Calendar.GetClubCalendarEvents:
  inputs:
  - - name: clubId
      type: string
    - name: startTime
      type: CalendarTime
    - name: endTime
      type: CalendarTime
  outputs:
  - innerType: C_Calendar.CalendarDayEvent
    name: events
    type: table
C_Calendar.GetDayEvent:
  inputs:
  - - name: monthOffset
      type: number
    - name: monthDay
      type: number
    - name: index
      type: number
  outputs:
  - name: event
    type: C_Calendar.CalendarDayEvent
C_Calendar.GetDefaultGuildFilter:
  inputs:
  - {}
  outputs:
  - name: info
    type: C_Calendar.CalendarGuildFilterInfo
C_Calendar.GetEventIndex:
  inputs:
  - {}
  outputs:
  - name: info
    type: C_Calendar.CalendarEventIndexInfo
C_Calendar.GetEventIndexInfo:
  inputs:
  - - name: eventID
      type: string
    - name: monthOffset
      nilable: true
      type: number
    - name: monthDay
      nilable: true
      type: number
  outputs:
  - name: eventIndexInfo
    nilable: true
    type: C_Calendar.CalendarEventIndexInfo
C_Calendar.GetEventInfo:
  inputs:
  - {}
  outputs:
  - name: info
    type: C_Calendar.CalendarEventInfo
C_Calendar.GetFirstPendingInvite:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
  outputs:
  - name: firstPendingInvite
    nilable: true
    type: number
C_Calendar.GetGuildEventInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: info
    type: C_Calendar.CalendarGuildEventInfo
C_Calendar.GetGuildEventSelectionInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: info
    type: C_Calendar.CalendarEventIndexInfo
C_Calendar.GetHolidayInfo:
  inputs:
  - - name: monthOffset
      type: number
    - name: monthDay
      type: number
    - name: index
      type: number
  outputs:
  - name: event
    type: C_Calendar.CalendarHolidayInfo
C_Calendar.GetMaxCreateDate:
  inputs:
  - {}
  outputs:
  - name: maxCreateDate
    type: CalendarTime
C_Calendar.GetMinDate:
  inputs:
  - {}
  outputs:
  - name: minDate
    type: CalendarTime
C_Calendar.GetMonthInfo:
  impl: C_Calendar.GetMonthInfo
  inputs:
  - - default: 0
      name: offsetMonths
      type: number
  outputs:
  - name: monthInfo
    type: C_Calendar.CalendarMonthInfo
  states:
  - Calendar
C_Calendar.GetNextClubId:
  inputs:
  - {}
  outputs:
  - name: clubId
    nilable: true
    type: string
C_Calendar.GetNumDayEvents:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
  outputs:
  - name: numDayEvents
    type: number
C_Calendar.GetNumGuildEvents:
  inputs:
  - {}
  outputs:
  - name: numGuildEvents
    type: number
C_Calendar.GetNumInvites:
  inputs:
  - {}
  outputs:
  - name: num
    type: number
C_Calendar.GetNumPendingInvites:
  inputs:
  - {}
  outputs:
  - name: num
    type: number
C_Calendar.GetRaidInfo:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
    - name: eventIndex
      type: number
  outputs:
  - name: info
    type: C_Calendar.CalendarRaidInfo
C_Calendar.IsActionPending:
  inputs:
  - {}
  outputs:
  - name: actionPending
    type: boolean
C_Calendar.IsEventOpen:
  inputs:
  - {}
  outputs:
  - name: isOpen
    type: boolean
C_Calendar.MassInviteCommunity:
  inputs:
  - - name: clubId
      type: string
    - name: minLevel
      type: number
    - name: maxLevel
      type: number
    - name: maxRankOrder
      nilable: true
      type: number
  outputs: {}
C_Calendar.MassInviteGuild:
  inputs:
  - - name: minLevel
      type: number
    - name: maxLevel
      type: number
    - name: maxRankOrder
      type: number
  outputs: {}
C_Calendar.OpenCalendar:
  inputs:
  - {}
  outputs: {}
C_Calendar.OpenEvent:
  inputs:
  - - name: offsetMonths
      type: number
    - name: monthDay
      type: number
    - name: index
      type: number
  outputs:
  - name: success
    type: boolean
C_Calendar.RemoveEvent:
  inputs:
  - {}
  outputs: {}
C_Calendar.SetAbsMonth:
  impl: C_Calendar.SetAbsMonth
  inputs:
  - - name: month
      type: number
    - name: year
      type: number
  outputs: {}
  states:
  - Calendar
C_Calendar.SetMonth:
  impl: C_Calendar.SetMonth
  inputs:
  - - name: offsetMonths
      type: number
  outputs: {}
  states:
  - Calendar
C_Calendar.SetNextClubId:
  inputs:
  - - name: clubId
      nilable: true
      type: string
  outputs: {}
C_Calendar.UpdateEvent:
  inputs:
  - {}
  outputs: {}
C_CharacterServices.AssignPFCDistribution: {}
C_CharacterServices.AssignUpgradeDistribution: {}
C_CharacterServices.GetActiveCharacterUpgradeBoostType: {}
C_CharacterServices.GetActiveClassTrialBoostType: {}
C_CharacterServices.GetAutomaticBoost: {}
C_CharacterServices.GetAutomaticBoostCharacter: {}
C_CharacterServices.GetCharacterServiceDisplayData:
  inputs:
  - - name: boostType
      type: number
  outputs:
  - name: upgradeDisplayData
    stub:
      popupInfo: {}
    type: table
C_CharacterServices.GetCharacterServiceDisplayDataByVASType: {}
C_CharacterServices.GetCharacterServiceDisplayInfo: {}
C_CharacterServices.GetCharacterServiceDisplayOrder: {}
C_CharacterServices.GetVASDistributions: {}
C_CharacterServices.HasRequiredBoostForClassTrial: {}
C_CharacterServices.HasRequiredBoostForUnrevoke: {}
C_CharacterServices.SetAutomaticBoost: {}
C_CharacterServices.SetAutomaticBoostCharacter: {}
C_CharacterServicesPublic.ShouldSeeControlPopup: {}
C_ChatBubbles.GetAllChatBubbles:
  inputs:
  - - default: false
      name: includeForbidden
      type: boolean
  outputs:
  - innerType: table
    name: chatBubbles
    type: table
C_ChatInfo.CanReportPlayer:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: canReport
    type: boolean
C_ChatInfo.GetChannelInfoFromIdentifier:
  inputs:
  - - name: channelIdentifier
      type: string
  outputs:
  - name: info
    nilable: true
    type: ChatChannelInfo
C_ChatInfo.GetChannelRosterInfo:
  inputs:
  - - name: channelIndex
      type: number
    - name: rosterIndex
      type: number
  outputs:
  - name: name
    type: string
  - name: owner
    type: boolean
  - name: moderator
    type: boolean
  - name: guid
    type: string
C_ChatInfo.GetChannelShortcut:
  inputs:
  - - name: channelIndex
      type: number
  outputs:
  - name: shortcut
    type: string
C_ChatInfo.GetChannelShortcutForChannelID:
  inputs:
  - - name: channelID
      type: number
  outputs:
  - name: shortcut
    type: string
C_ChatInfo.GetChatTypeName:
  inputs:
  - - name: typeID
      type: number
  outputs:
  - name: name
    nilable: true
    type: string
C_ChatInfo.GetNumActiveChannels:
  inputs:
  - {}
  outputs:
  - name: numChannels
    type: number
C_ChatInfo.GetRegisteredAddonMessagePrefixes:
  inputs:
  - {}
  outputs:
  - innerType: string
    name: registeredPrefixes
    type: table
C_ChatInfo.IsAddonMessagePrefixRegistered:
  inputs:
  - - name: prefix
      type: string
  outputs:
  - name: isRegistered
    type: boolean
C_ChatInfo.IsPartyChannelType:
  inputs:
  - - name: channelType
      type: number
  outputs:
  - name: isPartyChannelType
    type: boolean
C_ChatInfo.IsValidChatLine:
  inputs:
  - - name: chatLine
      nilable: true
      type: number
  outputs:
  - name: isValid
    type: boolean
C_ChatInfo.RegisterAddonMessagePrefix:
  inputs:
  - - name: prefix
      type: string
  outputs:
  - name: successfulRequest
    type: boolean
C_ChatInfo.ReportServerLag:
  inputs:
  - {}
  outputs: {}
C_ChatInfo.SendAddonMessage:
  inputs:
  - - name: prefix
      type: string
    - name: message
      type: string
    - name: chatType
      nilable: true
      type: string
    - name: target
      nilable: true
      type: string
  outputs:
  - name: success
    type: boolean
C_ChatInfo.SendAddonMessageLogged:
  inputs:
  - - name: prefix
      type: string
    - name: message
      type: string
    - name: chatType
      nilable: true
      type: string
    - name: target
      nilable: true
      type: string
  outputs:
  - name: success
    type: boolean
C_ChatInfo.SwapChatChannelsByChannelIndex:
  inputs:
  - - name: firstChannelIndex
      type: number
    - name: secondChannelIndex
      type: number
  outputs: {}
C_Club.AcceptInvitation:
  inputs:
  - - name: clubId
      type: string
  outputs: {}
C_Club.AddClubStreamChatChannel:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs: {}
C_Club.AdvanceStreamViewMarker:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs: {}
C_Club.AssignMemberRole:
  inputs:
  - - name: clubId
      type: string
    - name: memberId
      type: number
    - name: roleId
      type: number
  outputs: {}
C_Club.CanResolvePlayerLocationFromClubMessageData:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: epoch
      type: number
    - name: position
      type: number
  outputs:
  - name: canResolve
    type: boolean
C_Club.ClearAutoAdvanceStreamViewMarker:
  inputs:
  - {}
  outputs: {}
C_Club.ClearClubPresenceSubscription:
  inputs:
  - {}
  outputs: {}
C_Club.CompareBattleNetDisplayName:
  inputs:
  - - name: clubId
      type: string
    - name: lhsMemberId
      type: number
    - name: rhsMemberId
      type: number
  outputs:
  - name: comparison
    type: number
C_Club.CreateClub:
  inputs:
  - - name: name
      type: string
    - name: shortName
      nilable: true
      type: string
    - name: description
      type: string
    - name: clubType
      type: number
    - name: avatarId
      type: number
    - name: isCrossFaction
      nilable: true
      type: boolean
  outputs: {}
C_Club.CreateStream:
  inputs:
  - - name: clubId
      type: string
    - name: name
      type: string
    - name: subject
      type: string
    - name: leadersAndModeratorsOnly
      type: boolean
  outputs: {}
C_Club.CreateTicket:
  inputs:
  - - name: clubId
      type: string
    - name: allowedRedeemCount
      nilable: true
      type: number
    - name: duration
      nilable: true
      type: number
    - name: defaultStreamId
      nilable: true
      type: string
  outputs: {}
C_Club.DeclineInvitation:
  inputs:
  - - name: clubId
      type: string
  outputs: {}
C_Club.DestroyClub:
  inputs:
  - - name: clubId
      type: string
  outputs: {}
C_Club.DestroyMessage:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: messageId
      type: C_Club.ClubMessageIdentifier
  outputs: {}
C_Club.DestroyStream:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs: {}
C_Club.DestroyTicket:
  inputs:
  - - name: clubId
      type: string
    - name: ticketId
      type: string
  outputs: {}
C_Club.EditClub:
  inputs:
  - - name: clubId
      type: string
    - name: name
      nilable: true
      type: string
    - name: shortName
      nilable: true
      type: string
    - name: description
      nilable: true
      type: string
    - name: avatarId
      nilable: true
      type: number
    - name: broadcast
      nilable: true
      type: string
    - name: crossFaction
      nilable: true
      type: boolean
  outputs: {}
C_Club.EditMessage:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: messageId
      type: C_Club.ClubMessageIdentifier
    - name: message
      type: string
  outputs: {}
C_Club.EditStream:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: name
      nilable: true
      type: string
    - name: subject
      nilable: true
      type: string
    - name: leadersAndModeratorsOnly
      nilable: true
      type: boolean
  outputs: {}
C_Club.Flush:
  inputs:
  - {}
  outputs: {}
C_Club.FocusCommunityStreams:
  inputs:
  - {}
  outputs: {}
C_Club.FocusStream:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs:
  - name: focused
    type: boolean
C_Club.GetAssignableRoles:
  inputs:
  - - name: clubId
      type: string
    - name: memberId
      type: number
  outputs:
  - innerType: number
    name: assignableRoles
    type: table
C_Club.GetAvatarIdList:
  inputs:
  - - name: clubType
      type: number
  outputs:
  - innerType: number
    name: avatarIds
    nilable: true
    type: table
C_Club.GetClubInfo:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - name: info
    nilable: true
    type: C_Club.ClubInfo
C_Club.GetClubMembers:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      nilable: true
      type: string
  outputs:
  - innerType: number
    name: members
    type: table
C_Club.GetClubPrivileges:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - name: privilegeInfo
    type: C_Club.ClubPrivilegeInfo
C_Club.GetClubStreamNotificationSettings:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - innerType: C_Club.ClubStreamNotificationSetting
    name: settings
    type: table
C_Club.GetCommunityNameResultText:
  inputs:
  - - name: result
      type: number
  outputs:
  - name: errorCode
    nilable: true
    type: string
C_Club.GetInfoFromLastCommunityChatLine:
  inputs:
  - {}
  outputs:
  - name: messageInfo
    type: C_Club.ClubMessageInfo
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: clubType
    type: number
C_Club.GetInvitationCandidates:
  inputs:
  - - name: filter
      nilable: true
      type: string
    - name: maxResults
      nilable: true
      type: number
    - name: cursorPosition
      nilable: true
      type: number
    - name: allowFullMatch
      nilable: true
      type: boolean
    - name: clubId
      type: string
  outputs:
  - innerType: C_Club.ClubInvitationCandidateInfo
    name: candidates
    type: table
C_Club.GetInvitationInfo:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - name: invitation
    nilable: true
    type: C_Club.ClubSelfInvitationInfo
C_Club.GetInvitationsForClub:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - innerType: C_Club.ClubInvitationInfo
    name: invitations
    type: table
C_Club.GetInvitationsForSelf:
  inputs:
  - {}
  outputs:
  - innerType: C_Club.ClubSelfInvitationInfo
    name: invitations
    type: table
C_Club.GetMemberInfo:
  inputs:
  - - name: clubId
      type: string
    - name: memberId
      type: number
  outputs:
  - name: info
    nilable: true
    type: C_Club.ClubMemberInfo
C_Club.GetMemberInfoForSelf:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - name: info
    nilable: true
    type: C_Club.ClubMemberInfo
C_Club.GetMessageInfo:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: messageId
      type: C_Club.ClubMessageIdentifier
  outputs:
  - name: message
    nilable: true
    type: C_Club.ClubMessageInfo
C_Club.GetMessageRanges:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs:
  - innerType: C_Club.ClubMessageRange
    name: ranges
    type: table
C_Club.GetMessagesBefore:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: newest
      type: C_Club.ClubMessageIdentifier
    - name: count
      type: number
  outputs:
  - innerType: C_Club.ClubMessageInfo
    name: messages
    type: table
C_Club.GetMessagesInRange:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: oldest
      type: C_Club.ClubMessageIdentifier
    - name: newest
      type: C_Club.ClubMessageIdentifier
  outputs:
  - innerType: C_Club.ClubMessageInfo
    name: messages
    type: table
C_Club.GetStreamInfo:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs:
  - name: streamInfo
    nilable: true
    type: C_Club.ClubStreamInfo
C_Club.GetStreams:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - innerType: C_Club.ClubStreamInfo
    name: streams
    type: table
C_Club.GetStreamViewMarker:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs:
  - name: lastReadTime
    nilable: true
    type: number
C_Club.GetSubscribedClubs:
  inputs:
  - {}
  outputs:
  - innerType: C_Club.ClubInfo
    name: clubs
    type: table
C_Club.GetTickets:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - innerType: C_Club.ClubTicketInfo
    name: tickets
    type: table
C_Club.IsAccountMuted:
  inputs:
  - - name: clubId
      type: string
  outputs:
  - name: accountMuted
    type: boolean
C_Club.IsBeginningOfStream:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: messageId
      type: C_Club.ClubMessageIdentifier
  outputs:
  - name: isBeginningOfStream
    type: boolean
C_Club.IsEnabled:
  inputs:
  - {}
  outputs:
  - name: clubsEnabled
    type: boolean
C_Club.IsRestricted:
  inputs:
  - {}
  outputs:
  - name: restrictionReason
    type: number
C_Club.IsSubscribedToStream:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs:
  - name: subscribed
    type: boolean
C_Club.KickMember:
  inputs:
  - - name: clubId
      type: string
    - name: memberId
      type: number
  outputs: {}
C_Club.LeaveClub:
  inputs:
  - - name: clubId
      type: string
  outputs: {}
C_Club.RedeemTicket:
  inputs:
  - - name: ticketId
      type: string
  outputs: {}
C_Club.RequestInvitationsForClub:
  inputs:
  - - name: clubId
      type: string
  outputs: {}
C_Club.RequestMoreMessagesBefore:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: messageId
      nilable: true
      type: C_Club.ClubMessageIdentifier
    - name: count
      nilable: true
      type: number
  outputs:
  - name: alreadyHasMessages
    type: boolean
C_Club.RequestTicket:
  inputs:
  - - name: ticketId
      type: string
  outputs: {}
C_Club.RequestTickets:
  inputs:
  - - name: clubId
      type: string
  outputs: {}
C_Club.RevokeInvitation:
  inputs:
  - - name: clubId
      type: string
    - name: memberId
      type: number
  outputs: {}
C_Club.SendBattleTagFriendRequest:
  inputs:
  - - name: guildClubId
      type: string
    - name: memberId
      type: number
  outputs: {}
C_Club.SendInvitation:
  inputs:
  - - name: clubId
      type: string
    - name: memberId
      type: number
  outputs: {}
C_Club.SendMessage:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
    - name: message
      type: string
  outputs: {}
C_Club.SetAutoAdvanceStreamViewMarker:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs: {}
C_Club.SetAvatarTexture:
  inputs:
  - - name: texture
      type: table
    - name: avatarId
      type: number
    - name: clubType
      type: number
  outputs: {}
C_Club.SetClubMemberNote:
  inputs:
  - - name: clubId
      type: string
    - name: memberId
      type: number
    - name: note
      type: string
  outputs: {}
C_Club.SetClubPresenceSubscription:
  inputs:
  - - name: clubId
      type: string
  outputs: {}
C_Club.SetClubStreamNotificationSettings:
  inputs:
  - - name: clubId
      type: string
    - innerType: C_Club.ClubStreamNotificationSetting
      name: settings
      type: table
  outputs: {}
C_Club.SetCommunityID:
  inputs:
  - - name: communityID
      type: number
  outputs: {}
C_Club.SetFavorite:
  inputs:
  - - name: clubId
      type: string
    - name: isFavorite
      type: boolean
  outputs: {}
C_Club.SetSocialQueueingEnabled:
  inputs:
  - - name: clubId
      type: string
    - name: enabled
      type: boolean
  outputs: {}
C_Club.ShouldAllowClubType:
  inputs:
  - - name: clubType
      type: number
  outputs:
  - name: clubTypeIsAllowed
    type: boolean
C_Club.UnfocusAllStreams:
  inputs:
  - - name: unsubscribe
      type: boolean
  outputs: {}
C_Club.UnfocusStream:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs: {}
C_Club.ValidateText:
  inputs:
  - - name: clubType
      type: number
    - name: text
      type: string
    - name: clubFieldType
      type: number
  outputs:
  - name: result
    type: number
C_Commentator.AddPlayerOverrideName:
  inputs:
  - - name: playerName
      type: string
    - name: overrideName
      type: string
  outputs: {}
C_Commentator.AddTrackedDefensiveAuras:
  inputs:
  - - innerType: number
      name: spellIDs
      type: table
  outputs: {}
C_Commentator.AddTrackedOffensiveAuras:
  inputs:
  - - innerType: number
      name: spellIDs
      type: table
  outputs: {}
C_Commentator.AreTeamsSwapped:
  inputs:
  - {}
  outputs:
  - name: teamsAreSwapped
    type: boolean
C_Commentator.AssignPlayersToTeam:
  inputs:
  - - innerType: string
      name: playerName
      type: table
    - name: teamName
      type: string
  outputs: {}
C_Commentator.AssignPlayersToTeamInCurrentInstance:
  inputs:
  - - name: teamIndex
      type: number
    - name: teamName
      type: string
  outputs: {}
C_Commentator.AssignPlayerToTeam:
  inputs:
  - - name: playerName
      type: string
    - name: teamName
      type: string
  outputs: {}
C_Commentator.CanUseCommentatorCheats:
  inputs:
  - {}
  outputs:
  - name: canUseCommentatorCheats
    type: boolean
C_Commentator.ClearCameraTarget:
  inputs:
  - {}
  outputs: {}
C_Commentator.ClearFollowTarget:
  inputs:
  - {}
  outputs: {}
C_Commentator.ClearLookAtTarget:
  inputs:
  - - name: lookAtIndex
      nilable: true
      type: number
  outputs: {}
C_Commentator.EnterInstance:
  inputs:
  - {}
  outputs: {}
C_Commentator.ExitInstance:
  inputs:
  - {}
  outputs: {}
C_Commentator.FindSpectatedUnit:
  inputs:
  - - name: unitToken
      type: string
  outputs:
  - name: playerIndex
    type: number
  - name: teamIndex
    type: number
  - name: isPet
    type: boolean
C_Commentator.FindTeamNameInCurrentInstance:
  inputs:
  - - name: teamIndex
      type: number
  outputs:
  - name: teamName
    nilable: true
    type: string
C_Commentator.FindTeamNameInDirectory:
  inputs:
  - - innerType: string
      name: playerNames
      type: table
  outputs:
  - name: teamName
    nilable: true
    type: string
C_Commentator.FlushCommentatorHistory:
  inputs:
  - {}
  outputs: {}
C_Commentator.FollowPlayer:
  inputs:
  - - name: factionIndex
      type: number
    - name: playerIndex
      type: number
    - name: forceInstantTransition
      nilable: true
      type: boolean
  outputs: {}
C_Commentator.FollowUnit:
  inputs:
  - - name: token
      type: string
  outputs: {}
C_Commentator.ForceFollowTransition:
  inputs:
  - {}
  outputs: {}
C_Commentator.GetAdditionalCameraWeight:
  inputs:
  - {}
  outputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
C_Commentator.GetAdditionalCameraWeightByToken:
  inputs:
  - - name: unitToken
      type: string
  outputs:
  - name: weight
    type: number
C_Commentator.GetAllPlayerOverrideNames:
  inputs:
  - {}
  outputs:
  - innerType: C_Commentator.NameOverrideEntry
    name: nameEntries
    type: table
C_Commentator.GetCamera:
  inputs:
  - {}
  outputs:
  - name: xPos
    type: number
  - name: yPos
    type: number
  - name: zPos
    type: number
  - name: yaw
    type: number
  - name: pitch
    type: number
  - name: roll
    type: number
  - name: fov
    type: number
C_Commentator.GetCameraCollision:
  inputs:
  - {}
  outputs:
  - name: isColliding
    type: boolean
C_Commentator.GetCameraPosition:
  inputs:
  - {}
  outputs:
  - name: xPos
    type: number
  - name: yPos
    type: number
  - name: zPos
    type: number
C_Commentator.GetCommentatorHistory:
  inputs:
  - {}
  outputs:
  - name: history
    type: C_Commentator.CommentatorHistory
C_Commentator.GetCurrentMapID:
  inputs:
  - {}
  outputs:
  - name: mapID
    nilable: true
    type: number
C_Commentator.GetDampeningPercent:
  inputs:
  - {}
  outputs:
  - name: percentage
    type: number
C_Commentator.GetDistanceBeforeForcedHorizontalConvergence:
  inputs:
  - {}
  outputs:
  - name: distance
    type: number
C_Commentator.GetDurationToForceHorizontalConvergence:
  inputs:
  - {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetExcludeDistance:
  inputs:
  - {}
  outputs:
  - name: excludeDistance
    type: number
C_Commentator.GetHardlockWeight:
  inputs:
  - {}
  outputs:
  - name: weight
    type: number
C_Commentator.GetHorizontalAngleThresholdToSmooth:
  inputs:
  - {}
  outputs:
  - name: angle
    type: number
C_Commentator.GetIndirectSpellID:
  inputs:
  - - name: trackedSpellID
      type: number
  outputs:
  - name: indirectSpellID
    type: number
C_Commentator.GetInstanceInfo:
  inputs:
  - - name: mapIndex
      type: number
    - name: instanceIndex
      type: number
  outputs:
  - name: mapID
    type: number
  - name: mapName
    nilable: true
    type: string
  - name: status
    type: number
  - name: instanceIDLow
    type: number
  - name: instanceIDHigh
    type: number
C_Commentator.GetLookAtLerpAmount:
  inputs:
  - {}
  outputs:
  - name: amount
    type: number
C_Commentator.GetMapInfo:
  inputs:
  - - name: mapIndex
      type: number
  outputs:
  - name: teamSize
    type: number
  - name: minLevel
    type: number
  - name: maxLevel
    type: number
  - name: numInstances
    type: number
C_Commentator.GetMatchDuration:
  inputs:
  - {}
  outputs:
  - name: seconds
    type: number
C_Commentator.GetMaxNumPlayersPerTeam:
  inputs:
  - {}
  outputs:
  - name: maxNumPlayersPerTeam
    type: number
C_Commentator.GetMaxNumTeams:
  inputs:
  - {}
  outputs:
  - name: maxNumTeams
    type: number
C_Commentator.GetMode:
  inputs:
  - {}
  outputs:
  - name: commentatorMode
    type: number
C_Commentator.GetMsToHoldForHorizontalMovement:
  inputs:
  - {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetMsToHoldForVerticalMovement:
  inputs:
  - {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetMsToSmoothHorizontalChange:
  inputs:
  - {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetMsToSmoothVerticalChange:
  inputs:
  - {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetNumMaps:
  inputs:
  - {}
  outputs:
  - name: numMaps
    type: number
C_Commentator.GetNumPlayers:
  inputs:
  - - name: factionIndex
      type: number
  outputs:
  - name: numPlayers
    type: number
C_Commentator.GetOrCreateSeries:
  inputs:
  - - name: teamName1
      type: string
    - name: teamName2
      type: string
  outputs:
  - name: data
    type: C_Commentator.CommentatorSeries
C_Commentator.GetPlayerAuraInfo:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
    - name: spellID
      type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerAuraInfoByUnit:
  inputs:
  - - name: token
      type: string
    - name: spellID
      type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerCooldownInfo:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
    - name: spellID
      type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerCooldownInfoByUnit:
  inputs:
  - - name: unitToken
      type: string
    - name: spellID
      type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerCrowdControlInfo:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
  outputs:
  - name: spellID
    type: number
  - name: expiration
    type: number
  - name: duration
    type: number
C_Commentator.GetPlayerCrowdControlInfoByUnit:
  inputs:
  - - name: token
      type: string
  outputs:
  - name: spellID
    type: number
  - name: expiration
    type: number
  - name: duration
    type: number
C_Commentator.GetPlayerData:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
  outputs:
  - name: info
    nilable: true
    type: C_Commentator.CommentatorPlayerData
C_Commentator.GetPlayerFlagInfo:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
  outputs:
  - name: hasFlag
    type: boolean
C_Commentator.GetPlayerFlagInfoByUnit:
  inputs:
  - - name: unitToken
      type: string
  outputs:
  - name: hasFlag
    type: boolean
C_Commentator.GetPlayerOverrideName:
  inputs:
  - - name: originalName
      type: string
  outputs:
  - name: overrideName
    type: string
C_Commentator.GetPlayerSpellCharges:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
    - name: spellID
      type: number
  outputs:
  - name: charges
    type: number
  - name: maxCharges
    type: number
  - name: startTime
    type: number
  - name: duration
    type: number
C_Commentator.GetPlayerSpellChargesByUnit:
  inputs:
  - - name: unitToken
      type: string
    - name: spellID
      type: number
  outputs:
  - name: charges
    type: number
  - name: maxCharges
    type: number
  - name: startTime
    type: number
  - name: duration
    type: number
C_Commentator.GetPositionLerpAmount:
  inputs:
  - {}
  outputs:
  - name: amount
    type: number
C_Commentator.GetSmoothFollowTransitioning:
  inputs:
  - {}
  outputs:
  - name: enabled
    type: boolean
C_Commentator.GetSoftlockWeight:
  inputs:
  - {}
  outputs:
  - name: weight
    type: number
C_Commentator.GetSpeedFactor:
  inputs:
  - {}
  outputs:
  - name: factor
    type: number
C_Commentator.GetStartLocation:
  inputs:
  - - name: mapID
      type: number
  outputs:
  - mixin: Vector3DMixin
    name: pos
    type: Vector3D
C_Commentator.GetTeamColor:
  inputs:
  - - name: teamIndex
      type: number
  outputs:
  - mixin: ColorMixin
    name: color
    type: Color
C_Commentator.GetTeamColorByUnit:
  inputs:
  - - name: unitToken
      type: string
  outputs:
  - mixin: ColorMixin
    name: color
    type: Color
C_Commentator.GetTimeLeftInMatch:
  inputs:
  - {}
  outputs:
  - name: timeLeft
    nilable: true
    type: number
C_Commentator.GetTrackedSpellID:
  inputs:
  - - name: indirectSpellID
      type: number
  outputs:
  - name: trackedSpellID
    type: number
C_Commentator.GetTrackedSpells:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
    - name: category
      type: number
  outputs:
  - innerType: number
    name: spells
    nilable: true
    type: table
C_Commentator.GetTrackedSpellsByUnit:
  inputs:
  - - name: unitToken
      type: string
    - name: category
      type: number
  outputs:
  - innerType: number
    name: spells
    nilable: true
    type: table
C_Commentator.GetUnitData:
  inputs:
  - - name: unitToken
      type: string
  outputs:
  - name: data
    type: C_Commentator.CommentatorUnitData
C_Commentator.GetWargameInfo:
  inputs:
  - - name: listID
      type: number
  outputs:
  - name: name
    type: string
  - name: minPlayers
    type: number
  - name: maxPlayers
    type: number
  - name: isArena
    type: boolean
C_Commentator.HasTrackedAuras:
  inputs:
  - - name: token
      type: string
  outputs:
  - name: hasOffensiveAura
    type: boolean
  - name: hasDefensiveAura
    type: boolean
C_Commentator.IsSmartCameraLocked:
  inputs:
  - {}
  outputs:
  - name: isSmartCameraLocked
    type: boolean
C_Commentator.IsSpectating:
  inputs:
  - {}
  outputs:
  - name: isSpectating
    type: boolean
C_Commentator.IsTrackedDefensiveAura:
  inputs:
  - - name: spellID
      type: number
  outputs:
  - name: isDefensiveTrigger
    type: boolean
C_Commentator.IsTrackedOffensiveAura:
  inputs:
  - - name: spellID
      type: number
  outputs:
  - name: isOffensiveTrigger
    type: boolean
C_Commentator.IsTrackedSpell:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
    - name: spellID
      type: number
    - name: category
      type: number
  outputs:
  - name: isTracked
    type: boolean
C_Commentator.IsTrackedSpellByUnit:
  inputs:
  - - name: unitToken
      type: string
    - name: spellID
      type: number
    - name: category
      type: number
  outputs:
  - name: isTracked
    type: boolean
C_Commentator.IsUsingSmartCamera:
  inputs:
  - {}
  outputs:
  - name: isUsingSmartCamera
    type: boolean
C_Commentator.LookAtPlayer:
  inputs:
  - - name: factionIndex
      type: number
    - name: playerIndex
      type: number
    - name: lookAtIndex
      nilable: true
      type: number
  outputs: {}
C_Commentator.RemoveAllOverrideNames:
  inputs:
  - {}
  outputs: {}
C_Commentator.RemovePlayerOverrideName:
  inputs:
  - - name: originalPlayerName
      type: string
  outputs: {}
C_Commentator.RequestPlayerCooldownInfo:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
  outputs: {}
C_Commentator.ResetFoVTarget:
  inputs:
  - {}
  outputs: {}
C_Commentator.ResetSeriesScores:
  inputs:
  - - name: teamName1
      type: string
    - name: teamName2
      type: string
  outputs: {}
C_Commentator.ResetSettings:
  inputs:
  - {}
  outputs: {}
C_Commentator.ResetTrackedAuras:
  inputs:
  - {}
  outputs: {}
C_Commentator.SetAdditionalCameraWeight:
  inputs:
  - - name: teamIndex
      type: number
    - name: playerIndex
      type: number
    - name: weight
      type: number
  outputs: {}
C_Commentator.SetAdditionalCameraWeightByToken:
  inputs:
  - - name: unitToken
      type: string
    - name: weight
      type: number
  outputs: {}
C_Commentator.SetBlocklistedAuras:
  inputs:
  - - innerType: number
      name: spellIDs
      type: table
  outputs: {}
C_Commentator.SetBlocklistedCooldowns:
  inputs:
  - - name: classID
      type: number
    - innerType: number
      name: spellIDs
      type: table
  outputs: {}
C_Commentator.SetCamera:
  inputs:
  - - name: xPos
      type: number
    - name: yPos
      type: number
    - name: zPos
      type: number
    - name: yaw
      type: number
    - name: pitch
      type: number
    - name: roll
      type: number
    - name: fov
      type: number
  outputs: {}
C_Commentator.SetCameraCollision:
  inputs:
  - - name: collide
      type: boolean
  outputs: {}
C_Commentator.SetCameraPosition:
  inputs:
  - - name: xPos
      type: number
    - name: yPos
      type: number
    - name: zPos
      type: number
    - name: snapToLocation
      type: boolean
  outputs: {}
C_Commentator.SetCheatsEnabled:
  inputs:
  - - name: enableCheats
      type: boolean
  outputs: {}
C_Commentator.SetCommentatorHistory:
  inputs:
  - - name: history
      type: C_Commentator.CommentatorHistory
  outputs: {}
C_Commentator.SetDistanceBeforeForcedHorizontalConvergence:
  inputs:
  - - name: distance
      type: number
  outputs: {}
C_Commentator.SetDurationToForceHorizontalConvergence:
  inputs:
  - - name: ms
      type: number
  outputs: {}
C_Commentator.SetExcludeDistance:
  inputs:
  - - name: excludeDistance
      type: number
  outputs: {}
C_Commentator.SetFollowCameraSpeeds:
  inputs:
  - - name: elasticSpeed
      type: number
    - name: minSpeed
      type: number
  outputs: {}
C_Commentator.SetHardlockWeight:
  inputs:
  - - name: weight
      type: number
  outputs: {}
C_Commentator.SetHorizontalAngleThresholdToSmooth:
  inputs:
  - - name: angle
      type: number
  outputs: {}
C_Commentator.SetLookAtLerpAmount:
  inputs:
  - - name: amount
      type: number
  outputs: {}
C_Commentator.SetMapAndInstanceIndex:
  inputs:
  - - name: mapIndex
      type: number
    - name: instanceIndex
      type: number
  outputs: {}
C_Commentator.SetMouseDisabled:
  inputs:
  - - name: disabled
      type: boolean
  outputs: {}
C_Commentator.SetMoveSpeed:
  inputs:
  - - name: newSpeed
      type: number
  outputs: {}
C_Commentator.SetMsToHoldForHorizontalMovement:
  inputs:
  - - name: ms
      type: number
  outputs: {}
C_Commentator.SetMsToHoldForVerticalMovement:
  inputs:
  - - name: ms
      type: number
  outputs: {}
C_Commentator.SetMsToSmoothHorizontalChange:
  inputs:
  - - name: ms
      type: number
  outputs: {}
C_Commentator.SetMsToSmoothVerticalChange:
  inputs:
  - - name: ms
      type: number
  outputs: {}
C_Commentator.SetPositionLerpAmount:
  inputs:
  - - name: amount
      type: number
  outputs: {}
C_Commentator.SetRequestedDebuffCooldowns:
  inputs:
  - - name: classID
      type: number
    - innerType: number
      name: spellIDs
      type: table
  outputs: {}
C_Commentator.SetRequestedDefensiveCooldowns:
  inputs:
  - - name: classID
      type: number
    - innerType: number
      name: spellIDs
      type: table
  outputs: {}
C_Commentator.SetRequestedOffensiveCooldowns:
  inputs:
  - - name: classID
      type: number
    - innerType: number
      name: spellIDs
      type: table
  outputs: {}
C_Commentator.SetSeriesScore:
  inputs:
  - - name: teamName1
      type: string
    - name: teamName2
      type: string
    - name: scoringTeamName
      type: string
    - name: score
      type: number
  outputs: {}
C_Commentator.SetSeriesScores:
  inputs:
  - - name: teamName1
      type: string
    - name: teamName2
      type: string
    - name: score1
      type: number
    - name: score2
      type: number
  outputs: {}
C_Commentator.SetSmartCameraLocked:
  inputs:
  - - name: locked
      type: boolean
  outputs: {}
C_Commentator.SetSmoothFollowTransitioning:
  inputs:
  - - name: enabled
      type: boolean
  outputs: {}
C_Commentator.SetSoftlockWeight:
  inputs:
  - - name: weight
      type: number
  outputs: {}
C_Commentator.SetSpeedFactor:
  inputs:
  - - name: factor
      type: number
  outputs: {}
C_Commentator.SetTargetHeightOffset:
  inputs:
  - - name: offset
      type: number
  outputs: {}
C_Commentator.SetUseSmartCamera:
  inputs:
  - - name: useSmartCamera
      type: boolean
  outputs: {}
C_Commentator.SnapCameraLookAtPoint:
  inputs:
  - {}
  outputs: {}
C_Commentator.StartWargame:
  inputs:
  - - name: listID
      type: number
    - name: teamSize
      type: number
    - name: tournamentRules
      type: boolean
    - name: teamOneCaptain
      type: string
    - name: teamTwoCaptain
      type: string
  outputs: {}
C_Commentator.SwapTeamSides:
  inputs:
  - {}
  outputs: {}
C_Commentator.ToggleCheats:
  inputs:
  - {}
  outputs: {}
C_Commentator.UpdateMapInfo:
  inputs:
  - - name: targetPlayer
      nilable: true
      type: string
  outputs: {}
C_Commentator.UpdatePlayerInfo:
  inputs:
  - {}
  outputs: {}
C_Commentator.ZoomIn:
  inputs:
  - {}
  outputs: {}
C_Commentator.ZoomOut:
  inputs:
  - {}
  outputs: {}
C_Console.GetAllCommands:
  frameworks:
  - datalua
  impl: C_Console.GetAllCommands
  inputs:
  - {}
  outputs:
  - innerType: C_Console.ConsoleCommandInfo
    name: commands
    type: table
C_Console.GetColorFromType:
  inputs:
  - - name: colorType
      type: number
  outputs:
  - mixin: ColorMixin
    name: color
    type: Color
C_Console.GetFontHeight:
  inputs:
  - {}
  outputs:
  - name: fontHeightInPixels
    type: number
C_Console.PrintAllMatchingCommands:
  inputs:
  - - name: partialCommandText
      type: string
  outputs: {}
C_Console.SetFontHeight:
  inputs:
  - - name: fontHeightInPixels
      type: number
  outputs: {}
C_Container.ContainerIDToInventoryID:
  inputs:
  - - name: containerID
      type: number
  outputs:
  - name: inventoryID
    type: number
C_Container.ContainerRefundItemPurchase:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
    - default: false
      name: isEquipped
      type: boolean
  outputs: {}
C_Container.GetBagName:
  inputs:
  - - name: bagIndex
      type: number
  outputs:
  - name: name
    type: string
C_Container.GetBagSlotFlag:
  inputs:
  - - name: bagIndex
      type: number
    - name: flag
      type: number
  outputs:
  - name: isSet
    type: boolean
C_Container.GetContainerFreeSlots:
  inputs:
  - - name: containerIndex
      type: number
  outputs:
  - innerType: number
    name: freeSlots
    type: table
C_Container.GetContainerItemCooldown:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: number
C_Container.GetContainerItemDurability:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - name: durability
    type: number
  - name: maxDurability
    type: number
C_Container.GetContainerItemGems:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - innerType: number
    name: numGems
    type: table
C_Container.GetContainerItemID:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - name: containerID
    type: number
C_Container.GetContainerItemInfo:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - name: containerInfo
    type: C_Container.ContainerItemInfo
C_Container.GetContainerItemLink:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - name: itemLink
    type: string
C_Container.GetContainerItemPurchaseCurrency:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
    - name: itemIndex
      type: number
    - name: isEquipped
      type: boolean
  outputs:
  - name: currencyInfo
    type: C_Container.ItemPurchaseCurrency
C_Container.GetContainerItemPurchaseInfo:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
    - name: isEquipped
      type: boolean
  outputs:
  - name: info
    type: C_Container.ItemPurchaseInfo
C_Container.GetContainerItemPurchaseItem:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
    - name: itemIndex
      type: number
    - name: isEquipped
      type: boolean
  outputs:
  - name: itemInfo
    type: C_Container.ItemPurchaseItem
C_Container.GetContainerItemQuestInfo:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - name: questInfo
    type: C_Container.ItemQuestInfo
C_Container.GetContainerNumFreeSlots:
  inputs:
  - - name: bagIndex
      type: number
  outputs:
  - name: numFreeSlots
    type: number
  - name: bagFamily
    nilable: true
    type: number
C_Container.GetContainerNumSlots:
  inputs:
  - - name: containerIndex
      type: number
  outputs:
  - name: numSlots
    type: number
C_Container.GetInsertItemsLeftToRight:
  inputs:
  - {}
  outputs:
  - name: isEnabled
    type: boolean
C_Container.GetItemCooldown:
  inputs:
  - - name: itemID
      type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: number
C_Container.IsBagSlotFlagEnabledOnOtherBankBags:
  inputs:
  - - name: bagIndex
      type: number
    - name: flagIndex
      type: number
  outputs:
  - name: isSet
    type: boolean
C_Container.IsContainerFiltered:
  inputs:
  - - name: containerIndex
      type: number
  outputs:
  - name: isFiltered
    type: boolean
C_Container.PickupContainerItem:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs: {}
C_Container.SetBagPortraitTexture:
  inputs:
  - - name: texture
      type: table
    - name: bagIndex
      type: number
  outputs: {}
C_Container.SetBagSlotFlag:
  inputs:
  - - name: bagIndex
      type: number
    - name: flag
      type: number
    - name: isSet
      type: boolean
  outputs: {}
C_Container.SetInsertItemsLeftToRight:
  inputs:
  - - name: enable
      type: boolean
  outputs: {}
C_Container.SetItemSearch:
  inputs:
  - - name: searchString
      type: string
  outputs: {}
C_Container.ShowContainerSellCursor:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs: {}
C_Container.SocketContainerItem:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - name: success
    type: boolean
C_Container.SplitContainerItem:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
    - name: amount
      type: number
  outputs: {}
C_Container.UseContainerItem:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
    - name: unitToken
      nilable: true
      type: string
    - default: false
      name: reagentBankOpen
      type: boolean
  outputs: {}
C_CreatureInfo.GetClassInfo:
  impl: C_CreatureInfo.GetClassInfo
  inputs:
  - - name: classID
      type: number
  outputs:
  - name: classInfo
    nilable: true
    type: C_CreatureInfo.ClassInfo
  sqls:
  - lookup: C_CreatureInfo.GetClassInfo
    table: true
C_CreatureInfo.GetFactionInfo:
  inputs:
  - - name: raceID
      type: number
  outputs:
  - name: factionInfo
    nilable: true
    type: C_CreatureInfo.FactionInfo
C_CreatureInfo.GetRaceInfo:
  inputs:
  - - name: raceID
      type: number
  outputs:
  - name: raceInfo
    nilable: true
    type: C_CreatureInfo.RaceInfo
C_CurrencyInfo.GetBasicCurrencyInfo:
  inputs:
  - - name: currencyType
      type: number
    - name: quantity
      nilable: true
      type: number
  outputs:
  - name: info
    type: C_CurrencyInfo.CurrencyDisplayInfo
C_CurrencyInfo.GetCurrencyContainerInfo:
  inputs:
  - - name: currencyType
      type: number
    - name: quantity
      type: number
  outputs:
  - name: info
    type: C_CurrencyInfo.CurrencyDisplayInfo
C_CurrencyInfo.GetCurrencyInfo:
  inputs:
  - - name: type
      type: number
  outputs:
  - name: info
    type: C_CurrencyInfo.CurrencyInfo
C_CurrencyInfo.GetCurrencyInfoFromLink:
  inputs:
  - - name: link
      type: string
  outputs:
  - name: info
    type: C_CurrencyInfo.CurrencyInfo
C_CurrencyInfo.GetCurrencyListLink:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: link
    type: string
C_Cursor.GetCursorItem:
  inputs:
  - {}
  outputs:
  - mixin: ItemLocationMixin
    name: item
    type: ItemLocation
C_CVar.GetCVar:
  frameworks:
  - datalua
  impl: C_CVar.GetCVar
  inputs:
  - - type: string
  outputs:
  - name: value
    nilable: true
    type: string
  states:
  - CVars
C_CVar.GetCVarBitfield:
  inputs:
  - - name: name
      type: string
    - name: index
      type: number
  outputs:
  - name: value
    nilable: true
    type: boolean
C_CVar.GetCVarBool:
  frameworks:
  - datalua
  impl: C_CVar.GetCVarBool
  inputs:
  - - type: string
  outputs:
  - name: value
    nilable: true
    type: boolean
  states:
  - CVars
C_CVar.GetCVarDefault:
  frameworks:
  - datalua
  impl: C_CVar.GetCVarDefault
C_CVar.RegisterCVar:
  impl: C_CVar.RegisterCVar
  inputs:
  - - type: string
    - nilable: true
      type: string
  outputs: {}
  states:
  - CVars
C_CVar.ResetTestCVars:
  inputs:
  - {}
  outputs: {}
C_CVar.SetCVar:
  impl: C_CVar.SetCVar
  inputs:
  - - type: string
    - nilable: true
      type: string
    - nilable: true
      type: string
  outputs:
  - name: success
    nilable: true
    type: boolean
  states:
  - CVars
C_CVar.SetCVarBitfield:
  inputs:
  - - name: name
      type: string
    - name: index
      type: number
    - name: value
      type: boolean
    - name: scriptCVar
      nilable: true
      type: string
  outputs:
  - name: success
    type: boolean
C_DateAndTime.AdjustTimeByDays:
  impl: C_DateAndTime.AdjustTimeByDays
  inputs:
  - - name: date
      type: CalendarTime
    - name: days
      type: number
  outputs:
  - name: newDate
    type: CalendarTime
C_DateAndTime.AdjustTimeByMinutes:
  impl: C_DateAndTime.AdjustTimeByMinutes
  inputs:
  - - name: date
      type: CalendarTime
    - name: minutes
      type: number
  outputs:
  - name: newDate
    type: CalendarTime
C_DateAndTime.CompareCalendarTime:
  impl: C_DateAndTime.CompareCalendarTime
  inputs:
  - - name: lhsCalendarTime
      type: CalendarTime
    - name: rhsCalendarTime
      type: CalendarTime
  outputs:
  - name: comparison
    type: number
C_DateAndTime.GetCalendarTimeFromEpoch:
  inputs:
  - - name: epoch
      type: number
  outputs:
  - name: date
    type: CalendarTime
C_DateAndTime.GetCurrentCalendarTime:
  inputs:
  - {}
  outputs:
  - name: date
    type: CalendarTime
C_DateAndTime.GetSecondsUntilDailyReset:
  inputs:
  - {}
  outputs:
  - name: seconds
    type: number
C_DateAndTime.GetSecondsUntilWeeklyReset:
  inputs:
  - {}
  outputs:
  - name: seconds
    type: number
C_DateAndTime.GetServerTimeLocal:
  inputs:
  - {}
  outputs:
  - name: serverTimeLocal
    type: number
C_DeathInfo.GetCorpseMapPosition:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - mixin: Vector2DMixin
    name: position
    nilable: true
    type: Vector2D
C_DeathInfo.GetDeathReleasePosition:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - mixin: Vector2DMixin
    name: position
    nilable: true
    type: Vector2D
C_DeathInfo.GetGraveyardsForMap:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: C_DeathInfo.GraveyardMapInfo
    name: graveyards
    type: table
C_DeathInfo.GetSelfResurrectOptions:
  inputs:
  - {}
  outputs:
  - innerType: C_DeathInfo.SelfResurrectOption
    name: options
    type: table
C_DeathInfo.UseSelfResurrectOption:
  inputs:
  - - name: optionType
      type: number
    - name: id
      type: number
  outputs: {}
C_EquipmentSet.AssignSpecToEquipmentSet:
  inputs:
  - - name: equipmentSetID
      type: number
    - name: specIndex
      type: number
  outputs: {}
C_EquipmentSet.CanUseEquipmentSets:
  inputs:
  - {}
  outputs:
  - name: canUseEquipmentSets
    type: boolean
C_EquipmentSet.ClearIgnoredSlotsForSave:
  inputs:
  - {}
  outputs: {}
C_EquipmentSet.CreateEquipmentSet:
  inputs:
  - - name: equipmentSetName
      type: string
    - name: icon
      nilable: true
      type: string
  outputs: {}
C_EquipmentSet.DeleteEquipmentSet:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs: {}
C_EquipmentSet.EquipmentSetContainsLockedItems:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs:
  - name: hasLockedItems
    type: boolean
C_EquipmentSet.GetEquipmentSetAssignedSpec:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs:
  - name: specIndex
    type: number
C_EquipmentSet.GetEquipmentSetForSpec:
  inputs:
  - - name: specIndex
      type: number
  outputs:
  - name: equipmentSetID
    type: number
C_EquipmentSet.GetEquipmentSetID:
  inputs:
  - - name: equipmentSetName
      type: string
  outputs:
  - name: equipmentSetID
    type: number
C_EquipmentSet.GetEquipmentSetIDs:
  inputs:
  - {}
  outputs:
  - innerType: number
    name: equipmentSetIDs
    type: table
C_EquipmentSet.GetEquipmentSetInfo:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs:
  - name: name
    type: string
  - name: iconFileID
    type: number
  - name: setID
    type: number
  - name: isEquipped
    type: boolean
  - name: numItems
    type: number
  - name: numEquipped
    type: number
  - name: numInInventory
    type: number
  - name: numLost
    type: number
  - name: numIgnored
    type: number
C_EquipmentSet.GetIgnoredSlots:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs:
  - innerType: boolean
    name: slotIgnored
    type: table
C_EquipmentSet.GetItemIDs:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs:
  - innerType: number
    name: itemIDs
    type: table
C_EquipmentSet.GetItemLocations:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs:
  - innerType: number
    name: locations
    type: table
C_EquipmentSet.GetNumEquipmentSets:
  inputs:
  - {}
  outputs:
  - name: numEquipmentSets
    type: number
C_EquipmentSet.IgnoreSlotForSave:
  inputs:
  - - name: slot
      type: number
  outputs: {}
C_EquipmentSet.IsSlotIgnoredForSave:
  inputs:
  - - name: slot
      type: number
  outputs:
  - name: isSlotIgnored
    type: boolean
C_EquipmentSet.ModifyEquipmentSet:
  inputs:
  - - name: equipmentSetID
      type: number
    - name: newName
      type: string
    - name: newIcon
      nilable: true
      type: string
  outputs: {}
C_EquipmentSet.PickupEquipmentSet:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs: {}
C_EquipmentSet.SaveEquipmentSet:
  inputs:
  - - name: equipmentSetID
      type: number
    - name: icon
      nilable: true
      type: string
  outputs: {}
C_EquipmentSet.UnassignEquipmentSetSpec:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs: {}
C_EquipmentSet.UnignoreSlotForSave:
  inputs:
  - - name: slot
      type: number
  outputs: {}
C_EquipmentSet.UseEquipmentSet:
  inputs:
  - - name: equipmentSetID
      type: number
  outputs:
  - name: setWasEquipped
    type: boolean
C_FriendList.AddFriend:
  inputs:
  - - name: name
      type: string
    - name: notes
      nilable: true
      type: string
  outputs: {}
C_FriendList.AddIgnore:
  inputs:
  - - name: name
      type: string
  outputs:
  - name: added
    type: boolean
C_FriendList.AddOrDelIgnore:
  inputs:
  - - name: name
      type: string
  outputs: {}
C_FriendList.AddOrRemoveFriend:
  inputs:
  - - name: name
      type: string
    - name: notes
      type: string
  outputs: {}
C_FriendList.DelIgnore:
  inputs:
  - - name: name
      type: string
  outputs:
  - name: removed
    type: boolean
C_FriendList.DelIgnoreByIndex:
  inputs:
  - - name: index
      type: number
  outputs: {}
C_FriendList.GetFriendInfo:
  inputs:
  - - name: name
      type: string
  outputs:
  - name: info
    type: C_FriendList.FriendInfo
C_FriendList.GetFriendInfoByIndex:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: info
    type: C_FriendList.FriendInfo
C_FriendList.GetIgnoreName:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    nilable: true
    type: string
C_FriendList.GetNumFriends:
  inputs:
  - {}
  outputs:
  - name: numFriends
    type: number
C_FriendList.GetNumIgnores:
  inputs:
  - {}
  outputs:
  - name: numIgnores
    type: number
C_FriendList.GetNumOnlineFriends:
  inputs:
  - {}
  outputs:
  - name: numOnline
    type: number
C_FriendList.GetNumWhoResults:
  inputs:
  - {}
  outputs:
  - name: numWhos
    type: number
  - name: totalNumWhos
    type: number
C_FriendList.GetSelectedFriend:
  inputs:
  - {}
  outputs:
  - name: index
    nilable: true
    type: number
C_FriendList.GetSelectedIgnore:
  inputs:
  - {}
  outputs:
  - name: index
    nilable: true
    type: number
C_FriendList.GetWhoInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: info
    type: C_FriendList.WhoInfo
C_FriendList.IsFriend:
  inputs:
  - - name: guid
      type: string
  outputs:
  - name: isFriend
    type: boolean
C_FriendList.IsIgnored:
  inputs:
  - - name: token
      type: string
  outputs:
  - name: isIgnored
    type: boolean
C_FriendList.IsIgnoredByGuid:
  inputs:
  - - name: guid
      type: string
  outputs:
  - name: isIgnored
    type: boolean
C_FriendList.IsOnIgnoredList:
  inputs:
  - - name: token
      type: string
  outputs:
  - name: isIgnored
    type: boolean
C_FriendList.RemoveFriend:
  inputs:
  - - name: name
      type: string
  outputs:
  - name: removed
    type: boolean
C_FriendList.RemoveFriendByIndex:
  inputs:
  - - name: index
      type: number
  outputs: {}
C_FriendList.SendWho:
  inputs:
  - - name: filter
      type: string
  outputs: {}
C_FriendList.SetFriendNotes:
  inputs:
  - - name: name
      type: string
    - name: notes
      type: string
  outputs:
  - name: found
    type: boolean
C_FriendList.SetFriendNotesByIndex:
  inputs:
  - - name: index
      type: number
    - name: notes
      type: string
  outputs: {}
C_FriendList.SetSelectedFriend:
  inputs:
  - - name: index
      type: number
  outputs: {}
C_FriendList.SetSelectedIgnore:
  inputs:
  - - name: index
      type: number
  outputs: {}
C_FriendList.SetWhoToUi:
  inputs:
  - - name: whoToUi
      type: boolean
  outputs: {}
C_FriendList.ShowFriends:
  inputs:
  - {}
  outputs: {}
C_FriendList.SortWho:
  inputs:
  - - name: sorting
      type: string
  outputs: {}
C_GamePad.AddSDLMapping:
  inputs:
  - - name: platform
      type: number
    - name: mapping
      type: string
  outputs:
  - name: success
    type: boolean
C_GamePad.ApplyConfigs:
  inputs:
  - {}
  outputs: {}
C_GamePad.AxisIndexToConfigName:
  inputs:
  - - name: axisIndex
      type: number
  outputs:
  - name: configName
    nilable: true
    type: string
C_GamePad.ButtonBindingToIndex:
  inputs:
  - - name: bindingName
      type: string
  outputs:
  - name: buttonIndex
    nilable: true
    type: number
C_GamePad.ButtonIndexToBinding:
  inputs:
  - - name: buttonIndex
      type: number
  outputs:
  - name: bindingName
    nilable: true
    type: string
C_GamePad.ButtonIndexToConfigName:
  inputs:
  - - name: buttonIndex
      type: number
  outputs:
  - name: configName
    nilable: true
    type: string
C_GamePad.ClearLedColor:
  inputs:
  - {}
  outputs: {}
C_GamePad.DeleteConfig:
  inputs:
  - - name: configID
      type: C_GamePad.GamePadConfigID
  outputs: {}
C_GamePad.GetActiveDeviceID:
  inputs:
  - {}
  outputs:
  - name: deviceID
    type: number
C_GamePad.GetAllConfigIDs:
  inputs:
  - {}
  outputs:
  - innerType: C_GamePad.GamePadConfigID
    name: configIDs
    type: table
C_GamePad.GetAllDeviceIDs:
  inputs:
  - {}
  outputs:
  - innerType: number
    name: deviceIDs
    type: table
C_GamePad.GetCombinedDeviceID:
  inputs:
  - {}
  outputs:
  - name: deviceID
    type: number
C_GamePad.GetConfig:
  inputs:
  - - name: configID
      type: C_GamePad.GamePadConfigID
  outputs:
  - name: config
    nilable: true
    type: C_GamePad.GamePadConfig
C_GamePad.GetDeviceMappedState:
  inputs:
  - - name: deviceID
      nilable: true
      type: number
  outputs:
  - name: state
    nilable: true
    type: C_GamePad.GamePadMappedState
C_GamePad.GetDeviceRawState:
  inputs:
  - - name: deviceID
      type: number
  outputs:
  - name: rawState
    nilable: true
    type: C_GamePad.GamePadRawState
C_GamePad.GetLedColor:
  inputs:
  - {}
  outputs:
  - mixin: ColorMixin
    name: color
    type: Color
C_GamePad.GetPowerLevel:
  inputs:
  - - name: deviceID
      nilable: true
      type: number
  outputs:
  - name: powerLevel
    type: number
C_GamePad.IsEnabled:
  inputs:
  - {}
  outputs:
  - name: enabled
    type: boolean
C_GamePad.SetConfig:
  inputs:
  - - name: config
      type: C_GamePad.GamePadConfig
  outputs: {}
C_GamePad.SetLedColor:
  inputs:
  - - mixin: ColorMixin
      name: color
      type: Color
  outputs: {}
C_GamePad.SetVibration:
  inputs:
  - - name: vibrationType
      type: string
    - name: intensity
      type: number
  outputs: {}
C_GamePad.StickIndexToConfigName:
  inputs:
  - - name: stickIndex
      type: number
  outputs:
  - name: configName
    nilable: true
    type: string
C_GamePad.StopVibration:
  inputs:
  - {}
  outputs: {}
C_GossipInfo.CloseGossip:
  inputs:
  - {}
  outputs: {}
C_GossipInfo.ForceGossip:
  inputs:
  - {}
  outputs:
  - name: forceGossip
    type: boolean
C_GossipInfo.GetActiveQuests:
  inputs:
  - {}
  outputs:
  - innerType: C_GossipInfo.GossipQuestUIInfo
    name: info
    type: table
C_GossipInfo.GetAvailableQuests:
  inputs:
  - {}
  outputs:
  - innerType: C_GossipInfo.GossipQuestUIInfo
    name: info
    type: table
C_GossipInfo.GetCompletedOptionDescriptionString:
  inputs:
  - {}
  outputs:
  - name: description
    nilable: true
    type: string
C_GossipInfo.GetCustomGossipDescriptionString:
  inputs:
  - {}
  outputs:
  - name: description
    nilable: true
    type: string
C_GossipInfo.GetFriendshipReputation:
  inputs:
  - - name: friendshipFactionID
      type: number
  outputs:
  - name: reputationInfo
    type: C_GossipInfo.FriendshipReputationInfo
C_GossipInfo.GetFriendshipReputationRanks:
  inputs:
  - - name: friendshipFactionID
      type: number
  outputs:
  - name: rankInfo
    type: C_GossipInfo.FriendshipReputationRankInfo
C_GossipInfo.GetNumActiveQuests:
  inputs:
  - {}
  outputs:
  - name: numQuests
    type: number
C_GossipInfo.GetNumAvailableQuests:
  inputs:
  - {}
  outputs:
  - name: numQuests
    type: number
C_GossipInfo.GetOptions:
  inputs:
  - {}
  outputs:
  - innerType: C_GossipInfo.GossipOptionUIInfo
    name: info
    type: table
C_GossipInfo.GetPoiForUiMapID:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: gossipPoiID
    nilable: true
    type: number
C_GossipInfo.GetPoiInfo:
  inputs:
  - - name: uiMapID
      type: number
    - name: gossipPoiID
      type: number
  outputs:
  - name: gossipPoiInfo
    nilable: true
    type: C_GossipInfo.GossipPoiInfo
C_GossipInfo.GetText:
  inputs:
  - {}
  outputs:
  - name: gossipText
    type: string
C_GossipInfo.SelectActiveQuest:
  inputs:
  - - name: optionID
      type: number
  outputs: {}
C_GossipInfo.SelectAvailableQuest:
  inputs:
  - - name: optionID
      type: number
  outputs: {}
C_GossipInfo.SelectOption:
  inputs:
  - - name: optionID
      type: number
    - name: text
      nilable: true
      type: string
    - name: confirmed
      nilable: true
      type: boolean
  outputs: {}
C_GuildInfo.CanEditOfficerNote:
  inputs:
  - {}
  outputs:
  - name: canEditOfficerNote
    type: boolean
C_GuildInfo.CanSpeakInGuildChat:
  inputs:
  - {}
  outputs:
  - name: canSpeakInGuildChat
    type: boolean
C_GuildInfo.CanViewOfficerNote:
  inputs:
  - {}
  outputs:
  - name: canViewOfficerNote
    type: boolean
C_GuildInfo.GetGuildRankOrder:
  inputs:
  - - name: guid
      type: string
  outputs:
  - name: rankOrder
    type: number
C_GuildInfo.GetGuildTabardInfo:
  inputs:
  - - name: unit
      nilable: true
      type: string
  outputs:
  - name: tabardInfo
    nilable: true
    type: GuildTabardInfo
C_GuildInfo.GuildControlGetRankFlags:
  inputs:
  - - name: rankOrder
      type: number
  outputs:
  - innerType: boolean
    name: permissions
    stub:
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    type: table
C_GuildInfo.GuildRoster:
  inputs:
  - {}
  outputs: {}
C_GuildInfo.IsGuildOfficer:
  inputs:
  - {}
  outputs:
  - name: isOfficer
    type: boolean
C_GuildInfo.IsGuildRankAssignmentAllowed:
  inputs:
  - - name: guid
      type: string
    - name: rankOrder
      type: number
  outputs:
  - name: isGuildRankAssignmentAllowed
    type: boolean
C_GuildInfo.QueryGuildMembersForRecipe:
  inputs:
  - - name: skillLineID
      type: number
    - name: recipeSpellID
      type: number
    - name: recipeLevel
      nilable: true
      type: number
  outputs:
  - name: updatedRecipeSpellID
    type: number
C_GuildInfo.RemoveFromGuild:
  inputs:
  - - name: guid
      type: string
  outputs: {}
C_GuildInfo.SetGuildRankOrder:
  inputs:
  - - name: guid
      type: string
    - name: rankOrder
      type: number
  outputs: {}
C_GuildInfo.SetNote:
  inputs:
  - - name: guid
      type: string
    - name: note
      type: string
    - name: isPublic
      type: boolean
  outputs: {}
C_Item.DoesItemExist:
  inputs:
  - - mixin: ItemLocationMixin
      name: emptiableItemLocation
      type: ItemLocation
  outputs:
  - name: itemExists
    type: boolean
C_Item.DoesItemExistByID:
  impl: C_Item.DoesItemExistByID
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: itemExists
    type: boolean
  sqls:
  - lookup: C_Item.DoesItemExistByID
C_Item.GetCurrentItemLevel:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: currentItemLevel
    nilable: true
    type: number
C_Item.GetItemGUID:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: itemGUID
    type: string
C_Item.GetItemIcon:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: icon
    nilable: true
    type: number
C_Item.GetItemIconByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: icon
    nilable: true
    type: number
C_Item.GetItemID:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: itemID
    type: number
C_Item.GetItemInventoryType:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: inventoryType
    nilable: true
    type: number
C_Item.GetItemInventoryTypeByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: inventoryType
    nilable: true
    type: number
C_Item.GetItemLink:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: itemLink
    nilable: true
    type: string
C_Item.GetItemMaxStackSize:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: stackSize
    nilable: true
    type: number
C_Item.GetItemMaxStackSizeByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: stackSize
    nilable: true
    type: number
C_Item.GetItemName:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: itemName
    nilable: true
    type: string
C_Item.GetItemNameByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: itemName
    nilable: true
    type: string
C_Item.GetItemQuality:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: itemQuality
    nilable: true
    type: number
C_Item.GetItemQualityByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: itemQuality
    nilable: true
    type: number
C_Item.GetStackCount:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: stackCount
    type: number
C_Item.IsBound:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: isBound
    type: boolean
C_Item.IsItemDataCached:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: isCached
    type: boolean
C_Item.IsItemDataCachedByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: isCached
    type: boolean
C_Item.IsLocked:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs:
  - name: isLocked
    type: boolean
C_Item.LockItem:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs: {}
C_Item.LockItemByGUID:
  inputs:
  - - name: itemGUID
      type: string
  outputs: {}
C_Item.RequestLoadItemData:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs: {}
C_Item.RequestLoadItemDataByID:
  inputs:
  - - name: itemInfo
      type: string
  outputs: {}
C_Item.UnlockItem:
  inputs:
  - - mixin: ItemLocationMixin
      name: itemLocation
      type: ItemLocation
  outputs: {}
C_Item.UnlockItemByGUID:
  inputs:
  - - name: itemGUID
      type: string
  outputs: {}
C_ItemSocketInfo.CompleteSocketing:
  inputs:
  - {}
  outputs: {}
C_ItemUpgrade.GetItemHyperlink:
  inputs:
  - {}
  outputs:
  - name: link
    type: string
C_KeyBindings.GetBindingIndex:
  inputs:
  - - name: action
      type: string
  outputs:
  - name: bindingIndex
    nilable: true
    type: number
C_KeyBindings.GetCustomBindingType:
  inputs:
  - - name: bindingIndex
      type: number
  outputs:
  - name: customBindingType
    nilable: true
    type: number
C_LFGList.ClearCreationTextFields:
  inputs:
  - {}
  outputs: {}
C_LFGList.ClearSearchResults: {}
C_LFGList.CopyActiveEntryInfoToCreationFields:
  inputs:
  - {}
  outputs: {}
C_LFGList.CreateListing:
  inputs:
  - - innerType: number
      name: activityIDs
      type: table
    - name: newPlayerFriendly
      nilable: true
      type: boolean
  outputs:
  - name: success
    type: boolean
C_LFGList.GetActiveEntryInfo:
  inputs:
  - {}
  outputs:
  - name: entryData
    type: C_LFGList.LfgEntryData
C_LFGList.GetActivityGroupInfo:
  inputs:
  - - name: groupID
      type: number
  outputs:
  - name: name
    type: string
  - name: orderIndex
    type: number
C_LFGList.GetActivityInfoExpensive: {}
C_LFGList.GetActivityInfoTable:
  inputs:
  - - name: activityID
      type: number
  outputs:
  - name: activityInfo
    type: C_LFGList.GroupFinderActivityInfo
C_LFGList.GetAvailableActivities:
  inputs:
  - - name: categoryID
      nilable: true
      type: number
    - name: groupID
      nilable: true
      type: number
    - name: filter
      nilable: true
      type: number
  outputs:
  - name: activities
    type: table
C_LFGList.GetAvailableActivityGroups: {}
C_LFGList.GetAvailableCategories:
  outputs:
  - type: table
C_LFGList.GetCategoryInfo: {}
C_LFGList.GetFilteredSearchResults:
  inputs:
  - {}
  outputs:
  - default: 0
    name: totalResultsFound
    type: number
  - innerType: number
    name: filteredResults
    type: table
C_LFGList.GetRedirectedMapDifficultyID:
  inputs:
  - - name: difficultyID
      type: number
  outputs:
  - name: redirectedMapDifficultyID
    type: number
C_LFGList.GetRoles:
  inputs:
  - {}
  outputs:
  - name: roles
    type: C_LFGList.LFGRoles
C_LFGList.GetSavedRoles:
  inputs:
  - {}
  outputs:
  - name: roles
    type: C_LFGList.LFGRoles
C_LFGList.GetSearchResultFriends: {}
C_LFGList.GetSearchResultInfo:
  inputs:
  - - name: searchResultID
      type: number
  outputs:
  - name: searchResultData
    type: C_LFGList.LfgSearchResultData
C_LFGList.GetSearchResultLeaderInfo: {}
C_LFGList.GetSearchResultMemberCounts: {}
C_LFGList.GetSearchResultMemberInfo: {}
C_LFGList.GetSearchResults:
  inputs:
  - {}
  outputs:
  - default: 0
    name: totalResultsFound
    type: number
  - innerType: number
    name: results
    type: table
C_LFGList.HasActiveEntryInfo:
  inputs:
  - {}
  outputs:
  - name: hasActiveEntryInfo
    type: boolean
C_LFGList.HasActivityList:
  inputs:
  - {}
  outputs:
  - type: boolean
C_LFGList.HasSearchResultInfo:
  inputs:
  - - name: searchResultID
      type: number
  outputs:
  - name: hasSearchResultInfo
    type: boolean
C_LFGList.IsLookingForGroupEnabled:
  inputs:
  - {}
  outputs:
  - name: isEnabled
    type: boolean
C_LFGList.IsPlayerAuthenticatedForLFG:
  inputs:
  - - name: categoryID
      nilable: true
      type: number
  outputs:
  - name: isAuthenticated
    type: boolean
C_LFGList.RemoveListing: {}
C_LFGList.RequestAvailableActivities:
  inputs:
  - {}
  outputs: {}
C_LFGList.RequestInvite:
  inputs:
  - - name: searchResultID
      type: number
  outputs: {}
C_LFGList.Search:
  inputs:
  - - name: categoryID
      type: number
    - innerType: number
      name: activityIDs
      type: table
    - default: 0
      name: filter
      type: number
    - default: 0
      name: preferredFilters
      type: number
  outputs: {}
C_LFGList.SetRoles:
  inputs:
  - - name: roles
      type: C_LFGList.LFGRoles
  outputs:
  - name: success
    type: boolean
C_LFGList.UpdateListing:
  inputs:
  - - innerType: number
      name: activityIDs
      type: table
    - name: newPlayerFriendly
      nilable: true
      type: boolean
  outputs:
  - name: success
    type: boolean
C_Loot.IsLegacyLootModeEnabled:
  inputs:
  - {}
  outputs:
  - name: isLegacyLootModeEnabled
    type: boolean
C_LootHistory.CanMasterLoot: {}
C_LootHistory.GetExpiration: {}
C_LootHistory.GetItem: {}
C_LootHistory.GetNumItems:
  outputs:
  - type: number
C_LootHistory.GetPlayerInfo:
  inputs:
  - - name: itemIndex
      type: number
    - name: playerIndex
      type: number
  outputs:
  - name: name
    type: string
  - name: class
    type: string
  - name: rollType
    type: string
  - name: roll
    type: number
  - name: isWinner
    type: boolean
C_LootHistory.GiveMasterLoot: {}
C_LootHistory.SetExpiration: {}
C_LossOfControl.GetActiveLossOfControlData:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: event
    nilable: true
    type: C_LossOfControl.LossOfControlData
C_LossOfControl.GetActiveLossOfControlDataByUnit:
  inputs:
  - - name: unitToken
      type: string
    - name: index
      type: number
  outputs:
  - name: event
    nilable: true
    type: C_LossOfControl.LossOfControlData
C_LossOfControl.GetActiveLossOfControlDataCount:
  inputs:
  - {}
  outputs:
  - name: count
    type: number
C_LossOfControl.GetActiveLossOfControlDataCountByUnit:
  inputs:
  - - name: unitToken
      type: string
  outputs:
  - name: count
    type: number
C_Mail.HasInboxMoney:
  inputs:
  - - name: inboxIndex
      type: number
  outputs:
  - name: inboxItemHasMoneyAttached
    type: boolean
C_Mail.IsCommandPending:
  inputs:
  - {}
  outputs:
  - name: isCommandPending
    type: boolean
C_Map.GetAreaInfo:
  inputs:
  - - name: areaID
      type: number
  outputs:
  - name: name
    type: string
C_Map.GetBestMapForUnit:
  inputs:
  - - name: unitToken
      type: string
  outputs:
  - name: uiMapID
    nilable: true
    type: number
C_Map.GetBountySetIDForMap:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: bountySetID
    type: number
C_Map.GetFallbackWorldMapID:
  inputs:
  - {}
  outputs:
  - name: uiMapID
    stub: 947
    type: number
C_Map.GetMapArtBackgroundAtlas:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: atlasName
    type: string
C_Map.GetMapArtHelpTextPosition:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: position
    type: number
C_Map.GetMapArtID:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: uiMapArtID
    type: number
C_Map.GetMapArtLayers:
  inputs:
  - - type: number
  outputs:
  - stub:
    - additionalZoomSteps: 0
      layerHeight: 1
      layerWidth: 1
      maxScale: 1
      minScale: 1
      tileHeight: 1
      tileWidth: 1
    type: table
C_Map.GetMapArtLayerTextures:
  inputs:
  - - name: uiMapID
      type: number
    - name: layerIndex
      type: number
  outputs:
  - innerType: number
    name: textures
    type: table
C_Map.GetMapBannersForMap:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: C_Map.MapBannerInfo
    name: mapBanners
    type: table
C_Map.GetMapChildrenInfo:
  inputs:
  - - name: uiMapID
      type: number
    - name: mapType
      nilable: true
      type: number
    - name: allDescendants
      nilable: true
      type: boolean
  outputs:
  - innerType: C_Map.UiMapDetails
    name: info
    type: table
C_Map.GetMapDisplayInfo:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: hideIcons
    type: boolean
C_Map.GetMapGroupID:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: uiMapGroupID
    type: number
C_Map.GetMapGroupMembersInfo:
  inputs:
  - - name: uiMapGroupID
      type: number
  outputs:
  - innerType: C_Map.UiMapGroupMemberInfo
    name: info
    type: table
C_Map.GetMapHighlightInfoAtPosition:
  inputs:
  - - name: uiMapID
      type: number
    - name: x
      type: number
    - name: y
      type: number
  outputs:
  - name: fileDataID
    type: number
  - name: atlasID
    type: string
  - name: texturePercentageX
    type: number
  - name: texturePercentageY
    type: number
  - name: textureX
    type: number
  - name: textureY
    type: number
  - name: scrollChildX
    type: number
  - name: scrollChildY
    type: number
C_Map.GetMapInfo:
  impl: C_Map.GetMapInfo
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: info
    nilable: true
    type: C_Map.UiMapDetails
  sqls:
  - lookup: C_Map.GetMapInfo
    table: true
C_Map.GetMapInfoAtPosition:
  inputs:
  - - name: uiMapID
      type: number
    - name: x
      type: number
    - name: y
      type: number
  outputs:
  - name: info
    type: C_Map.UiMapDetails
C_Map.GetMapLevels:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: playerMinLevel
    type: number
  - name: playerMaxLevel
    type: number
  - default: 0
    name: petMinLevel
    type: number
  - default: 0
    name: petMaxLevel
    type: number
C_Map.GetMapLinksForMap:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: C_Map.MapLinkInfo
    name: mapLinks
    type: table
C_Map.GetMapPosFromWorldPos:
  inputs:
  - - name: continentID
      type: number
    - mixin: Vector2DMixin
      name: worldPosition
      type: Vector2D
    - name: overrideUiMapID
      nilable: true
      type: number
  outputs:
  - name: uiMapID
    type: number
  - mixin: Vector2DMixin
    name: mapPosition
    type: Vector2D
C_Map.GetMapRectOnMap:
  inputs:
  - - name: uiMapID
      type: number
    - name: topUiMapID
      type: number
  outputs:
  - name: minX
    type: number
  - name: maxX
    type: number
  - name: minY
    type: number
  - name: maxY
    type: number
C_Map.GetPlayerMapPosition:
  inputs:
  - - name: uiMapID
      type: number
    - name: unitToken
      type: string
  outputs:
  - mixin: Vector2DMixin
    name: position
    nilable: true
    type: Vector2D
C_Map.GetWorldPosFromMapPos:
  inputs:
  - - name: uiMapID
      type: number
    - mixin: Vector2DMixin
      name: mapPosition
      type: Vector2D
  outputs:
  - name: continentID
    type: number
  - mixin: Vector2DMixin
    name: worldPosition
    type: Vector2D
C_Map.MapHasArt:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: hasArt
    type: boolean
C_Map.RequestPreloadMap:
  inputs:
  - - name: uiMapID
      type: number
  outputs: {}
C_MapExplorationInfo.GetExploredAreaIDsAtPosition:
  inputs:
  - - name: uiMapID
      type: number
    - mixin: Vector2DMixin
      name: normalizedPosition
      type: Vector2D
  outputs:
  - innerType: number
    name: areaID
    nilable: true
    type: table
C_MapExplorationInfo.GetExploredMapTextures:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: C_MapExplorationInfo.UiMapExplorationInfo
    name: overlayInfo
    type: table
C_MerchantFrame.GetBuybackItemID:
  inputs:
  - - name: buybackSlotIndex
      type: number
  outputs:
  - name: buybackItemID
    type: number
C_Minimap.ClearAllTracking:
  inputs:
  - {}
  outputs: {}
C_Minimap.GetNumTrackingTypes:
  inputs:
  - {}
  outputs:
  - name: numTrackingTypes
    type: number
C_Minimap.GetObjectIconTextureCoords:
  inputs:
  - - name: index
      nilable: true
      type: number
  outputs:
  - name: textureCoordsX
    type: number
  - name: textureCoordsY
    type: number
  - name: textureCoordsZ
    type: number
  - name: textureCoordsW
    type: number
C_Minimap.GetPOITextureCoords:
  inputs:
  - - name: index
      nilable: true
      type: number
  outputs:
  - name: textureCoordsX
    type: number
  - name: textureCoordsY
    type: number
  - name: textureCoordsZ
    type: number
  - name: textureCoordsW
    type: number
C_Minimap.GetTrackingInfo:
  inputs:
  - - name: spellIndex
      type: number
  outputs:
  - name: name
    type: string
  - name: textureFileID
    type: number
  - name: active
    type: boolean
  - name: type
    type: string
  - name: subType
    type: number
  - name: spellID
    nilable: true
    type: number
C_Minimap.SetTracking:
  inputs:
  - - name: index
      type: number
    - name: 'on'
      type: boolean
  outputs: {}
C_ModelInfo.AddActiveModelScene:
  inputs:
  - - name: modelSceneFrame
      type: table
    - name: modelSceneID
      type: number
  outputs: {}
C_ModelInfo.AddActiveModelSceneActor:
  inputs:
  - - name: modelSceneFrameActor
      type: table
    - name: modelSceneActorID
      type: number
  outputs: {}
C_ModelInfo.ClearActiveModelScene:
  inputs:
  - - name: modelSceneFrame
      type: table
  outputs: {}
C_ModelInfo.ClearActiveModelSceneActor:
  inputs:
  - - name: modelSceneFrameActor
      type: table
  outputs: {}
C_ModelInfo.GetModelSceneActorDisplayInfoByID:
  inputs:
  - - name: modelActorDisplayID
      type: number
  outputs:
  - name: actorDisplayInfo
    type: C_ModelInfo.UIModelSceneActorDisplayInfo
C_ModelInfo.GetModelSceneActorInfoByID:
  inputs:
  - - name: modelActorID
      type: number
  outputs:
  - name: actorInfo
    type: C_ModelInfo.UIModelSceneActorInfo
C_ModelInfo.GetModelSceneCameraInfoByID:
  inputs:
  - - name: modelSceneCameraID
      type: number
  outputs:
  - name: modelSceneCameraInfo
    type: C_ModelInfo.UIModelSceneCameraInfo
C_ModelInfo.GetModelSceneInfoByID:
  inputs:
  - - name: modelSceneID
      type: number
  outputs:
  - name: modelSceneType
    type: number
  - innerType: number
    name: modelCameraIDs
    type: table
  - innerType: number
    name: modelActorsIDs
    type: table
C_NamePlate.GetNamePlateEnemyClickThrough: {}
C_NamePlate.GetNamePlateEnemyPreferredClickInsets: {}
C_NamePlate.GetNamePlateEnemySize: {}
C_NamePlate.GetNamePlateForUnit: {}
C_NamePlate.GetNamePlateFriendlyClickThrough: {}
C_NamePlate.GetNamePlateFriendlyPreferredClickInsets: {}
C_NamePlate.GetNamePlateFriendlySize: {}
C_NamePlate.GetNamePlates:
  outputs:
  - type: table
C_NamePlate.GetNamePlateSelfClickThrough: {}
C_NamePlate.GetNamePlateSelfPreferredClickInsets: {}
C_NamePlate.GetNamePlateSelfSize: {}
C_NamePlate.GetNumNamePlateMotionTypes:
  outputs:
  - type: number
C_NamePlate.GetTargetClampingInsets: {}
C_NamePlate.SetNamePlateEnemyClickThrough: {}
C_NamePlate.SetNamePlateEnemyPreferredClickInsets: {}
C_NamePlate.SetNamePlateEnemySize: {}
C_NamePlate.SetNamePlateFriendlyClickThrough: {}
C_NamePlate.SetNamePlateFriendlyPreferredClickInsets: {}
C_NamePlate.SetNamePlateFriendlySize: {}
C_NamePlate.SetNamePlateSelfClickThrough: {}
C_NamePlate.SetNamePlateSelfPreferredClickInsets: {}
C_NamePlate.SetNamePlateSelfSize: {}
C_NamePlate.SetTargetClampingInsets: {}
C_NewItems.ClearAll:
  inputs:
  - {}
  outputs: {}
C_NewItems.IsNewItem:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs:
  - name: isNew
    type: boolean
C_NewItems.RemoveNewItem:
  inputs:
  - - name: containerIndex
      type: number
    - name: slotIndex
      type: number
  outputs: {}
C_PaperDollInfo.GetArmorEffectiveness:
  inputs:
  - - name: armor
      type: number
    - name: attackerLevel
      type: number
  outputs:
  - name: effectiveness
    type: number
C_PaperDollInfo.GetArmorEffectivenessAgainstTarget:
  inputs:
  - - name: armor
      type: number
  outputs:
  - name: effectiveness
    nilable: true
    type: number
C_PaperDollInfo.GetMinItemLevel:
  inputs:
  - {}
  outputs:
  - name: minItemLevel
    nilable: true
    type: number
C_PaperDollInfo.OffhandHasShield:
  inputs:
  - {}
  outputs:
  - name: offhandHasShield
    type: boolean
C_PaperDollInfo.OffhandHasWeapon:
  inputs:
  - {}
  outputs:
  - name: offhandHasWeapon
    type: boolean
C_PartyInfo.ConfirmLeaveParty:
  inputs:
  - - name: category
      nilable: true
      type: number
  outputs: {}
C_PartyInfo.GetActiveCategories:
  inputs:
  - {}
  outputs:
  - innerType: number
    name: categories
    type: table
C_PartyInfo.GetInviteConfirmationInvalidQueues:
  inputs:
  - - name: inviteGUID
      type: string
  outputs:
  - innerType: QueueSpecificInfo
    name: invalidQueues
    type: table
C_PartyInfo.IsPartyFull:
  inputs:
  - - name: category
      nilable: true
      type: number
  outputs:
  - name: isFull
    type: boolean
C_PlayerInfo.GetAlternateFormInfo:
  inputs:
  - {}
  outputs:
  - name: hasAlternateForm
    type: boolean
  - name: inAlternateForm
    type: boolean
C_PlayerInfo.GetClass:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: className
    nilable: true
    type: string
  - name: classFilename
    nilable: true
    type: string
  - name: classID
    nilable: true
    type: number
C_PlayerInfo.GetName:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: name
    nilable: true
    type: string
C_PlayerInfo.GetRace:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: raceID
    nilable: true
    type: number
C_PlayerInfo.GetSex:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: sex
    nilable: true
    type: number
C_PlayerInfo.GUIDIsPlayer:
  inputs:
  - - name: guid
      type: string
  outputs:
  - name: isPlayer
    type: boolean
C_PlayerInfo.HasVisibleInvSlot:
  inputs:
  - - name: slot
      type: number
  outputs:
  - name: isVisible
    type: boolean
C_PlayerInfo.IsConnected:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      nilable: true
      type: table
  outputs:
  - name: isConnected
    nilable: true
    type: boolean
C_PlayerInfo.IsXPUserDisabled:
  inputs:
  - {}
  outputs:
  - name: isDisabled
    type: boolean
C_PlayerInfo.UnitIsSameServer:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: unitIsSameServer
    type: boolean
C_PlayerInteractionManager.ClearInteraction:
  inputs:
  - - name: type
      nilable: true
      type: number
  outputs: {}
C_PlayerInteractionManager.ConfirmationInteraction:
  inputs:
  - - name: type
      nilable: true
      type: number
  outputs: {}
C_PlayerInteractionManager.InteractUnit:
  inputs:
  - - name: unit
      type: string
    - default: false
      name: exactMatch
      type: boolean
  outputs:
  - name: success
    type: boolean
C_PlayerInteractionManager.IsInteractingWithNpcOfType:
  inputs:
  - - name: type
      type: number
  outputs:
  - name: interacting
    type: boolean
C_PlayerInteractionManager.IsReplacingUnit:
  inputs:
  - {}
  outputs:
  - name: replacing
    type: boolean
C_PlayerInteractionManager.IsValidNPCInteraction:
  inputs:
  - - name: type
      type: number
  outputs:
  - name: isValidInteraction
    type: boolean
C_PlayerInteractionManager.ReopenInteraction:
  inputs:
  - {}
  outputs: {}
C_ProductChoice.GetChoices:
  outputs:
  - type: table
C_ProductChoice.GetNumSuppressed:
  outputs:
  - type: number
C_ProductChoice.GetProducts: {}
C_ProductChoice.MakeSelection: {}
C_PvP.GetArenaCrowdControlInfo:
  inputs:
  - - name: playerToken
      type: string
  outputs:
  - name: spellID
    type: number
  - name: itemID
    type: number
  - name: startTime
    type: number
  - name: duration
    type: number
C_PvP.GetBattlefieldVehicleInfo:
  inputs:
  - - name: vehicleIndex
      type: number
    - name: uiMapID
      type: number
  outputs:
  - name: info
    type: C_PvP.BattlefieldVehicleInfo
C_PvP.GetBattlefieldVehicles:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: C_PvP.BattlefieldVehicleInfo
    name: vehicles
    type: table
C_PvP.GetHolidayBGLossRewards:
  inputs:
  - {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - innerType: C_PvP.BattlefieldItemReward
    name: itemRewards
    nilable: true
    type: table
  - innerType: C_PvP.BattlefieldCurrencyReward
    name: currencyRewards
    nilable: true
    type: table
C_PvP.GetHolidayBGRewards:
  inputs:
  - {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - innerType: C_PvP.BattlefieldItemReward
    name: itemRewards
    nilable: true
    type: table
  - innerType: C_PvP.BattlefieldCurrencyReward
    name: currencyRewards
    nilable: true
    type: table
C_PvP.GetRandomBGLossRewards:
  inputs:
  - {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - innerType: C_PvP.BattlefieldItemReward
    name: itemRewards
    nilable: true
    type: table
  - innerType: C_PvP.BattlefieldCurrencyReward
    name: currencyRewards
    nilable: true
    type: table
C_PvP.GetRandomBGRewards:
  inputs:
  - {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - innerType: C_PvP.BattlefieldItemReward
    name: itemRewards
    nilable: true
    type: table
  - innerType: C_PvP.BattlefieldCurrencyReward
    name: currencyRewards
    nilable: true
    type: table
C_PvP.IsInBrawl:
  inputs:
  - {}
  outputs:
  - name: isInBrawl
    type: boolean
C_PvP.IsPVPMap:
  inputs:
  - {}
  outputs:
  - name: isPVPMap
    type: boolean
C_PvP.IsRatedMap:
  inputs:
  - {}
  outputs:
  - name: isRatedMap
    type: boolean
C_PvP.RequestCrowdControlSpell:
  inputs:
  - - name: playerToken
      type: string
  outputs: {}
C_QuestLog.GetMaxNumQuests:
  inputs:
  - {}
  outputs:
  - name: maxNumQuests
    type: number
C_QuestLog.GetMaxNumQuestsCanAccept:
  inputs:
  - {}
  outputs:
  - name: maxNumQuestsCanAccept
    type: number
C_QuestLog.GetQuestInfo:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: title
    type: string
C_QuestLog.GetQuestObjectives:
  inputs:
  - - name: questID
      type: number
  outputs:
  - innerType: C_QuestLog.QuestObjectiveInfo
    name: objectives
    type: table
C_QuestLog.IsOnQuest:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: isOnQuest
    type: boolean
C_QuestLog.IsQuestFlaggedCompleted:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: isCompleted
    type: boolean
C_QuestLog.ShouldShowQuestRewards:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: shouldShow
    type: boolean
C_QuestSession.CanStart:
  inputs:
  - {}
  outputs:
  - name: allowed
    type: boolean
C_QuestSession.CanStop:
  inputs:
  - {}
  outputs:
  - name: allowed
    type: boolean
C_QuestSession.Exists:
  inputs:
  - {}
  outputs:
  - name: exists
    type: boolean
C_QuestSession.GetAvailableSessionCommand:
  inputs:
  - {}
  outputs:
  - name: command
    type: number
C_QuestSession.GetPendingCommand:
  inputs:
  - {}
  outputs:
  - name: command
    type: number
C_QuestSession.GetProposedMaxLevelForSession:
  inputs:
  - {}
  outputs:
  - name: proposedMaxLevel
    type: number
C_QuestSession.GetSessionBeginDetails:
  inputs:
  - {}
  outputs:
  - name: details
    nilable: true
    type: C_QuestSession.QuestSessionPlayerDetails
C_QuestSession.GetSuperTrackedQuest:
  inputs:
  - {}
  outputs:
  - name: questID
    nilable: true
    type: number
C_QuestSession.HasJoined:
  inputs:
  - {}
  outputs:
  - name: hasJoined
    type: boolean
C_QuestSession.HasPendingCommand:
  inputs:
  - {}
  outputs:
  - name: hasPendingCommand
    type: boolean
C_QuestSession.RequestSessionStart:
  inputs:
  - {}
  outputs: {}
C_QuestSession.RequestSessionStop:
  inputs:
  - {}
  outputs: {}
C_QuestSession.SendSessionBeginResponse:
  inputs:
  - - name: beginSession
      type: boolean
  outputs: {}
C_QuestSession.SetQuestIsSuperTracked:
  inputs:
  - - name: questID
      type: number
    - name: superTrack
      type: boolean
  outputs: {}
C_RaidLocks.IsEncounterComplete:
  inputs:
  - - name: mapID
      type: number
    - name: encounterID
      type: number
    - name: difficultyID
      nilable: true
      type: number
  outputs:
  - name: encounterIsComplete
    type: boolean
C_ReportSystem.CanReportPlayer:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: canReport
    type: boolean
C_ReportSystem.CanReportPlayerForLanguage:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: canReport
    type: boolean
C_ReportSystem.GetMajorCategoriesForReportType:
  inputs:
  - - name: reportType
      type: number
  outputs:
  - innerType: number
    name: majorCategories
    type: table
C_ReportSystem.GetMajorCategoryString:
  inputs:
  - - name: majorCategory
      type: number
  outputs:
  - name: majorCategoryString
    type: string
C_ReportSystem.GetMinorCategoriesForReportTypeAndMajorCategory:
  inputs:
  - - name: reportType
      type: number
    - name: majorCategory
      type: number
  outputs:
  - innerType: number
    name: minorCategories
    type: table
C_ReportSystem.GetMinorCategoryString:
  inputs:
  - - name: minorCategory
      type: number
  outputs:
  - name: minorCategoryString
    type: string
C_ReportSystem.ReportServerLag:
  inputs:
  - {}
  outputs: {}
C_ReportSystem.ReportStuckInCombat:
  inputs:
  - {}
  outputs: {}
C_ReportSystem.SendReport:
  inputs:
  - - mixin: ReportInfoMixin
      name: reportInfo
      type: table
    - mixin: PlayerLocationMixin
      name: playerLocation
      nilable: true
      type: table
  outputs: {}
C_Reputation.GetFactionParagonInfo:
  inputs:
  - - name: factionID
      type: number
  outputs:
  - name: currentValue
    type: number
  - name: threshold
    type: number
  - name: rewardQuestID
    type: number
  - name: hasRewardPending
    type: boolean
  - name: tooLowLevelForParagon
    type: boolean
C_Reputation.IsFactionParagon:
  inputs:
  - - name: factionID
      type: number
  outputs:
  - name: hasParagon
    type: boolean
C_Reputation.RequestFactionParagonPreloadRewardData:
  inputs:
  - - name: factionID
      type: number
  outputs: {}
C_Reputation.SetWatchedFaction:
  inputs:
  - - name: factionID
      type: number
  outputs: {}
C_ScriptedAnimations.GetAllScriptedAnimationEffects:
  impl: C_ScriptedAnimations.GetAllScriptedAnimationEffects
  inputs:
  - {}
  outputs:
  - innerType: C_ScriptedAnimations.ScriptedAnimationEffect
    name: scriptedAnimationEffects
    type: table
  sqls:
  - cursor: C_ScriptedAnimations.GetAllScriptedAnimationEffects
    table: true
C_Seasons.GetActiveSeason:
  inputs:
  - {}
  outputs:
  - name: seasonID
    nilable: true
    type: number
C_Seasons.HasActiveSeason:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
C_SharedCharacterServices.GetLastSeenCharacterUpgradePopup: {}
C_SharedCharacterServices.GetLastSeenExpansionTrialPopup: {}
C_SharedCharacterServices.GetUpgradeDistributions: {}
C_SharedCharacterServices.HasFreePromotionalUpgrade:
  inputs:
  - {}
  outputs:
  - type: boolean
C_SharedCharacterServices.HasSeenFreePromotionalUpgradePopup: {}
C_SharedCharacterServices.IsPurchaseIDPendingUpgrade: {}
C_SharedCharacterServices.QueryClassTrialBoostResult: {}
C_SharedCharacterServices.SetCharacterUpgradePopupSeen: {}
C_SharedCharacterServices.SetExpansionTrialPopupSeen: {}
C_SharedCharacterServices.SetPromotionalPopupSeen: {}
C_Social.GetLastItem:
  inputs:
  - {}
  outputs:
  - name: itemID
    type: number
  - name: itemName
    type: string
  - name: iconFileID
    type: number
  - name: itemQuality
    type: number
  - name: itemLevel
    type: number
  - name: itemLinkString
    type: string
C_Social.GetLastScreenshot: {}
C_Social.GetNumCharactersPerMedia: {}
C_Social.GetScreenshotByIndex: {}
C_Social.GetTweetLength:
  inputs:
  - - name: tweetText
      type: string
  outputs:
  - name: tweetLength
    type: number
C_Social.IsSocialEnabled:
  inputs:
  - {}
  outputs:
  - name: isEnabled
    type: boolean
C_Social.RegisterSocialBrowser: {}
C_Social.SetTextureToScreenshot: {}
C_Social.TwitterCheckStatus:
  inputs:
  - {}
  outputs: {}
C_Social.TwitterConnect:
  inputs:
  - {}
  outputs: {}
C_Social.TwitterDisconnect:
  inputs:
  - {}
  outputs: {}
C_Social.TwitterGetMSTillCanPost:
  inputs:
  - {}
  outputs:
  - name: msTimeLeft
    type: number
C_Social.TwitterPostAchievement: {}
C_Social.TwitterPostMessage:
  inputs:
  - - name: message
      type: string
  outputs: {}
C_Social.TwitterPostScreenshot: {}
C_SocialRestrictions.AcknowledgeRegionalChatDisabled:
  inputs:
  - {}
  outputs: {}
C_SocialRestrictions.IsChatDisabled:
  inputs:
  - {}
  outputs:
  - name: isDisabled
    type: boolean
C_SocialRestrictions.IsMuted:
  inputs:
  - {}
  outputs:
  - name: isMuted
    type: boolean
C_SocialRestrictions.IsSilenced:
  inputs:
  - {}
  outputs:
  - name: isSilenced
    type: boolean
C_SocialRestrictions.IsSquelched:
  inputs:
  - {}
  outputs:
  - name: isSquelched
    type: boolean
C_SocialRestrictions.SetChatDisabled:
  inputs:
  - - name: disabled
      type: boolean
  outputs: {}
C_Spell.DoesSpellExist:
  inputs:
  - - name: spellID
      type: number
  outputs:
  - name: spellExists
    stub: true
    type: boolean
C_Spell.IsSpellDataCached:
  inputs:
  - - name: spellID
      type: number
  outputs:
  - name: isCached
    type: boolean
C_Spell.RequestLoadSpellData:
  inputs:
  - - name: spellID
      type: number
  outputs: {}
C_StableInfo.GetNumActivePets:
  inputs:
  - {}
  outputs:
  - name: numActivePets
    type: number
C_StableInfo.GetNumStablePets:
  inputs:
  - {}
  outputs:
  - name: numStablePets
    type: number
C_StorePublic.DoesGroupHavePurchaseableProducts:
  inputs:
  - - name: groupID
      type: number
  outputs:
  - name: hasPurchaseableProducts
    type: boolean
C_StorePublic.HasPurchaseableProducts:
  inputs:
  - {}
  outputs:
  - name: hasPurchaseableProducts
    type: boolean
C_StorePublic.IsDisabledByParentalControls:
  inputs:
  - {}
  outputs:
  - name: disabled
    type: boolean
C_StorePublic.IsEnabled:
  inputs:
  - {}
  outputs:
  - name: enabled
    type: boolean
C_StoreSecure.AckFailure: {}
C_StoreSecure.GetBnetTransferInfo: {}
C_StoreSecure.GetCharacterInfoByGUID: {}
C_StoreSecure.GetCharactersForRealm:
  outputs:
  - stub:
    - level: 42
    type: table
C_StoreSecure.GetConfirmationInfo: {}
C_StoreSecure.GetCurrencyID: {}
C_StoreSecure.GetCurrentRealmCategory: {}
C_StoreSecure.GetCurrentRealmContentSet: {}
C_StoreSecure.GetEligibleRacesForVASService: {}
C_StoreSecure.GetEntryInfo: {}
C_StoreSecure.GetFailureInfo: {}
C_StoreSecure.GetProductGroupInfo: {}
C_StoreSecure.GetProductGroups:
  outputs:
  - type: table
C_StoreSecure.GetProductInfo: {}
C_StoreSecure.GetProductList:
  inputs:
  - {}
  outputs: {}
C_StoreSecure.GetProducts: {}
C_StoreSecure.GetPurchaseList: {}
C_StoreSecure.GetRealmList: {}
C_StoreSecure.GetUnrevokedBoostInfo: {}
C_StoreSecure.GetVASCompletionInfo: {}
C_StoreSecure.GetVASErrors: {}
C_StoreSecure.GetVASRealmList: {}
C_StoreSecure.GetWoWAccountGUIDFromName: {}
C_StoreSecure.HasDistributionList: {}
C_StoreSecure.HasProductList: {}
C_StoreSecure.HasProductType: {}
C_StoreSecure.HasPurchaseInProgress: {}
C_StoreSecure.HasPurchaseList: {}
C_StoreSecure.IsAvailable: {}
C_StoreSecure.IsRegionLocked: {}
C_StoreSecure.IsVASEligibleCharacterGUID: {}
C_StoreSecure.PurchaseProduct: {}
C_StoreSecure.PurchaseProductConfirm: {}
C_StoreSecure.PurchaseVASProduct: {}
C_StoreSecure.RequestPriceInfo: {}
C_StoreSecure.SetDisconnectOnLogout: {}
C_StoreSecure.SetVASProductReady: {}
C_StoreSecure.ValidateBnetTransfer: {}
C_SummonInfo.CancelSummon:
  inputs:
  - {}
  outputs: {}
C_SummonInfo.ConfirmSummon:
  inputs:
  - {}
  outputs: {}
C_SummonInfo.GetSummonConfirmAreaName:
  inputs:
  - {}
  outputs:
  - name: areaName
    type: string
C_SummonInfo.GetSummonConfirmSummoner:
  inputs:
  - {}
  outputs:
  - name: summoner
    nilable: true
    type: string
C_SummonInfo.GetSummonConfirmTimeLeft:
  inputs:
  - {}
  outputs:
  - name: timeLeft
    type: number
C_SummonInfo.GetSummonReason:
  inputs:
  - {}
  outputs:
  - name: summonReason
    type: number
C_SummonInfo.IsSummonSkippingStartExperience:
  inputs:
  - {}
  outputs:
  - name: isSummonSkippingStartExperience
    type: boolean
C_System.GetFrameStack:
  inputs:
  - {}
  outputs:
  - innerType: table
    name: objects
    type: table
C_TaskQuest.DoesMapShowTaskQuestObjectives:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - name: showsTaskQuestObjectives
    type: boolean
C_TaskQuest.GetQuestInfoByQuestID:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: questTitle
    type: string
  - name: factionID
    nilable: true
    type: number
  - name: capped
    nilable: true
    type: boolean
  - name: displayAsObjective
    nilable: true
    type: boolean
C_TaskQuest.GetQuestLocation:
  inputs:
  - - name: questID
      type: number
    - name: uiMapID
      type: number
  outputs:
  - name: locationX
    type: number
  - name: locationY
    type: number
C_TaskQuest.GetQuestProgressBarInfo:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: progress
    type: number
C_TaskQuest.GetQuestsForPlayerByMapID:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: C_TaskQuest.TaskPOIData
    name: taskPOIs
    type: table
C_TaskQuest.GetQuestTimeLeftMinutes:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: minutesLeft
    type: number
C_TaskQuest.GetQuestTimeLeftSeconds:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: secondsLeft
    type: number
C_TaskQuest.GetQuestZoneID:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: uiMapID
    type: number
C_TaskQuest.GetThreatQuests:
  inputs:
  - {}
  outputs:
  - innerType: number
    name: quests
    type: table
C_TaskQuest.GetUIWidgetSetIDFromQuestID:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: UiWidgetSetID
    type: number
C_TaskQuest.IsActive:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: active
    type: boolean
C_TaskQuest.RequestPreloadRewardData:
  inputs:
  - - name: questID
      type: number
  outputs: {}
C_TaxiMap.GetAllTaxiNodes:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: C_TaxiMap.TaxiNodeInfo
    name: taxiNodes
    type: table
C_TaxiMap.GetTaxiNodesForMap:
  inputs:
  - - name: uiMapID
      type: number
  outputs:
  - innerType: C_TaxiMap.MapTaxiNodeInfo
    name: mapTaxiNodes
    type: table
C_Texture.GetAtlasInfo:
  impl: C_Texture.GetAtlasInfo
  inputs:
  - - name: atlas
      type: string
  outputs:
  - name: info
    nilable: true
    type: C_Texture.AtlasInfo
  sqls:
  - lookup: C_Texture.GetAtlasInfo
C_Texture.GetFilenameFromFileDataID:
  inputs:
  - - name: fileDataID
      type: number
  outputs:
  - name: filename
    type: string
C_Timer.After:
  frameworks:
  - api
  impl: C_Timer.After
  inputs:
  - - name: seconds
      type: number
    - name: callback
      type: function
  outputs: {}
  states:
  - Time
C_Timer.NewTicker:
  impl: C_Timer.NewTicker
  inputs:
  - - name: seconds
      type: number
    - name: callback
      type: function
    - name: iterations
      nilable: true
      type: number
  outputs:
  - name: cbObject
    type: userdata
  states:
  - Time
C_Timer.NewTimer:
  impl: C_Timer.NewTimer
  inputs:
  - - name: seconds
      type: number
    - name: callback
      type: function
  outputs:
  - name: cbObject
    type: userdata
  states:
  - Time
C_ToyBoxInfo.ClearFanfare:
  inputs:
  - - name: itemID
      type: number
  outputs: {}
C_ToyBoxInfo.NeedsFanfare:
  inputs:
  - - name: itemID
      type: number
  outputs:
  - name: needsFanfare
    type: boolean
C_TTSSettings.GetChannelEnabled:
  inputs:
  - - name: channelInfo
      type: ChatChannelInfo
  outputs:
  - name: enabled
    type: boolean
C_TTSSettings.GetCharacterSettingsSaved:
  inputs:
  - {}
  outputs:
  - name: settingsBeenSaved
    type: boolean
C_TTSSettings.GetChatTypeEnabled:
  inputs:
  - - name: chatName
      type: string
  outputs:
  - name: enabled
    type: boolean
C_TTSSettings.GetSetting:
  inputs:
  - - name: setting
      type: number
  outputs:
  - name: enabled
    type: boolean
C_TTSSettings.GetSpeechRate:
  inputs:
  - {}
  outputs:
  - name: rate
    type: number
C_TTSSettings.GetSpeechVolume:
  inputs:
  - {}
  outputs:
  - name: volume
    type: number
C_TTSSettings.GetVoiceOptionID:
  inputs:
  - - name: voiceType
      type: number
  outputs:
  - name: voiceID
    type: number
C_TTSSettings.GetVoiceOptionName:
  inputs:
  - - name: voiceType
      type: number
  outputs:
  - name: voiceName
    type: string
C_TTSSettings.MarkCharacterSettingsSaved:
  inputs:
  - {}
  outputs: {}
C_TTSSettings.SetChannelEnabled:
  inputs:
  - - name: channelInfo
      type: ChatChannelInfo
    - default: false
      name: newVal
      type: boolean
  outputs: {}
C_TTSSettings.SetChannelKeyEnabled:
  inputs:
  - - name: channelKey
      type: string
    - default: false
      name: newVal
      type: boolean
  outputs: {}
C_TTSSettings.SetChatTypeEnabled:
  inputs:
  - - name: chatName
      type: string
    - default: false
      name: newVal
      type: boolean
  outputs: {}
C_TTSSettings.SetDefaultSettings:
  inputs:
  - {}
  outputs: {}
C_TTSSettings.SetSetting:
  inputs:
  - - name: setting
      type: number
    - default: false
      name: newVal
      type: boolean
  outputs: {}
C_TTSSettings.SetSpeechRate:
  inputs:
  - - name: newVal
      type: number
  outputs: {}
C_TTSSettings.SetSpeechVolume:
  inputs:
  - - name: newVal
      type: number
  outputs: {}
C_TTSSettings.SetVoiceOption:
  inputs:
  - - name: voiceType
      type: number
    - name: voiceID
      type: number
  outputs: {}
C_TTSSettings.SetVoiceOptionName:
  inputs:
  - - name: voiceType
      type: number
    - name: voiceName
      type: string
  outputs: {}
C_TTSSettings.ShouldOverrideMessage:
  inputs:
  - - name: language
      type: number
  outputs:
  - name: overrideMessage
    type: boolean
C_UI.DoesAnyDisplayHaveNotch:
  inputs:
  - {}
  outputs:
  - name: notchPresent
    type: boolean
C_UI.GetTopLeftNotchSafeRegion:
  inputs:
  - {}
  outputs:
  - name: left
    type: number
  - name: right
    type: number
  - name: top
    type: number
  - name: bottom
    type: number
C_UI.GetTopRightNotchSafeRegion:
  inputs:
  - {}
  outputs:
  - name: left
    type: number
  - name: right
    type: number
  - name: top
    type: number
  - name: bottom
    type: number
C_UI.Reload:
  inputs:
  - {}
  outputs: {}
C_UI.ShouldUIParentAvoidNotch:
  inputs:
  - {}
  outputs:
  - name: willAvoidNotch
    type: boolean
C_UIColor.GetColors:
  impl: C_UIColor.GetColors
  inputs:
  - {}
  outputs:
  - innerType: C_UIColor.DBColorExport
    name: colors
    type: table
  sqls:
  - cursor: C_UIColor.GetColors
C_UIWidgetManager.GetAllWidgetsBySetID:
  inputs:
  - - name: setID
      type: number
  outputs:
  - innerType: C_UIWidgetManager.UIWidgetInfo
    name: widgets
    type: table
C_UIWidgetManager.GetBelowMinimapWidgetSetID:
  inputs:
  - {}
  outputs:
  - name: setID
    type: number
C_UIWidgetManager.GetBulletTextListWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.BulletTextListWidgetVisualizationInfo
C_UIWidgetManager.GetCaptureBarWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.CaptureBarWidgetVisualizationInfo
C_UIWidgetManager.GetDoubleIconAndTextWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.DoubleIconAndTextWidgetVisualizationInfo
C_UIWidgetManager.GetDoubleStatusBarWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.DoubleStatusBarWidgetVisualizationInfo
C_UIWidgetManager.GetHorizontalCurrenciesWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.HorizontalCurrenciesWidgetVisualizationInfo
C_UIWidgetManager.GetIconAndTextWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.IconAndTextWidgetVisualizationInfo
C_UIWidgetManager.GetIconTextAndBackgroundWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.IconTextAndBackgroundWidgetVisualizationInfo
C_UIWidgetManager.GetIconTextAndCurrenciesWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.IconTextAndCurrenciesWidgetVisualizationInfo
C_UIWidgetManager.GetScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.ScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo
C_UIWidgetManager.GetStackedResourceTrackerWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.StackedResourceTrackerWidgetVisualizationInfo
C_UIWidgetManager.GetStatusBarWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.StatusBarWidgetVisualizationInfo
C_UIWidgetManager.GetTextureWithStateVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.TextureWithStateVisualizationInfo
C_UIWidgetManager.GetTextWithStateWidgetVisualizationInfo:
  inputs:
  - - name: widgetID
      type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type: C_UIWidgetManager.TextWithStateWidgetVisualizationInfo
C_UIWidgetManager.GetTopCenterWidgetSetID:
  inputs:
  - {}
  outputs:
  - name: setID
    type: number
C_UserFeedback.SubmitBug:
  inputs:
  - - name: bugInfo
      type: string
    - default: false
      name: suppressNotification
      type: boolean
  outputs:
  - name: success
    type: boolean
C_UserFeedback.SubmitSuggestion:
  inputs:
  - - name: suggestion
      type: string
  outputs:
  - name: success
    type: boolean
C_VideoOptions.GetCurrentGameWindowSize:
  inputs:
  - {}
  outputs:
  - mixin: Vector2DMixin
    name: size
    type: Vector2D
C_VideoOptions.GetDefaultGameWindowSize:
  inputs:
  - - name: monitor
      type: number
  outputs:
  - mixin: Vector2DMixin
    name: size
    type: Vector2D
C_VideoOptions.GetGameWindowSizes:
  inputs:
  - - name: monitor
      type: number
    - name: fullscreen
      type: boolean
  outputs:
  - innerType: table
    name: sizes
    type: table
C_VideoOptions.GetGxAdapterInfo:
  inputs:
  - {}
  outputs:
  - innerType: C_VideoOptions.GxAdapterInfoDetails
    name: adapters
    type: table
C_VideoOptions.SetGameWindowSize:
  inputs:
  - - name: x
      type: number
    - name: y
      type: number
  outputs: {}
C_VoiceChat.ActivateChannel:
  inputs:
  - - name: channelID
      type: number
  outputs: {}
C_VoiceChat.ActivateChannelTranscription:
  inputs:
  - - name: channelID
      type: number
  outputs: {}
C_VoiceChat.BeginLocalCapture:
  inputs:
  - - name: listenToLocalUser
      type: boolean
  outputs: {}
C_VoiceChat.CanPlayerUseVoiceChat:
  inputs:
  - {}
  outputs:
  - name: canUseVoiceChat
    type: boolean
C_VoiceChat.CreateChannel:
  inputs:
  - - name: channelDisplayName
      type: string
  outputs:
  - name: status
    type: number
C_VoiceChat.DeactivateChannel:
  inputs:
  - - name: channelID
      type: number
  outputs: {}
C_VoiceChat.DeactivateChannelTranscription:
  inputs:
  - - name: channelID
      type: number
  outputs: {}
C_VoiceChat.EndLocalCapture:
  inputs:
  - {}
  outputs: {}
C_VoiceChat.GetActiveChannelID:
  inputs:
  - {}
  outputs:
  - name: channelID
    nilable: true
    type: number
C_VoiceChat.GetActiveChannelType:
  inputs:
  - {}
  outputs:
  - name: channelType
    nilable: true
    type: number
C_VoiceChat.GetAvailableInputDevices:
  inputs:
  - {}
  outputs:
  - innerType: C_VoiceChat.VoiceAudioDevice
    name: inputDevices
    nilable: true
    type: table
C_VoiceChat.GetAvailableOutputDevices:
  inputs:
  - {}
  outputs:
  - innerType: C_VoiceChat.VoiceAudioDevice
    name: outputDevices
    nilable: true
    type: table
C_VoiceChat.GetChannel:
  inputs:
  - - name: channelID
      type: number
  outputs:
  - name: channel
    nilable: true
    type: C_VoiceChat.VoiceChatChannel
C_VoiceChat.GetChannelForChannelType:
  inputs:
  - - name: channelType
      type: number
  outputs:
  - name: channel
    nilable: true
    type: C_VoiceChat.VoiceChatChannel
C_VoiceChat.GetChannelForCommunityStream:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs:
  - name: channel
    nilable: true
    type: C_VoiceChat.VoiceChatChannel
C_VoiceChat.GetCommunicationMode:
  inputs:
  - {}
  outputs:
  - name: communicationMode
    nilable: true
    type: number
C_VoiceChat.GetCurrentVoiceChatConnectionStatusCode:
  inputs:
  - {}
  outputs:
  - name: statusCode
    nilable: true
    type: number
C_VoiceChat.GetInputVolume:
  inputs:
  - {}
  outputs:
  - name: volume
    nilable: true
    type: number
C_VoiceChat.GetLocalPlayerActiveChannelMemberInfo:
  inputs:
  - {}
  outputs:
  - name: memberInfo
    nilable: true
    type: C_VoiceChat.VoiceChatMember
C_VoiceChat.GetLocalPlayerMemberID:
  inputs:
  - - name: channelID
      type: number
  outputs:
  - name: memberID
    nilable: true
    type: number
C_VoiceChat.GetMasterVolumeScale:
  inputs:
  - {}
  outputs:
  - name: scale
    type: number
C_VoiceChat.GetMemberGUID:
  inputs:
  - - name: memberID
      type: number
    - name: channelID
      type: number
  outputs:
  - name: memberGUID
    type: string
C_VoiceChat.GetMemberID:
  inputs:
  - - name: channelID
      type: number
    - name: memberGUID
      type: string
  outputs:
  - name: memberID
    nilable: true
    type: number
C_VoiceChat.GetMemberInfo:
  inputs:
  - - name: memberID
      type: number
    - name: channelID
      type: number
  outputs:
  - name: memberInfo
    nilable: true
    type: C_VoiceChat.VoiceChatMember
C_VoiceChat.GetMemberName:
  inputs:
  - - name: memberID
      type: number
    - name: channelID
      type: number
  outputs:
  - name: memberName
    nilable: true
    type: string
C_VoiceChat.GetMemberVolume:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: volume
    nilable: true
    type: number
C_VoiceChat.GetOutputVolume:
  inputs:
  - {}
  outputs:
  - name: volume
    nilable: true
    type: number
C_VoiceChat.GetProcesses:
  inputs:
  - {}
  outputs:
  - innerType: C_VoiceChat.VoiceChatProcess
    name: processes
    type: table
C_VoiceChat.GetPTTButtonPressedState:
  inputs:
  - {}
  outputs:
  - name: isPressed
    nilable: true
    type: boolean
C_VoiceChat.GetPushToTalkBinding:
  inputs:
  - {}
  outputs:
  - innerType: string
    name: keys
    nilable: true
    type: table
C_VoiceChat.GetRemoteTtsVoices:
  inputs:
  - {}
  outputs:
  - innerType: C_VoiceChat.VoiceTtsVoiceType
    name: ttsVoices
    type: table
C_VoiceChat.GetTtsVoices:
  inputs:
  - {}
  outputs:
  - innerType: C_VoiceChat.VoiceTtsVoiceType
    name: ttsVoices
    type: table
C_VoiceChat.GetVADSensitivity:
  inputs:
  - {}
  outputs:
  - name: sensitivity
    nilable: true
    type: number
C_VoiceChat.IsChannelJoinPending:
  inputs:
  - - name: channelType
      type: number
    - name: clubId
      nilable: true
      type: string
    - name: streamId
      nilable: true
      type: string
  outputs:
  - name: isPending
    type: boolean
C_VoiceChat.IsDeafened:
  inputs:
  - {}
  outputs:
  - name: isDeafened
    nilable: true
    type: boolean
C_VoiceChat.IsEnabled:
  inputs:
  - {}
  outputs:
  - name: isEnabled
    type: boolean
C_VoiceChat.IsLoggedIn:
  inputs:
  - {}
  outputs:
  - name: isLoggedIn
    type: boolean
C_VoiceChat.IsMemberLocalPlayer:
  inputs:
  - - name: memberID
      type: number
    - name: channelID
      type: number
  outputs:
  - name: isLocalPlayer
    type: boolean
C_VoiceChat.IsMemberMuted:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: mutedForMe
    nilable: true
    type: boolean
C_VoiceChat.IsMemberMutedForAll:
  inputs:
  - - name: memberID
      type: number
    - name: channelID
      type: number
  outputs:
  - name: mutedForAll
    nilable: true
    type: boolean
C_VoiceChat.IsMemberSilenced:
  inputs:
  - - name: memberID
      type: number
    - name: channelID
      type: number
  outputs:
  - name: silenced
    nilable: true
    type: boolean
C_VoiceChat.IsMuted:
  inputs:
  - {}
  outputs:
  - name: isMuted
    nilable: true
    type: boolean
C_VoiceChat.IsParentalDisabled:
  inputs:
  - {}
  outputs:
  - name: isParentalDisabled
    type: boolean
C_VoiceChat.IsParentalMuted:
  inputs:
  - {}
  outputs:
  - name: isParentalMuted
    type: boolean
C_VoiceChat.IsPlayerUsingVoice:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs:
  - name: isUsingVoice
    type: boolean
C_VoiceChat.IsSilenced:
  inputs:
  - {}
  outputs:
  - name: isSilenced
    nilable: true
    type: boolean
C_VoiceChat.IsSpeakForMeActive:
  inputs:
  - {}
  outputs:
  - name: isActive
    type: boolean
C_VoiceChat.IsSpeakForMeAllowed:
  inputs:
  - {}
  outputs:
  - name: isAllowed
    type: boolean
C_VoiceChat.IsTranscriptionAllowed:
  inputs:
  - {}
  outputs:
  - name: isAllowed
    type: boolean
C_VoiceChat.IsVoiceChatConnected:
  inputs:
  - {}
  outputs:
  - name: connected
    type: boolean
C_VoiceChat.LeaveChannel:
  inputs:
  - - name: channelID
      type: number
  outputs: {}
C_VoiceChat.Login:
  inputs:
  - {}
  outputs:
  - name: status
    type: number
C_VoiceChat.Logout:
  inputs:
  - {}
  outputs:
  - name: status
    type: number
C_VoiceChat.MarkChannelsDiscovered:
  inputs:
  - {}
  outputs: {}
C_VoiceChat.RequestJoinAndActivateCommunityStreamChannel:
  inputs:
  - - name: clubId
      type: string
    - name: streamId
      type: string
  outputs: {}
C_VoiceChat.RequestJoinChannelByChannelType:
  inputs:
  - - name: channelType
      type: number
    - name: autoActivate
      nilable: true
      type: boolean
  outputs: {}
C_VoiceChat.SetCommunicationMode:
  inputs:
  - - name: communicationMode
      type: number
  outputs: {}
C_VoiceChat.SetDeafened:
  inputs:
  - - name: isDeafened
      type: boolean
  outputs: {}
C_VoiceChat.SetInputDevice:
  inputs:
  - - name: deviceID
      type: string
  outputs: {}
C_VoiceChat.SetInputVolume:
  inputs:
  - - name: volume
      type: number
  outputs: {}
C_VoiceChat.SetMasterVolumeScale:
  inputs:
  - - name: scale
      type: number
  outputs: {}
C_VoiceChat.SetMemberMuted:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
    - name: muted
      type: boolean
  outputs: {}
C_VoiceChat.SetMemberVolume:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
    - name: volume
      type: number
  outputs: {}
C_VoiceChat.SetMuted:
  inputs:
  - - name: isMuted
      type: boolean
  outputs: {}
C_VoiceChat.SetOutputDevice:
  inputs:
  - - name: deviceID
      type: string
  outputs: {}
C_VoiceChat.SetOutputVolume:
  inputs:
  - - name: volume
      type: number
  outputs: {}
C_VoiceChat.SetPortraitTexture:
  inputs:
  - - name: textureObject
      type: table
    - name: memberID
      type: number
    - name: channelID
      type: number
  outputs: {}
C_VoiceChat.SetPushToTalkBinding:
  inputs:
  - - innerType: string
      name: keys
      type: table
  outputs: {}
C_VoiceChat.SetVADSensitivity:
  inputs:
  - - name: sensitivity
      type: number
  outputs: {}
C_VoiceChat.ShouldDiscoverChannels:
  inputs:
  - {}
  outputs:
  - name: shouldDiscoverChannels
    type: boolean
C_VoiceChat.SpeakRemoteTextSample:
  inputs:
  - - name: text
      type: string
  outputs: {}
C_VoiceChat.SpeakText:
  inputs:
  - - name: voiceID
      type: number
    - name: text
      type: string
    - name: destination
      type: number
    - name: rate
      type: number
    - name: volume
      type: number
  outputs: {}
C_VoiceChat.StopSpeakingText:
  inputs:
  - {}
  outputs: {}
C_VoiceChat.ToggleDeafened:
  inputs:
  - {}
  outputs: {}
C_VoiceChat.ToggleMemberMuted:
  inputs:
  - - mixin: PlayerLocationMixin
      name: playerLocation
      type: table
  outputs: {}
C_VoiceChat.ToggleMuted:
  inputs:
  - {}
  outputs: {}
C_Widget.IsFrameWidget:
  inputs:
  - - name: frame
      type: unknown
  outputs:
  - stub: true
    type: boolean
C_Widget.IsRenderableWidget: {}
C_Widget.IsWidget:
  inputs:
  - - name: object
      type: unknown
  outputs:
  - name: value
    type: boolean
C_WowTokenPublic.BuyToken: {}
C_WowTokenPublic.GetCommerceSystemStatus: {}
C_WowTokenPublic.GetCurrentMarketPrice:
  inputs:
  - {}
  outputs:
  - type: number
C_WowTokenPublic.GetGuaranteedPrice:
  inputs:
  - {}
  outputs:
  - name: price
    type: number
C_WowTokenPublic.GetListedAuctionableTokenInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: itemID
    type: number
  - name: buyoutPrice
    type: number
  - name: duration
    type: number
C_WowTokenPublic.GetNumListedAuctionableTokens:
  inputs:
  - {}
  outputs:
  - name: tokenCount
    type: number
C_WowTokenPublic.IsAuctionableWowToken:
  inputs:
  - - name: itemID
      type: number
  outputs:
  - name: value
    type: boolean
C_WowTokenPublic.IsConsumableWowToken: {}
C_WowTokenPublic.SellToken: {}
C_WowTokenPublic.UpdateListedAuctionableTokens:
  inputs:
  - {}
  outputs: {}
C_WowTokenPublic.UpdateMarketPrice:
  inputs:
  - {}
  outputs: {}
C_WowTokenPublic.UpdateTokenCount: {}
C_WowTokenSecure.CancelRedeem: {}
C_WowTokenSecure.CanRedeemForBalance: {}
C_WowTokenSecure.ConfirmBuyToken: {}
C_WowTokenSecure.ConfirmSellToken:
  inputs:
  - - name: sell
      type: boolean
  outputs: {}
C_WowTokenSecure.GetBalanceRedeemAmount: {}
C_WowTokenSecure.GetBalanceRedemptionInfo:
  inputs:
  - {}
  outputs:
  - name: currentBalance
    type: number
  - name: addedBalance
    type: number
  - name: canRedeem
    type: boolean
  - name: cannotRedeemReason
    type: string
C_WowTokenSecure.GetGameTimeRedemptionInfo:
  inputs:
  - {}
  outputs:
  - name: isSub
    type: boolean
  - name: remaining
    type: number
C_WowTokenSecure.GetPriceLockDuration:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
C_WowTokenSecure.GetRemainingGameTime: {}
C_WowTokenSecure.GetTokenCount: {}
C_WowTokenSecure.GetValidRedemptionTypes: {}
C_WowTokenSecure.IsRedemptionStillValid: {}
C_WowTokenSecure.RedeemToken: {}
C_WowTokenSecure.RedeemTokenConfirm: {}
C_WowTokenSecure.SetBalanceAmountString: {}
C_WowTokenSecure.WillKickFromWorld: {}
C_XMLUtil.GetTemplateInfo:
  frameworks:
  - api
  impl: C_XMLUtil.GetTemplateInfo
  inputs:
  - - name: name
      type: string
  mayreturnnothing: true
  outputs:
  - name: info
    type: C_XMLUtil.XMLTemplateInfo
C_XMLUtil.GetTemplates:
  inputs:
  - {}
  outputs:
  - innerType: C_XMLUtil.XMLTemplateListInfo
    name: templates
    type: table
CalculateAuctionDeposit: {}
CalculateStringEditDistance: {}
CallCompanion: {}
CameraOrSelectOrMoveStart:
  inputs:
  - {}
  outputs: {}
CameraOrSelectOrMoveStop:
  inputs:
  - - name: stickyFlag
      nilable: true
      type: boolean
  outputs: {}
CameraZoomIn:
  inputs:
  - - name: increment
      nilable: true
      type: number
  outputs: {}
CameraZoomOut:
  inputs:
  - - name: increment
      nilable: true
      type: number
  outputs: {}
CanAbandonQuest: {}
CanAffordMerchantItem:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: value
    type: boolean
CanAutoSetGamePadCursorControl: {}
CanBeRaidTarget: {}
CanCancelAuction: {}
CanCancelScene: {}
CancelAreaSpiritHeal: {}
CancelAuction: {}
CancelDuel: {}
CancelEmote: {}
CancelItemTempEnchantment: {}
CancelLogout:
  inputs:
  - {}
  outputs: {}
CancelPendingEquip: {}
CancelPetPossess: {}
CancelPreloadingMovie: {}
CancelScene: {}
CancelSell: {}
CancelShapeshiftForm:
  inputs:
  - {}
  outputs: {}
CancelSpellByName:
  inputs:
  - - name: spell
      type: string
  outputs: {}
CancelTrackingBuff: {}
CancelTrade: {}
CancelTradeAccept: {}
CancelUnitBuff: {}
CanChangePlayerDifficulty: {}
CanComplainInboxItem: {}
CanDualWield: {}
CanEditGuildBankTabInfo: {}
CanEditGuildEvent: {}
CanEditGuildInfo:
  inputs:
  - {}
  outputs:
  - name: value
    type: oneornil
CanEditGuildTabInfo: {}
CanEditMOTD:
  inputs:
  - {}
  outputs:
  - name: canEdit
    type: boolean
CanEditPublicNote: {}
CanEjectPassengerFromSeat: {}
CanExitVehicle: {}
CanGamePadControlCursor: {}
CanGrantLevel: {}
CanGuildBankRepair:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
CanGuildDemote: {}
CanGuildInvite:
  inputs:
  - {}
  outputs:
  - name: canInvite
    type: boolean
CanGuildPromote: {}
CanGuildRemove: {}
CanHearthAndResurrectFromArea: {}
CanInitiateWarGame: {}
CanInspect:
  inputs:
  - - name: unit
      type: unit
    - name: showError
      nilable: true
      type: boolean
  outputs:
  - name: canInspect
    type: oneornil
CanJoinBattlefieldAsGroup:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
CanLootUnit: {}
CanMerchantRepair:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
CannotBeResurrected:
  inputs:
  - {}
  outputs:
  - type: boolean
CanReplaceGuildMaster: {}
CanResetTutorials: {}
CanSendAuctionQuery: {}
CanSendSoRByText: {}
CanShowAchievementUI: {}
CanShowResetInstances: {}
CanSignPetition:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
CanSummonFriend: {}
CanSwitchVehicleSeat: {}
CanSwitchVehicleSeats: {}
CanUpgradeExpansion:
  inputs:
  - {}
  outputs:
  - name: canUpgradeExpansion
    type: boolean
CanWithdrawGuildBankMoney:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
CaseAccentInsensitiveParse: {}
CastingInfo: {}
CastPetAction: {}
CastShapeshiftForm: {}
CastSpell: {}
CastSpellByID: {}
CastSpellByName:
  inputs:
  - - type: string
    - nilable: true
      type: string
  outputs: {}
  protection: secure
ceil:
  alias: math.ceil
ChangeActionBarPage: {}
ChangeChatColor: {}
ChannelBan: {}
ChannelInfo: {}
ChannelInvite: {}
ChannelKick: {}
ChannelModerator: {}
ChannelSetAllSilent: {}
ChannelSetPartyMemberSilent: {}
ChannelToggleAnnouncements: {}
ChannelUnban: {}
ChannelUnmoderator: {}
CheckInbox:
  inputs:
  - {}
  outputs: {}
CheckInteractDistance: {}
CheckTalentMasterDist: {}
ClassicExpansionAtLeast: {}
ClearAchievementComparisonUnit: {}
ClearBattlemaster:
  inputs:
  - {}
  outputs: {}
ClearCursor: {}
ClearFocus:
  inputs:
  - {}
  outputs: {}
ClearInspectPlayer: {}
ClearOverrideBindings: {}
ClearPartyAssignment:
  inputs:
  - - name: role
      type: string
    - name: unit
      type: unit
  outputs: {}
ClearSendMail: {}
ClearTarget:
  inputs:
  - {}
  outputs:
  - type: boolean
ClearTutorials: {}
ClickAuctionSellItemButton: {}
ClickSendMailItemButton: {}
ClickSocketButton: {}
ClickStablePet: {}
ClickTargetTradeButton: {}
ClickTradeButton: {}
CloseArenaTeamRoster: {}
CloseAuctionHouse:
  inputs:
  - {}
  outputs: {}
CloseBankFrame:
  inputs:
  - {}
  outputs: {}
CloseCraft:
  inputs:
  - {}
  outputs: {}
CloseGuildBankFrame:
  inputs:
  - {}
  outputs: {}
CloseGuildRoster: {}
CloseItemText:
  inputs:
  - {}
  outputs: {}
CloseLoot: {}
CloseMail:
  inputs:
  - {}
  outputs: {}
CloseMerchant:
  inputs:
  - {}
  outputs: {}
ClosePetition:
  inputs:
  - {}
  outputs: {}
ClosePetitionRegistrar:
  inputs:
  - {}
  outputs: {}
ClosePetStables:
  inputs:
  - {}
  outputs: {}
CloseQuest:
  inputs:
  - {}
  outputs: {}
CloseSocketInfo:
  inputs:
  - {}
  outputs: {}
ClosestGameObjectPosition: {}
ClosestUnitPosition: {}
CloseTabardCreation:
  inputs:
  - {}
  outputs: {}
CloseTaxiMap: {}
CloseTrade:
  inputs:
  - {}
  outputs: {}
CloseTradeSkill:
  inputs:
  - {}
  outputs: {}
CloseTrainer:
  inputs:
  - {}
  outputs: {}
CollapseAllFactionHeaders: {}
CollapseCraftSkillLine: {}
CollapseFactionHeader: {}
CollapseQuestHeader: {}
CollapseSkillHeader: {}
CollapseTradeSkillSubClass: {}
CollapseTrainerSkillLine: {}
collectgarbage:
  stdlib: collectgarbage
CombatLog_Object_IsA: {}
CombatLogAddFilter: {}
CombatLogAdvanceEntry: {}
CombatLogClearEntries: {}
CombatLogGetCurrentEntry: {}
CombatLogGetCurrentEventInfo:
  inputs:
  - {}
  outputs:
  - name: timestamp
    type: number
  - name: subevent
    type: string
  - name: hideCaster
    type: boolean
  - name: guid
    type: string
  - name: name
    type: string
  - name: flags
    type: number
  - name: raidFlags
    type: number
CombatLogGetNumEntries:
  outputs:
  - type: number
CombatLogGetRetentionTime: {}
CombatLogResetFilter: {}
CombatLogSetCurrentEntry: {}
CombatLogSetRetentionTime: {}
CombatTextSetActiveUnit: {}
CompleteLFGReadyCheck: {}
CompleteQuest: {}
ConfirmAcceptQuest: {}
ConfirmBarbersChoice: {}
ConfirmBinder: {}
ConfirmBindOnUse: {}
ConfirmLootRoll: {}
ConfirmLootSlot: {}
ConfirmNoRefundOnUse: {}
ConfirmOnUse: {}
ConfirmPetUnlearn: {}
ConfirmReadyCheck: {}
ConfirmTalentWipe: {}
ConsoleAddMessage: {}
ConsoleExec:
  inputs:
  - - name: command
      type: string
  outputs: {}
ConvertToParty: {}
ConvertToRaid: {}
CopyToClipboard: {}
coroutine.create:
  stdlib: coroutine.create
coroutine.resume:
  stdlib: coroutine.resume
coroutine.running:
  stdlib: coroutine.running
coroutine.status:
  stdlib: coroutine.status
coroutine.wrap:
  stdlib: coroutine.wrap
coroutine.yield:
  stdlib: coroutine.yield
cos:
  impl: cos
  nowrap: true
CraftIsEnchanting:
  inputs:
  - {}
  outputs:
  - type: boolean
CraftOnlyShowMakeable: {}
CreateFont:
  frameworks:
  - api
  impl: CreateFont
  inputs:
  - - name: name
      type: string
  outputs:
  - name: font
    type: table
CreateForbiddenFrame:
  frameworks:
  - api
  impl: CreateForbiddenFrame
CreateFrame:
  frameworks:
  - api
  impl: CreateFrame
CreateMacro: {}
CreateNewRaidProfile: {}
CursorCanGoInSlot:
  inputs:
  - - name: slot
      nilable: true
      type: number
  outputs:
  - name: value
    type: boolean
CursorHasItem: {}
CursorHasMacro: {}
CursorHasMoney: {}
CursorHasSpell: {}
date:
  stdlib: date
DeathRecap_GetEvents: {}
DeathRecap_HasEvents:
  inputs:
  - {}
  outputs:
  - type: boolean
debuglocals: {}
debugprofilestart: {}
debugprofilestop:
  impl: debugprofilestop
  inputs:
  - {}
  outputs:
  - type: number
debugstack:
  impl: debugstack
DeclineArenaTeam: {}
DeclineChannelInvite: {}
DeclineGroup: {}
DeclineGuild: {}
DeclineName: {}
DeclineQuest: {}
DeclineResurrect: {}
DeclineSpellConfirmationPrompt: {}
deg:
  alias: math.deg
DeleteCursorItem: {}
DeleteGMTicket: {}
DeleteInboxItem: {}
DeleteMacro:
  inputs:
  - - name: macroSlot
      type: number
  - - name: name
      type: string
  outputs: {}
DeleteRaidProfile: {}
DemoteAssistant: {}
DepositGuildBankMoney: {}
DescendStop:
  inputs:
  - {}
  outputs: {}
DestroyTotem: {}
DetectWowMouse: {}
difftime:
  stdlib: difftime
DisableAddOn:
  inputs:
  - - name: index
      type: number
  - - name: name
      type: string
    - name: character
      nilable: true
      type: string
  outputs: {}
DisableAllAddOns: {}
DisableSpellAutocast: {}
DismissCompanion: {}
Dismount:
  inputs:
  - {}
  outputs: {}
DisplayChannelOwner: {}
DoCraft: {}
DoEmote: {}
DoesCurrentLocaleSellExpansionLevels:
  inputs:
  - {}
  outputs:
  - name: regionSellsExpansions
    type: boolean
DoesItemContainSpec: {}
DoesSpellExist:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: boolean
DoesTemplateExist: {}
DoReadyCheck: {}
DoTradeSkill: {}
DropCursorMoney: {}
DropItemOnUnit: {}
DumpMovementCapture:
  inputs:
  - {}
  outputs: {}
EditMacro: {}
EjectPassengerFromSeat: {}
EnableAddOn:
  inputs:
  - - name: index
      type: number
  - - name: name
      type: string
    - name: character
      nilable: true
      type: string
  outputs: {}
EnableAllAddOns: {}
EnableSpellAutocast: {}
EndBoundTradeable: {}
EndRefund: {}
EnumerateFrames:
  frameworks:
  - api
  impl: EnumerateFrames
  inputs:
  - - name: frame
      nilable: true
      type: table
  outputs:
  - name: next
    nilable: true
    type: table
EnumerateServerChannels:
  inputs:
  - {}
EquipCursorItem: {}
EquipItemByName:
  inputs:
  - - name: item
      nilable: true
      type: string
  outputs: {}
EquipPendingItem: {}
error:
  stdlib: error
exp:
  alias: math.exp
ExpandAllFactionHeaders: {}
ExpandCraftSkillLine: {}
ExpandCurrencyList: {}
ExpandFactionHeader: {}
ExpandQuestHeader: {}
ExpandSkillHeader: {}
ExpandTradeSkillSubClass: {}
ExpandTrainerSkillLine:
  inputs:
  - - name: index
      type: number
  outputs: {}
FactionToggleAtWar: {}
fastrandom: {}
FillLocalizedClassList:
  impl: FillLocalizedClassList
  inputs:
  - - name: classTable
      type: table
    - name: isFemale
      nilable: true
      type: boolean
  outputs:
  - name: classTable
    type: table
  sqls:
  - cursor: FillLocalizedClassList
FindBaseSpellByID: {}
FindSpellBookSlotBySpellID:
  inputs:
  - - name: spellID
      type: number
  outputs:
  - name: slot
    type: number
FindSpellOverrideByID: {}
FlagTutorial: {}
FlashClientIcon: {}
FlipCameraYaw:
  inputs:
  - - name: angle
      type: number
  outputs: {}
floor:
  alias: math.floor
FocusUnit:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs: {}
FollowUnit: {}
forceinsecure: {}
ForceLogout: {}
ForceQuit: {}
ForfeitDuel: {}
format:
  alias: string.format
FrameXML_Debug: {}
frexp:
  alias: math.frexp
GameMovieFinished:
  inputs:
  - {}
  outputs: {}
gcinfo: {}
GetAbandonQuestItems: {}
GetAbandonQuestName: {}
GetAccountExpansionLevel:
  inputs:
  - {}
  outputs:
  - name: expansionLevel
    type: number
GetAchievementCategory: {}
GetAchievementComparisonInfo: {}
GetAchievementCriteriaInfo:
  inputs:
  - - name: achievementID
      type: number
    - name: criteriaIndex
      type: number
  outputs:
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
  - type: string
  - type: number
  - type: number
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
GetAchievementCriteriaInfoByID:
  inputs:
  - - name: achievementID
      type: number
    - name: criteriaID
      type: number
  outputs:
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
  - type: string
  - type: number
  - type: number
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
GetAchievementInfo:
  inputs:
  - - type: number
    - nilable: true
      type: number
  outputs:
  - type: number
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
  - type: number
  - type: string
  - type: number
  - type: number
  - type: string
  - type: boolean
  - type: boolean
  - type: string
  - type: boolean
GetAchievementLink: {}
GetAchievementNumCriteria:
  inputs:
  - - name: achievementID
      type: number
  outputs:
  - type: number
GetAchievementNumRewards: {}
GetAchievementReward: {}
GetActionAutocast: {}
GetActionBarPage:
  inputs:
  - {}
  outputs:
  - type: number
GetActionBarToggles:
  inputs:
  - {}
  outputs:
  - name: bottomLeftState
    type: boolean
  - name: bottomRightState
    type: boolean
  - name: sideRightState
    type: boolean
  - name: sideRight2State
    type: boolean
GetActionCharges: {}
GetActionCooldown:
  inputs:
  - - name: action
      type: number
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
  - name: enable
    type: number
  - name: modRate
    type: number
GetActionCount:
  outputs:
  - type: number
GetActionInfo: {}
GetActionLossOfControlCooldown:
  inputs:
  - - type: number
  outputs:
  - type: number
  - type: number
GetActionText: {}
GetActionTexture: {}
GetActiveLevel: {}
GetActiveLootRollIDs:
  outputs:
  - type: table
GetActiveTalentGroup:
  inputs:
  - - default: false
      name: isInspect
      type: boolean
  outputs:
  - name: activeSpec
    type: number
GetActiveTitle:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: title
    type: string
GetAddOnCPUUsage: {}
GetAddOnDependencies: {}
GetAddOnEnableState:
  impl: GetAddOnEnableState
  inputs:
  - - name: character
      nilable: true
      type: string
    - name: addonIndex
      type: number
  - - name: character
      nilable: true
      type: string
    - name: addonName
      type: string
  outputs:
  - name: enabledState
    type: number
  states:
  - Addons
GetAddOnInfo:
  impl: GetAddOnInfo
  inputs:
  - - name: index
      type: number
  - - name: name
      type: string
  outputs:
  - name: name
    type: string
  - name: title
    nilable: true
    type: string
  - name: notes
    nilable: true
    type: string
  - name: loadable
    type: boolean
  - name: reason
    nilable: true
    type: string
  - name: security
    type: string
  - name: newVersion
    type: boolean
  states:
  - Addons
GetAddOnMemoryUsage:
  inputs:
  - - name: index
      type: number
  - - name: name
      type: string
  outputs:
  - name: memoryKb
    type: number
GetAddOnMetadata:
  impl: GetAddOnMetadata
  inputs:
  - - name: addonIndex
      type: number
    - name: field
      type: string
  - - name: addonName
      type: string
    - name: field
      type: string
  outputs:
  - name: value
    nilable: true
    type: string
  states:
  - Addons
GetAddOnOptionalDependencies: {}
GetAllowLowLevelRaid: {}
GetAlternativeDefaultLanguage: {}
GetAreaSpiritHealerTime:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetArenaTeam: {}
GetArenaTeamGdfInfo: {}
GetArenaTeamIndexBySize: {}
GetArenaTeamRosterInfo: {}
GetArenaTeamRosterSelection: {}
GetArenaTeamRosterShowOffline: {}
GetArmorPenetration:
  inputs:
  - {}
  outputs:
  - type: number
GetAtlasInfo: {}
GetAttackPowerForStat:
  inputs:
  - - type: number
    - type: number
  outputs:
  - type: number
GetAuctionDeposit:
  outputs:
  - type: number
GetAuctionHouseDepositRate: {}
GetAuctionItemBattlePetInfo: {}
GetAuctionItemInfo:
  inputs:
  - - name: type
      type: string
    - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: count
    type: number
  - name: quality
    type: number
  - name: canUse
    type: number
  - name: level
    type: number
  - name: levelColHeader
    type: string
  - name: minBid
    type: number
  - name: minIncrement
    type: number
  - name: buyoutPrice
    type: number
  - name: bidAmount
    type: number
  - name: highBidder
    nilable: true
    type: string
  - name: bidderFullName
    nilable: true
    type: string
  - name: owner
    type: string
  - name: ownerFullName
    nilable: true
    type: string
  - name: saleStatus
    type: number
  - name: itemId
    type: number
  - name: hasAllInfo
    type: boolean
GetAuctionItemLink:
  inputs:
  - - name: view
      type: string
    - name: index
      type: number
  outputs:
  - name: itemLink
    stub: '|cffffffff|Hitem:2592:::::::::::::::::|h[Wool Cloth]|h|r'
    type: string
GetAuctionItemSubClasses: {}
GetAuctionItemTimeLeft:
  inputs:
  - - name: type
      type: string
    - name: index
      type: number
  outputs:
  - name: timeLeft
    type: number
GetAuctionSellItemInfo:
  inputs:
  - {}
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: count
    type: number
  - name: quality
    type: number
  - name: canUse
    type: boolean
  - name: price
    type: number
  - name: pricePerUnit
    type: number
  - name: stackCount
    type: number
  - name: totalCount
    type: number
  - name: itemID
    type: number
GetAuctionSort:
  inputs:
  - - name: type
      type: string
  outputs:
  - name: column
    type: string
  - name: reversed
    type: boolean
GetAutoCompletePresenceID: {}
GetAutoCompleteRealms:
  inputs:
  - - name: tableNames
      nilable: true
      type: table
  outputs:
  - name: tableNames
    type: table
GetAutoCompleteResults: {}
GetAutoDeclineGuildInvites:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
GetAvailableBandwidth:
  inputs:
  - {}
  outputs:
  - type: number
GetAvailableLevel: {}
GetAvailableLocales: {}
GetAvailableTitle:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: title
    type: string
GetBackgroundLoadingStatus: {}
GetBackpackCurrencyInfo: {}
GetBankSlotCost:
  inputs:
  - - name: numSlots
      nilable: true
      type: number
  outputs:
  - name: cost
    type: number
GetBattlefieldEstimatedWaitTime: {}
GetBattlefieldFlagPosition: {}
GetBattlefieldInstanceExpiration: {}
GetBattlefieldInstanceInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: instanceID
    type: number
GetBattlefieldInstanceRunTime: {}
GetBattlefieldMapIconScale: {}
GetBattlefieldPortExpiration:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: expiration
    type: number
GetBattlefieldScore: {}
GetBattlefieldStatData: {}
GetBattlefieldStatInfo: {}
GetBattlefieldStatus:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: queueStatus
    type: string
  - name: queueMapName
    type: string
  - name: queueInstanceID
    type: number
GetBattlefieldTeamInfo: {}
GetBattlefieldTimeWaited: {}
GetBattlefieldWinner: {}
GetBattlegroundInfo:
  inputs:
  - {}
  outputs:
  - name: localizedName
    type: string
  - name: canEnter
    type: boolean
  - name: isHoliday
    type: boolean
  - name: isRandom
    type: boolean
  - name: battleGroundID
    type: number
  - name: mapDescription
    type: string
  - name: bgMapID
    type: number
  - name: maxPlayers
    type: number
  - name: gameType
    type: number
  - name: iconTexture
    type: number
  - name: shortDescription
    type: string
  - name: longDescription
    type: string
GetBattlegroundPoints: {}
GetBidderAuctionItems: {}
GetBillingTimeRested: {}
GetBinding:
  comment: trailing string... with keybinding values
  inputs:
  - - name: index
      type: number
  outputs:
  - name: command
    stub: MOVEFORWARD
    type: string
  - name: category
    stub: BINDING_HEADER_MOVEMENT
    type: string
GetBindingAction: {}
GetBindingByKey: {}
GetBindingKey: {}
GetBindingText:
  outputs:
  - type: string
GetBindLocation: {}
GetBlockChance: {}
GetBonusBarIndex: {}
GetBonusBarOffset: {}
GetBuildInfo:
  frameworks:
  - datalua
  impl: GetBuildInfo
  inputs:
  - {}
  outputs:
  - name: version
    type: string
  - name: build
    type: string
  - name: date
    type: string
  - name: tocversion
    type: number
GetBuybackItemInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: price
    type: number
  - name: quantity
    type: number
  - name: numAvailable
    type: number
  - name: isUsable
    type: boolean
GetBuybackItemLink:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: itemLink
    type: string
GetCallPetSpellInfo: {}
GetCameraZoom: {}
GetCategoryAchievementPoints:
  inputs:
  - - name: categoryID
      type: number
    - name: includeSubCategories
      type: boolean
  outputs:
  - name: value
    type: number
GetCategoryInfo:
  inputs:
  - - type: number
  outputs:
  - type: string
  - type: number
  - type: number
GetCategoryList:
  outputs:
  - type: table
GetCategoryNumAchievements: {}
GetCemeteryPreference: {}
GetChannelDisplayInfo:
  inputs:
  - - name: id
      type: string
  outputs:
  - name: name
    type: string
  - name: header
    type: boolean
  - name: collapsed
    type: boolean
  - name: channelNumber
    type: number
  - name: count
    type: number
  - name: active
    type: boolean
  - name: category
    type: string
  - name: channelType
    type: string
GetChannelList: {}
GetChannelName: {}
GetChatTypeIndex:
  outputs:
  - type: number
GetChatWindowChannels: {}
GetChatWindowInfo:
  impl: GetChatWindowInfo
  inputs:
  - - name: id
      type: number
  outputs:
  - name: name
    type: string
  - name: fontSize
    type: number
  - name: r
    type: number
  - name: g
    type: number
  - name: b
    type: number
  - name: alpha
    type: number
  - name: shown
    type: boolean
  - name: locked
    type: boolean
  - name: docked
    nilable: true
    type: number
  - name: uninteractable
    type: boolean
GetChatWindowMessages:
  frameworks:
  - env
  impl: GetChatWindowMessages
  inputs:
  - - name: index
      type: number
GetChatWindowSavedDimensions: {}
GetChatWindowSavedPosition: {}
GetClassicExpansionLevel:
  outputs:
  - type: number
GetClassInfo:
  impl: GetClassInfo
  inputs:
  - - name: classIndex
      type: number
  outputs:
  - name: className
    type: string
  - name: classFile
    type: string
  - name: classID
    type: number
  sqls:
  - lookup: GetClassInfo
GetClickFrame:
  frameworks:
  - env
  impl: GetClickFrame
  inputs:
  - - type: string
  outputs:
  - name: frame
    nilable: true
    type: table
GetClientDisplayExpansionLevel:
  inputs:
  - {}
  outputs:
  - name: expansionLevel
    type: number
GetCoinIcon: {}
GetCoinText:
  inputs:
  - - name: money
      type: number
    - name: separator
      nilable: true
      type: string
  outputs:
  - name: formattedAmount
    type: string
GetCoinTextureString:
  inputs:
  - - name: amount
      type: number
    - name: fontHeight
      nilable: true
      type: number
  outputs:
  - name: formattedAmount
    type: string
GetCombatRating:
  inputs:
  - - type: number
  outputs:
  - type: number
GetCombatRatingBonus:
  inputs:
  - - type: number
  outputs:
  - type: number
GetComboPoints:
  outputs:
  - stub: 0
    type: number
GetCompanionCooldown: {}
GetCompanionInfo: {}
GetComparisonAchievementPoints: {}
GetComparisonCategoryNumAchievements: {}
GetComparisonStatistic: {}
GetCorpseRecoveryDelay: {}
GetCraftButtonToken:
  inputs:
  - {}
  outputs:
  - type: string
GetCraftCooldown:
  inputs:
  - - name: id
      type: number
  outputs:
  - name: craftCooldownTime
    nilable: true
    type: number
GetCraftDescription:
  inputs:
  - - name: id
      type: number
  outputs:
  - type: string
GetCraftDisplaySkillLine:
  inputs:
  - {}
  outputs:
  - name: name
    type: string
  - name: rank
    type: number
  - name: maxRank
    type: number
GetCraftFilter: {}
GetCraftIcon:
  inputs:
  - - name: id
      type: number
  outputs:
  - type: number
GetCraftInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: craftName
    type: string
  - name: craftSubSpellName
    type: string
  - name: craftType
    stub: optimal
    type: string
  - name: numAvailable
    type: number
  - name: isExpanded
    type: boolean
  - name: trainingPointCost
    type: number
  - name: requiredLevel
    type: number
GetCraftItemLink: {}
GetCraftName:
  inputs:
  - {}
  outputs:
  - type: string
GetCraftNumMade:
  inputs:
  - - name: id
      type: number
  outputs:
  - name: minMade
    type: number
  - name: maxMade
    type: number
GetCraftNumReagents:
  inputs:
  - - name: id
      type: number
  outputs:
  - name: numReagents
    type: number
GetCraftReagentInfo:
  inputs:
  - - name: id
      type: number
    - name: reagentIndex
      type: number
  outputs:
  - name: reagentName
    type: string
  - name: reagentTexture
    type: number
  - name: reagentCount
    type: number
  - name: playerReagentCount
    type: number
GetCraftReagentItemLink: {}
GetCraftRecipeLink: {}
GetCraftSelectionIndex:
  inputs:
  - {}
  outputs:
  - type: number
GetCraftSkillLine: {}
GetCraftSlots: {}
GetCraftSpellFocus:
  inputs:
  - - name: id
      type: number
GetCritChance:
  inputs:
  - {}
  outputs:
  - type: number
GetCritChanceFromAgility:
  inputs:
  - - type: string
  outputs:
  - type: number
GetCriteriaSpell: {}
GetCurrencyInfo:
  inputs:
  - - name: currencyID
      type: number
  outputs:
  - name: name
    type: string
  - name: quantity
    type: number
  - name: icon
    type: string
  - name: earnedThisWeek
    type: number
  - name: weeklyMax
    type: number
  - name: maxQuantity
    type: number
  - name: discovered
    type: number
  - name: rarity
    type: number
GetCurrencyLink: {}
GetCurrencyListInfo: {}
GetCurrencyListSize:
  inputs:
  - {}
  outputs:
  - name: currencyListSize
    type: number
GetCurrentArenaSeason:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetCurrentArenaSeasonUsesTeams: {}
GetCurrentBindingSet:
  inputs:
  - {}
  outputs:
  - type: number
GetCurrentCombatTextEventInfo: {}
GetCurrentEventID: {}
GetCurrentGraphicsSetting: {}
GetCurrentGuildBankTab:
  outputs:
  - type: number
GetCurrentKeyBoardFocus: {}
GetCurrentRegion:
  outputs:
  - type: number
GetCurrentRegionName:
  inputs:
  - {}
  outputs:
  - name: regionName
    type: string
GetCurrentResolution:
  inputs:
  - {}
  outputs:
  - type: number
GetCurrentScaledResolution:
  inputs:
  - {}
  outputs:
  - name: width
    stub: 1024
    type: number
  - name: height
    stub: 768
    type: number
GetCurrentTitle: {}
GetCursorDelta: {}
GetCursorInfo: {}
GetCursorMoney:
  outputs:
  - type: number
GetCursorPosition:
  inputs:
  - {}
  outputs:
  - name: x
    type: number
  - name: y
    type: number
GetCVarInfo: {}
GetCVarSettingValidity: {}
GetDailyQuestsCompleted:
  outputs:
  - type: number
GetDeathRecapLink: {}
GetDefaultGraphicsQuality: {}
GetDefaultLanguage:
  inputs:
  - {}
  outputs:
  - name: language
    stub: Common
    type: string
  - name: languageID
    stub: 7
    type: number
GetDefaultScale:
  outputs:
  - type: number
GetDefaultVideoOption: {}
GetDefaultVideoOptions: {}
GetDefaultVideoQualityOption: {}
GetDemotionRank: {}
GetDetailedItemLevelInfo: {}
GetDifficultyInfo:
  inputs:
  - - type: number
  outputs:
  - type: string
  - type: string
  - type: boolean
  - type: boolean
  - type: boolean
  - type: boolean
  - type: number
GetDodgeChance: {}
GetDodgeChanceFromAttribute: {}
GetDownloadedPercentage:
  inputs:
  - {}
  outputs:
  - type: number
GetDungeonDifficultyID:
  inputs:
  - {}
  outputs:
  - type: number
GetDungeonInfo: {}
geterrorhandler:
  stdlib: geterrorhandler
GetEventCPUUsage: {}
GetEventTime: {}
GetExistingSocketInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: gemMatchesSocket
    type: boolean
GetExistingSocketLink: {}
GetExpansionDisplayInfo:
  inputs:
  - - name: expansionLevel
      type: number
    - name: desiredReleaseType
      type: number
  outputs:
  - name: info
    nilable: true
    type: ExpansionDisplayInfo
GetExpansionLevel:
  inputs:
  - {}
  outputs:
  - name: expansionLevel
    type: number
GetExpansionTrialInfo:
  inputs:
  - {}
  outputs:
  - name: isExpansionTrialAccount
    type: boolean
  - name: expansionTrialRemainingSeconds
    nilable: true
    type: number
GetExpertise:
  inputs:
  - {}
  outputs:
  - type: number
  - type: number
GetExpertisePercent:
  inputs:
  - {}
  outputs:
  - type: number
  - type: number
GetFactionInfo:
  inputs:
  - - name: factionIndex
      type: number
  outputs:
  - name: name
    type: string
  - name: description
    type: string
  - name: standingID
    type: number
  - name: barMin
    type: number
  - name: barMax
    type: number
  - name: barValue
    type: number
  - name: atWarWith
    type: boolean
  - name: canToggleAtWar
    type: boolean
  - name: isHeader
    type: boolean
  - name: isCollapsed
    type: boolean
  - name: hasRep
    type: boolean
  - name: isWatched
    type: boolean
  - name: isChild
    type: boolean
  - name: factionID
    type: number
  - name: hasBonusRepGain
    type: boolean
  - name: canSetInteractive
    type: boolean
GetFactionInfoByID:
  inputs:
  - - type: number
  outputs:
  - name: name
    type: string
  - name: description
    type: string
  - name: standingID
    type: number
  - name: barMin
    type: number
  - name: barMax
    type: number
  - name: barValue
    type: number
  - name: atWarWith
    type: boolean
  - name: canToggleAtWar
    type: boolean
  - name: isHeader
    type: boolean
  - name: isCollapsed
    type: boolean
  - name: hasRep
    type: boolean
  - name: isWatched
    type: boolean
  - name: isChild
    type: boolean
  - name: factionID
    type: number
  - name: hasBonusRepGain
    type: boolean
  - name: canSetInteractive
    type: boolean
getfenv:
  frameworks:
  - env
  impl: getfenv
GetFileIDFromPath: {}
GetFileStreamingStatus:
  inputs:
  - {}
  outputs:
  - name: status
    stub: 0
    type: number
GetFirstBagBankSlotIndex: {}
GetFirstTradeSkill:
  inputs:
  - {}
  outputs:
  - type: number
GetFontInfo: {}
GetFonts: {}
GetFrameCPUUsage: {}
GetFramerate:
  inputs:
  - {}
  outputs:
  - type: number
GetFramesRegisteredForEvent: {}
GetFunctionCPUUsage: {}
GetGameMessageInfo: {}
GetGameTime:
  inputs:
  - {}
  outputs:
  - name: hour
    type: number
  - name: minute
    type: number
GetGlyphLink: {}
GetGlyphSocketInfo: {}
GetGMStatus: {}
GetGMTicket: {}
GetGraphicsAPIs:
  comment: actually returns a string dotdotdot, not just a string
  inputs:
  - {}
  outputs:
  - stub: opengl
    type: string
GetGraphicsCVarOffsetForCVar: {}
GetGraphicsCVarOffsetForUI: {}
GetGraphicsDropdownIndexByMasterIndex: {}
GetGreetingText:
  inputs:
  - {}
  outputs:
  - name: greetingText
    type: string
GetGroupMemberCounts:
  inputs:
  - {}
  outputs:
  - name: data
    stub:
      DAMAGER: 3
      HEALER: 1
      NOROLE: 0
      TANK: 1
    type: table
GetGroupPreviewTalentPointsSpent:
  inputs:
  - - name: isPet
      type: boolean
    - name: talentGroup
      type: number
  outputs:
  - name: talentPoints
    type: number
GetGuildBankBonusDepositMoney: {}
GetGuildBankItemInfo:
  inputs:
  - - name: tab
      type: number
    - name: index
      type: number
  outputs:
  - name: texture
    type: number
  - name: itemCount
    type: number
  - name: locked
    type: boolean
  - name: isFiltered
    type: boolean
  - name: quality
    type: number
GetGuildBankItemLink:
  inputs:
  - - name: tab
      type: number
    - name: index
      type: number
  outputs:
  - name: itemLink
    type: string
GetGuildBankMoney:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetGuildBankMoneyTransaction:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: type
    stub: deposit
    type: string
  - name: user
    type: string
  - name: amount
    type: number
  - name: years
    type: number
  - name: months
    type: number
  - name: days
    type: number
  - name: hours
    type: number
GetGuildBankTabCost: {}
GetGuildBankTabInfo: {}
GetGuildBankTabPermissions: {}
GetGuildBankText:
  inputs:
  - - name: tabIndex
      type: number
  outputs:
  - name: text
    type: string
GetGuildBankTransaction: {}
GetGuildBankWithdrawGoldLimit: {}
GetGuildBankWithdrawMoney:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetGuildCharterCost: {}
GetGuildEventInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: type
    type: number
  - name: player1
    type: string
  - name: player2
    type: string
  - name: rank
    type: number
  - name: year
    type: number
  - name: month
    type: number
  - name: day
    type: number
  - name: hour
    type: number
GetGuildFactionGroup: {}
GetGuildInfo:
  inputs:
  - - name: unit
      type: string
  outputs:
  - name: guildName
    type: string
  - name: guildRankName
    type: string
  - name: guildRankIndex
    type: number
GetGuildInfoText:
  inputs:
  - {}
  outputs:
  - name: text
    type: string
GetGuildLogoInfo: {}
GetGuildRenameRequired: {}
GetGuildRosterInfo:
  inputs:
  - - name: guildIndex
      type: number
  outputs:
  - name: name
    type: string
  - name: rank
    type: string
  - name: rankIndex
    stub: 0
    type: number
  - name: class
    type: string
  - name: zone
    type: string
  - name: officerNote
    type: string
  - name: isOnline
    type: boolean
  - name: isAway
    type: boolean
GetGuildRosterLastOnline: {}
GetGuildRosterMOTD:
  outputs:
  - type: string
GetGuildRosterSelection:
  inputs:
  - {}
  outputs:
  - name: memberIndex
    type: number
GetGuildRosterShowOffline:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
GetGuildTabardFiles: {}
GetHaste:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetHitModifier: {}
GetHomePartyInfo: {}
GetInboxHeaderInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: packageIcon
    type: string
  - name: stationeryIcon
    type: string
  - name: sender
    type: string
  - name: subject
    type: string
  - name: money
    type: number
  - name: codAmount
    type: number
  - name: daysLeft
    type: number
  - name: hasItem
    nilable: true
    type: number
  - name: wasRead
    type: oneornil
  - name: wasReturned
    type: oneornil
  - name: textCreated
    type: oneornil
  - name: canReply
    type: oneornil
  - name: isGM
    type: oneornil
GetInboxInvoiceInfo: {}
GetInboxItem: {}
GetInboxItemLink:
  inputs:
  - - name: index
      type: number
    - name: attachmentIndex
      type: number
  outputs:
  - name: itemLink
    type: string
GetInboxNumItems:
  inputs:
  - {}
  outputs:
  - name: numItems
    type: number
  - name: totalItems
    type: number
GetInboxText: {}
GetInspectArenaData: {}
GetInspectArenaTeamData:
  inputs:
  - - name: value.index
      type: number
  outputs:
  - name: teamName
    type: number
  - name: teamSize
    type: number
  - name: teamRating
    type: number
  - name: teamPlayed
    type: number
  - name: teamWins
    type: number
  - name: playerPlayed
    type: number
  - name: playerRating
    type: number
  - name: background.r
    type: number
  - name: background.g
    type: number
  - name: background.b
    type: number
  - name: emblem
    type: number
  - name: emblemColor.r
    type: number
  - name: emblemColor.g
    type: number
  - name: emblemColor.b
    type: number
  - name: border
    type: number
  - name: borderColor.r
    type: number
  - name: borderColor.g
    type: number
  - name: borderColor.b
    type: number
GetInspectHonorData:
  inputs:
  - {}
  outputs:
  - name: sessionHK
    type: number
  - name: sessionDK
    type: number
  - name: yesterdayHK
    type: number
  - name: yesterdayHonor
    type: number
  - name: thisweekHK
    type: number
  - name: thisweekHonor
    type: number
  - name: lastweekHK
    type: number
  - name: lastweekHonor
    type: number
  - name: lastweekStanding
    type: number
  - name: lifetimeHK
    type: number
  - name: lifetimeDK
    type: number
  - name: lifetimeRank
    type: number
GetInspectPVPRankProgress:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetInstanceBootTimeRemaining: {}
GetInstanceInfo:
  inputs:
  - {}
  outputs:
  - name: name
    type: string
  - name: instanceType
    type: string
  - name: difficultyID
    type: number
  - name: difficultyName
    type: string
  - name: maxPlayers
    type: number
  - name: dynamicDifficulty
    type: number
  - name: isDynamic
    type: boolean
  - name: instanceID
    type: number
  - name: instanceGroupSize
    type: number
  - name: lfgDungeonID
    nilable: true
    type: number
GetInstanceLockTimeRemaining:
  inputs:
  - {}
  outputs:
  - name: lockTimeLeft
    type: number
  - name: isPreviousInstance
    type: boolean
  - name: encountersTotal
    type: number
  - name: encountersComplete
    type: number
GetInstanceLockTimeRemainingEncounter: {}
GetInventoryAlertStatus: {}
GetInventoryItemBroken: {}
GetInventoryItemCooldown:
  inputs:
  - - name: unit
      type: string
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
  - name: enable
    type: number
GetInventoryItemCount:
  inputs:
  - - type: string
    - type: number
  outputs:
  - type: number
GetInventoryItemDurability: {}
GetInventoryItemEquippedUnusable: {}
GetInventoryItemGems: {}
GetInventoryItemID: {}
GetInventoryItemLink: {}
GetInventoryItemQuality: {}
GetInventoryItemsForSlot: {}
GetInventoryItemTexture: {}
GetInventorySlotInfo:
  impl: GetInventorySlotInfo
  inputs:
  - - type: string
  outputs:
  - name: slotId
    type: number
  - name: texture
    type: number
  sqls:
  - lookup: GetInventorySlotInfo
GetInviteConfirmationInfo: {}
GetInviteReferralInfo: {}
GetItemChildInfo: {}
GetItemClassInfo:
  inputs:
  - - type: number
  outputs:
  - name: name
    type: string
GetItemCount:
  outputs:
  - type: number
GetItemCreationContext: {}
GetItemFamily: {}
GetItemGem: {}
GetItemIcon:
  inputs:
  - - nilable: true
      type: number
  outputs:
  - type: number
GetItemInfo: {}
GetItemInfoInstant:
  inputs:
  - - name: itemInfo
      type: string
  outputs:
  - name: itemID
    type: number
  - name: itemType
    type: string
  - name: itemSubType
    type: string
  - name: itemEquipLoc
    type: string
  - name: icon
    type: number
  - name: classID
    type: number
  - name: subclassID
    type: number
GetItemInventorySlotInfo:
  inputs:
  - - name: inventoryType
      type: number
  outputs:
  - name: name
    stub: someNonEmptyString
    type: string
GetItemQualityColor:
  impl: GetItemQualityColor
  inputs:
  - - type: number
  outputs:
  - name: r
    type: number
  - name: g
    type: number
  - name: b
    type: number
  - name: hex
    type: string
GetItemSetInfo: {}
GetItemSpecInfo: {}
GetItemSpell: {}
GetItemStatDelta: {}
GetItemStats: {}
GetItemSubClassInfo:
  inputs:
  - - name: classID
      type: number
    - name: subClassID
      type: number
  outputs:
  - name: name
    stub: someNonEmptyString
    type: string
  - name: isArmorType
    type: boolean
GetItemUniqueness: {}
GetLanguageByIndex: {}
GetLatestCompletedAchievements: {}
GetLatestCompletedComparisonAchievements: {}
GetLatestThreeSenders: {}
GetLatestUpdatedComparisonStats: {}
GetLatestUpdatedStats: {}
GetLegacyRaidDifficultyID:
  inputs:
  - {}
  outputs:
  - type: number
GetLocale:
  inputs:
  - {}
  outputs:
  - name: locale
    stub: enUS
    type: string
GetLocalGameTime: {}
GetLooseMacroIcons:
  inputs:
  - - name: iconTable
      nilable: true
      type: table
  outputs: {}
GetLooseMacroItemIcons: {}
GetLootInfo: {}
GetLootMethod:
  inputs:
  - {}
  outputs:
  - name: lootMethod
    stub: freeforall
    type: string
  - name: partyMaster
    type: number
  - name: raidMaster
    type: number
GetLootRollItemInfo:
  inputs:
  - - name: rollID
      type: number
  outputs:
  - name: texture
    type: string
  - name: name
    type: string
  - name: count
    type: number
  - name: quality
    type: number
  - name: bindOnPickUp
    type: boolean
  - name: canNeed
    type: boolean
  - name: canGreed
    type: boolean
  - name: canDisenchant
    type: boolean
  - name: reasonNeed
    type: number
  - name: reasonGreed
    type: number
  - name: reasonDisenchant
    type: number
  - name: deSkillRequired
    type: number
GetLootRollItemLink: {}
GetLootRollTimeLeft: {}
GetLootSlotInfo:
  inputs:
  - - type: number
  outputs:
  - type: string
  - type: string
  - type: number
  - type: number
  - type: number
  - type: boolean
  - type: boolean
  - type: number
  - type: boolean
GetLootSlotLink: {}
GetLootSlotType:
  inputs:
  - - name: slotIndex
      type: number
  outputs:
  - name: slotType
    type: number
GetLootSourceInfo: {}
GetLootThreshold:
  outputs:
  - type: number
GetMacroBody: {}
GetMacroIcons:
  inputs:
  - - name: iconTable
      nilable: true
      type: table
  outputs:
  - name: iconTable
    type: table
GetMacroIndexByName:
  inputs:
  - - name: name
      type: string
  outputs:
  - name: macroSlot
    type: number
GetMacroInfo:
  inputs:
  - - name: macroSlot
      type: number
  - - name: name
      type: string
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: body
    type: string
GetMacroItem: {}
GetMacroItemIcons: {}
GetMacroSpell: {}
GetManaRegen: {}
GetMasterLootCandidate:
  inputs:
  - - name: slot
      type: number
    - name: index
      type: number
  outputs:
  - name: candidate
    type: string
GetMaxBattlefieldID:
  outputs:
  - type: number
GetMaxCombatRatingBonus: {}
GetMaxDailyQuests:
  outputs:
  - type: number
GetMaximumExpansionLevel:
  inputs:
  - {}
  outputs:
  - name: expansionLevel
    type: number
GetMaxLevelForExpansionLevel:
  inputs:
  - - name: expansionLevel
      type: number
  outputs:
  - name: maxLevel
    type: number
GetMaxNumCUFProfiles: {}
GetMaxPlayerLevel:
  outputs:
  - type: number
GetMaxRenderScale:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetMaxRewardCurrencies:
  inputs:
  - {}
  outputs:
  - name: maxRewardCurrencies
    type: number
GetMaxSpellStartRecoveryOffset: {}
GetMeleeHaste: {}
GetMerchantItemCostInfo: {}
GetMerchantItemCostItem: {}
GetMerchantItemID:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: itemID
    type: number
GetMerchantItemInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: number
  - name: texture
    type: string
  - name: price
    type: number
  - name: quantity
    type: number
  - name: numAvailable
    type: number
  - name: isPurchasable
    type: oneornil
  - name: isUsable
    type: oneornil
  - name: extendedCost
    type: oneornil
  - name: currencyID
    nilable: true
    type: number
GetMerchantItemLink:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: itemLink
    type: string
GetMerchantItemMaxStack: {}
GetMerchantNumItems:
  inputs:
  - {}
  outputs:
  - name: numMerchantItems
    type: number
getmetatable:
  stdlib: getmetatable
GetMinimapZoneText:
  inputs:
  - {}
  outputs:
  - type: string
GetMinimumExpansionLevel:
  inputs:
  - {}
  outputs:
  - name: expansionLevel
    type: number
GetMinRenderScale:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetMirrorTimerInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: timer
    stub: UNKNOWN
    type: string
  - name: value
    type: number
  - name: maxValue
    type: number
  - name: scale
    type: number
  - name: paused
    type: number
  - name: label
    type: string
GetMirrorTimerProgress: {}
GetModifiedClick: {}
GetModifiedClickAction: {}
GetMoney:
  outputs:
  - type: number
GetMonitorAspectRatio: {}
GetMonitorCount: {}
GetMonitorName: {}
GetMouseButtonClicked: {}
GetMouseButtonName: {}
GetMouseClickFocus: {}
GetMouseFocus: {}
GetMouseMotionFocus: {}
GetMovieDownloadProgress: {}
GetMultiCastBarIndex:
  outputs:
  - type: number
GetMultiCastTotemSpells: {}
getn:
  alias: table.getn
GetNetIpTypes: {}
GetNetStats:
  inputs:
  - {}
  outputs:
  - name: bandwidthIn
    type: number
  - name: bandwidthOut
    type: number
  - name: latencyHome
    type: number
  - name: latencyWorld
    type: number
GetNewSocketInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: gemMatchesSocket
    type: boolean
GetNewSocketLink: {}
GetNextAchievement: {}
GetNextCompleatedTutorial: {}
GetNextPendingInviteConfirmation:
  inputs:
  - {}
  outputs:
  - name: firstInvite
    nilable: true
    type: number
GetNextStableSlotCost: {}
GetNormalizedRealmName:
  inputs:
  - {}
  outputs:
  - name: normalizedRealmName
    type: string
GetNumActiveQuests:
  inputs:
  - {}
  outputs:
  - name: numActiveQuests
    type: number
GetNumAddOns:
  impl: GetNumAddOns
  inputs:
  - {}
  outputs:
  - type: number
  states:
  - Addons
GetNumArenaOpponents:
  outputs:
  - type: number
GetNumArenaTeamMembers: {}
GetNumAuctionItems:
  inputs:
  - - name: list
      type: string
  outputs:
  - name: batch
    type: number
  - name: count
    type: number
GetNumAvailableQuests:
  inputs:
  - {}
  outputs:
  - name: numAvailableQuests
    type: number
GetNumBankSlots:
  inputs:
  - {}
  outputs:
  - type: number
  - type: oneornil
GetNumBattlefieldFlagPositions:
  outputs:
  - type: number
GetNumBattlefields:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetNumBattlefieldScores:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetNumBattlefieldStats: {}
GetNumBattlegroundTypes:
  outputs:
  - type: number
GetNumBindings:
  outputs:
  - type: number
GetNumBuybackItems:
  inputs:
  - {}
  outputs:
  - name: numBuybackItems
    type: number
GetNumChannelMembers: {}
GetNumClasses:
  outputs:
  - type: number
GetNumCompanions:
  inputs:
  - - name: type
      type: string
  outputs:
  - name: count
    type: number
GetNumComparisonCompletedAchievements: {}
GetNumCompletedAchievements:
  inputs:
  - - name: forGuild
      nilable: true
      type: boolean
  outputs:
  - name: numAchievements
    type: number
  - name: numCompleted
    type: number
GetNumCrafts:
  inputs:
  - {}
  outputs:
  - type: number
GetNumDeclensionSets: {}
GetNumDisplayChannels:
  inputs:
  - {}
  outputs:
  - type: number
GetNumExpansions:
  inputs:
  - {}
  outputs:
  - name: numExpansions
    type: number
GetNumFactions:
  outputs:
  - name: numFactions
    type: number
GetNumFrames: {}
GetNumGlyphSockets:
  inputs:
  - {}
  outputs:
  - name: numGlyphSockets
    type: number
GetNumGroupChannels: {}
GetNumGroupMembers:
  outputs:
  - type: number
GetNumGuildBankMoneyTransactions:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetNumGuildBankTabs:
  outputs:
  - type: number
GetNumGuildBankTransactions: {}
GetNumGuildEvents:
  inputs:
  - {}
  outputs:
  - name: numEvents
    type: number
GetNumGuildMembers:
  inputs:
  - {}
  outputs:
  - name: totalMembers
    type: number
  - name: onlineMembers
    type: number
  - name: onlineAndMobileMembers
    type: number
GetNumLanguages:
  outputs:
  - type: number
GetNumLootItems:
  outputs:
  - type: number
GetNumMacros:
  inputs:
  - {}
  outputs:
  - name: global
    type: number
  - name: perChar
    type: number
GetNumMembersInRank: {}
GetNumModifiedClickActions: {}
GetNumPetitionNames:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetNumPrimaryProfessions: {}
GetNumQuestChoices:
  inputs:
  - {}
  outputs:
  - name: numChoices
    type: number
GetNumQuestCurrencies:
  inputs:
  - {}
  outputs:
  - name: numQuestCurrencies
    type: number
GetNumQuestItemDrops: {}
GetNumQuestItems:
  inputs:
  - {}
  outputs:
  - name: numRequiredItems
    type: number
GetNumQuestLeaderBoards:
  inputs:
  - - name: questLogIndex
      nilable: true
      type: number
  outputs:
  - name: numObjectives
    type: number
GetNumQuestLogChoices:
  outputs:
  - type: number
GetNumQuestLogEntries:
  inputs:
  - {}
  outputs:
  - name: numEntries
    type: number
  - name: numQuests
    type: number
GetNumQuestLogRewardCurrencies: {}
GetNumQuestLogRewards:
  outputs:
  - type: number
GetNumQuestLogRewardSpells:
  outputs:
  - type: number
GetNumQuestRewards:
  inputs:
  - {}
  outputs:
  - name: numRewards
    type: number
GetNumQuestWatches:
  inputs:
  - {}
  outputs:
  - type: number
GetNumRaidProfiles: {}
GetNumRewardCurrencies:
  inputs:
  - {}
  outputs:
  - name: numQuestCurrencies
    type: number
GetNumRewardSpells:
  inputs:
  - {}
  outputs:
  - name: numRewardSpells
    type: number
GetNumRoutes: {}
GetNumSavedInstances:
  outputs:
  - type: number
GetNumShapeshiftForms:
  outputs:
  - type: number
GetNumSkillLines:
  outputs:
  - type: number
GetNumSockets:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetNumSoRRemaining: {}
GetNumSpellTabs:
  outputs:
  - type: number
GetNumStableSlots: {}
GetNumSubgroupMembers:
  outputs:
  - type: number
GetNumTalentGroups:
  inputs:
  - - nilable: true
      type: boolean
    - nilable: true
      type: boolean
  outputs:
  - type: number
GetNumTalents:
  impl: GetNumTalents
  inputs:
  - - name: tabIndex
      type: number
  outputs:
  - name: numTalents
    type: number
  sqls:
  - lookup: GetNumTalents
  states:
  - Units
GetNumTalentTabs:
  impl: GetNumTalentTabs
  outputs:
  - type: number
  sqls:
  - lookup: GetNumTalentTabs
  states:
  - Units
GetNumTitles:
  outputs:
  - type: number
GetNumTrackedAchievements: {}
GetNumTradeSkills:
  inputs:
  - {}
  outputs:
  - type: number
GetNumTrainerServices:
  inputs:
  - {}
  outputs:
  - name: numServices
    type: number
GetObjectiveText: {}
GetOptOutOfLoot: {}
GetOSLocale: {}
GetOverrideBarIndex:
  inputs:
  - {}
  outputs:
  - type: number
GetOverrideBarSkin: {}
GetOwnerAuctionItems: {}
GetParryChance: {}
GetParryChanceFromAttribute: {}
GetPartyAssignment: {}
GetPendingGlyphInfo: {}
GetPendingInviteConfirmations: {}
GetPersonalRatedInfo:
  inputs:
  - - name: bracketIndex
      type: number
  outputs:
  - name: rating
    type: number
  - name: seasonBest
    type: number
  - name: weeklyBest
    type: number
  - name: seasonPlayed
    type: number
  - name: seasonWon
    type: number
  - name: weeklyPlayed
    type: number
  - name: weeklyWon
    type: number
  - name: lastWeeksBest
    type: number
  - name: hasWon
    type: number
  - name: pvpTier
    type: number
  - name: ranking
    type: number
  - name: teamSize
    type: number
GetPetActionCooldown: {}
GetPetActionInfo: {}
GetPetActionSlotUsable: {}
GetPetActionsUsable: {}
GetPetExperience:
  outputs:
  - name: currXP
    type: number
  - name: nextXP
    type: number
GetPetFoodTypes: {}
GetPetHappiness:
  inputs:
  - {}
  outputs:
  - name: happiness
    type: number
  - name: damagePercentage
    type: number
  - name: loyaltyRate
    type: number
GetPetIcon: {}
GetPetitionInfo:
  inputs:
  - {}
  outputs:
  - name: petitionType
    type: string
  - name: title
    type: string
  - name: bodyText
    type: string
  - name: maxSignatures
    type: number
  - name: originatorName
    type: string
  - name: isOriginator
    type: boolean
  - name: minSignatures
    type: number
GetPetitionItemPrice: {}
GetPetitionNameInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: string
GetPetLoyalty: {}
GetPetMeleeHaste: {}
GetPetSpellBonusDamage:
  inputs:
  - {}
  outputs:
  - name: spellDamageBonus
    type: number
GetPetTalentTree: {}
GetPetTimeRemaining: {}
GetPetTrainingPoints:
  inputs:
  - {}
  outputs:
  - name: totalPoints
    type: number
  - name: spent
    type: number
GetPhysicalScreenSize:
  inputs:
  - {}
  outputs:
  - name: physicalWidth
    stub: 1024
    type: number
  - name: physicalHeight
    stub: 768
    type: number
GetPlayerFacing: {}
GetPlayerInfoByGUID:
  inputs:
  - - type: string
  outputs:
  - type: string
  - type: string
  - type: string
  - type: string
  - type: number
  - type: string
  - type: string
GetPlayerTradeMoney:
  outputs:
  - type: number
GetPossessInfo: {}
GetPowerRegen: {}
GetPowerRegenForPowerType: {}
GetPrevCompleatedTutorial: {}
GetPreviewTalentPointsSpent: {}
GetPreviousAchievement: {}
GetPreviousArenaSeason: {}
GetPreviousArenaSeasonUsesTeams: {}
GetProfessionInfo: {}
GetProgressText:
  inputs:
  - {}
  outputs:
  - name: progressText
    type: string
GetPromotionRank: {}
GetPVPDesired: {}
GetPVPLastWeekStats: {}
GetPVPLifetimeStats:
  inputs:
  - {}
  outputs:
  - name: honorableKills
    type: number
  - name: dishonorableKills
    type: number
  - name: highestRank
    type: number
GetPVPRankInfo:
  inputs:
  - - name: rank
      type: number
    - name: faction
      nilable: true
      type: string
  outputs:
  - name: rankName
    stub: Pariah
    type: string
  - name: rankNumber
    stub: 0
    type: number
GetPVPRankProgress:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetPVPSessionStats: {}
GetPVPThisWeekStats: {}
GetPVPTimer: {}
GetPVPYesterdayStats: {}
GetQuestBackgroundMaterial: {}
GetQuestCurrencyID:
  inputs:
  - - name: type
      type: string
    - name: index
      type: number
  outputs:
  - name: currencyID
    type: number
GetQuestCurrencyInfo:
  inputs:
  - - name: itemType
      type: string
    - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: string
  - name: numItems
    type: number
  - name: quality
    type: number
GetQuestFactionGroup: {}
GetQuestGreenRange:
  inputs:
  - {}
  outputs:
  - name: range
    type: number
GetQuestID:
  inputs:
  - {}
  outputs:
  - name: questID
    type: number
GetQuestIndexForTimer: {}
GetQuestIndexForWatch:
  inputs:
  - - name: watchIndex
      type: number
  outputs:
  - name: questIndex
    type: number
GetQuestItemInfo:
  inputs:
  - - name: type
      type: string
    - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: string
  - name: count
    type: number
  - name: quality
    type: number
  - name: isUsable
    type: oneornil
  - name: itemID
    stub: 17
    type: number
GetQuestItemLink:
  inputs:
  - - name: type
      type: string
    - name: index
      type: number
  outputs:
  - name: itemLink
    type: string
GetQuestLink: {}
GetQuestLogChoiceInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: quantity
    type: number
  - name: quality
    type: number
  - name: isUsable
    type: boolean
  - name: itemID
    type: number
GetQuestLogCompletionText: {}
GetQuestLogGroupNum:
  outputs:
  - type: number
GetQuestLogIndexByID:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: questLogIndex
    type: number
GetQuestLogItemDrop: {}
GetQuestLogItemLink: {}
GetQuestLogLeaderBoard:
  inputs:
  - - name: objectiveIndex
      type: number
    - name: questLogIndex
      nilable: true
      type: number
  outputs:
  - name: text
    type: string
  - name: type
    type: string
  - name: finished
    type: boolean
GetQuestLogPushable: {}
GetQuestLogQuestText: {}
GetQuestLogQuestType: {}
GetQuestLogRequiredMoney:
  outputs:
  - type: number
GetQuestLogRewardArenaPoints:
  inputs:
  - {}
  outputs:
  - name: arenaPoints
    type: number
GetQuestLogRewardCurrencyInfo:
  inputs:
  - - name: i
      type: number
    - name: questID
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: string
  - name: numItems
    type: number
  - name: currencyID
    type: number
  - name: quality
    type: number
GetQuestLogRewardHonor:
  outputs:
  - stub: 0
    type: number
GetQuestLogRewardInfo:
  inputs:
  - - name: itemIndex
      type: number
    - name: questID
      nilable: true
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: quantity
    type: number
  - name: quality
    type: number
  - name: isUsable
    type: boolean
  - name: itemID
    type: number
GetQuestLogRewardMoney:
  outputs:
  - type: number
GetQuestLogRewardSpell: {}
GetQuestLogRewardTalents: {}
GetQuestLogRewardTitle: {}
GetQuestLogRewardXP: {}
GetQuestLogSelection:
  outputs:
  - type: number
GetQuestLogSpecialItemCooldown: {}
GetQuestLogSpecialItemInfo: {}
GetQuestLogSpellLink: {}
GetQuestLogTimeLeft:
  outputs:
  - type: number
GetQuestLogTitle:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: questLogTitleText
    type: string
  - name: level
    type: number
  - name: questTag
    type: string
  - name: isHeader
    type: boolean
  - name: isCollapsed
    type: boolean
  - name: isComplete
    type: boolean
  - name: frequency
    type: string
  - name: questID
    type: number
  - name: startEvent
    type: string
  - name: displayQuestID
    type: number
  - name: isOnMap
    type: boolean
  - name: hasLocalPOI
    type: boolean
  - name: isTask
    type: boolean
  - name: isBounty
    type: boolean
  - name: isStory
    type: boolean
  - name: isHidden
    type: boolean
  - name: isScaling
    type: boolean
GetQuestMoneyToGet:
  inputs:
  - {}
  outputs:
  - name: money
    type: number
GetQuestPortraitGiver: {}
GetQuestPortraitTurnIn:
  inputs:
  - {}
  outputs:
  - name: questPortrait
    stub: 0
    type: number
  - name: questPortraitText
    type: string
  - name: questPortraitName
    type: string
GetQuestResetTime: {}
GetQuestReward: {}
GetQuestsCompleted:
  inputs:
  - - name: table
      nilable: true
      type: table
  outputs:
  - name: questsCompleted
    type: table
GetQuestSortIndex: {}
GetQuestSpellLink: {}
GetQuestTagInfo: {}
GetQuestText: {}
GetQuestTimers: {}
GetQuestUiMapID: {}
GetQuestWatchIndex: {}
GetQuestWatchInfo: {}
GetRaidDifficultyID:
  inputs:
  - {}
  outputs:
  - type: number
GetRaidProfileFlattenedOptions: {}
GetRaidProfileName: {}
GetRaidProfileOption: {}
GetRaidProfileSavedPosition: {}
GetRaidRosterInfo:
  inputs:
  - - name: raidIndex
      type: number
  outputs:
  - name: name
    type: string
  - name: rank
    type: number
  - name: subgroup
    type: number
  - name: level
    type: number
  - name: class
    type: string
  - name: fileName
    type: string
  - name: zone
    type: string
  - name: online
    type: oneornil
  - name: isDead
    type: oneornil
  - name: role
    type: string
  - name: isML
    type: oneornil
  - name: combatRole
    type: string
GetRaidTargetIndex: {}
GetRangedCritChance:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetRangedHaste: {}
GetReadyCheckStatus:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs:
  - name: readyCheckStatus
    nilable: true
    type: string
GetReadyCheckTimeLeft: {}
GetRealmID:
  outputs:
  - type: number
GetRealmName:
  inputs:
  - {}
  outputs:
  - name: realmName
    stub: Realm
    type: string
GetRealZoneText:
  inputs:
  - - name: instanceID
      nilable: true
      type: number
  outputs:
  - name: zone
    stub: RealZoneText
    type: string
GetReleaseTimeRemaining:
  inputs:
  - {}
  outputs:
  - name: timeRemaining
    type: number
GetRepairAllCost:
  outputs:
  - type: number
GetResSicknessDuration:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetRestrictedAccountData:
  inputs:
  - {}
  outputs:
  - name: rLevel
    type: number
  - name: rMoney
    type: number
  - name: profCap
    type: number
GetRestState:
  inputs:
  - {}
  outputs:
  - name: exhaustionStateID
    type: number
  - name: exhaustionStateName
    type: string
  - name: exhaustionStateMultiplier
    type: number
GetRewardArenaPoints:
  inputs:
  - {}
  outputs:
  - name: arenaPoints
    type: number
GetRewardHonor:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetRewardMoney:
  inputs:
  - {}
  outputs:
  - name: money
    type: number
GetRewardSpell:
  inputs:
  - {}
  outputs:
  - name: texture
    type: number
  - name: spellName
    type: string
  - name: isTradeskillSpell
    type: boolean
  - name: isSpellLearned
    type: boolean
  - name: hideSpellLearnText
    type: boolean
  - name: isBoostSpell
    type: boolean
  - name: garrFollowerID
    nilable: true
    type: number
  - name: genericUnlock
    type: boolean
  - name: spellID
    type: number
GetRewardTalentPoints: {}
GetRewardText:
  inputs:
  - {}
  outputs:
  - name: rewardText
    type: string
GetRewardTitle:
  inputs:
  - {}
  outputs:
  - name: playerTitle
    type: string
GetRewardXP:
  inputs:
  - {}
  outputs:
  - name: xp
    type: number
GetRuneCooldown: {}
GetRuneType: {}
GetRunningMacro: {}
GetRunningMacroButton: {}
GetSavedInstanceChatLink:
  outputs:
  - name: link
    type: string
GetSavedInstanceEncounterInfo: {}
GetSavedInstanceInfo:
  inputs:
  - - type: number
  outputs:
  - type: string
  - type: number
  - type: number
  - type: number
  - type: boolean
  - type: boolean
  - type: number
  - type: boolean
  - type: number
  - type: string
  - type: number
  - type: number
  - type: boolean
GetSchoolString:
  inputs:
  - - type: number
  outputs:
  - type: string
GetScreenDPIScale: {}
GetScreenHeight:
  impl: GetScreenHeight
  outputs:
  - type: number
  states:
  - System
GetScreenResolutions:
  comment: output is actually an unpacked string table
  inputs:
  - {}
  outputs:
  - stub: 1024x768
    type: string
GetScreenWidth:
  impl: GetScreenWidth
  outputs:
  - type: number
  states:
  - System
GetScriptCPUUsage: {}
GetSecondsUntilParentalControlsKick: {}
GetSelectedAuctionItem:
  inputs:
  - - name: type
      type: string
  outputs:
  - name: index
    type: number
GetSelectedBattlefield:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetSelectedDisplayChannel: {}
GetSelectedFaction:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetSelectedSkill:
  outputs:
  - type: number
GetSelectedStablePet: {}
GetSendMailCOD: {}
GetSendMailItem: {}
GetSendMailItemLink: {}
GetSendMailMoney: {}
GetSendMailPrice:
  outputs:
  - type: number
GetServerExpansionLevel:
  inputs:
  - {}
  outputs:
  - name: serverExpansionLevel
    type: number
GetServerTime:
  inputs:
  - {}
  outputs:
  - name: timestamp
    type: number
GetSessionTime: {}
GetShapeshiftForm:
  inputs:
  - - nilable: true
      type: boolean
  outputs:
  - type: number
GetShapeshiftFormCooldown: {}
GetShapeshiftFormID:
  inputs:
  - {}
  outputs:
  - name: index
    type: number
GetShapeshiftFormInfo: {}
GetSheathState: {}
GetShieldBlock: {}
GetSkillLineInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: skillName
    type: string
  - name: header
    type: oneornil
  - name: isExpanded
    type: oneornil
  - name: skillRank
    type: number
  - name: numTempPoints
    type: number
  - name: skillModifier
    type: number
  - name: skillMaxRank
    type: number
  - name: isAbandonable
    type: oneornil
  - name: stepCost
    type: oneornil
  - name: rankCost
    type: oneornil
  - name: minLevel
    type: number
  - name: skillCostType
    type: number
  - name: skillDescription
    type: string
GetSocketItemBoundTradeable:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
GetSocketItemInfo:
  inputs:
  - {}
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: quality
    type: number
GetSocketItemRefundable:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
GetSocketTypes:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: gemColor
    stub: Blue
    type: string
GetSpellAutocast:
  inputs:
  - - name: slot
      type: number
    - name: bookType
      type: string
  outputs:
  - name: autoCastAllowed
    type: boolean
  - name: autoCastEnabled
    type: boolean
GetSpellBaseCooldown: {}
GetSpellBonusDamage: {}
GetSpellBonusHealing:
  inputs:
  - {}
  outputs:
  - name: bonusHealing
    type: number
GetSpellBookItemInfo: {}
GetSpellBookItemName:
  inputs:
  - - name: slot
      type: number
    - name: bookType
      type: string
  outputs:
  - name: spellName
    type: string
  - name: subSpellName
    type: string
  - name: spellID
    type: number
GetSpellBookItemTexture:
  inputs:
  - - name: index
      type: number
    - name: bookType
      type: string
  - - name: spellName
      type: string
  outputs:
  - name: fileID
    type: number
GetSpellCharges: {}
GetSpellConfirmationPromptsInfo:
  outputs:
  - type: table
GetSpellCooldown:
  inputs:
  - - name: spellID
      type: number
  - - name: slot
      type: number
    - name: bookType
      type: string
  - - name: spellName
      type: string
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
  - name: modRate
    type: number
GetSpellCount: {}
GetSpellCritChance:
  inputs:
  - - name: school
      nilable: true
      type: number
  outputs:
  - name: value
    type: number
GetSpellCritChanceFromIntellect:
  inputs:
  - - type: string
  outputs:
  - type: number
GetSpellDescription:
  inputs:
  - - nilable: true
      type: number
  outputs:
  - type: string
GetSpellHitModifier: {}
GetSpellInfo:
  inputs:
  - - name: spellID
      nilable: true
      type: number
  - - name: name
      type: string
  outputs:
  - name: name
    type: string
  - name: rank
    type: nil
  - name: icon
    type: number
  - name: castTime
    type: number
  - name: minRange
    type: number
  - name: maxRange
    type: number
  - name: spellID
    type: number
GetSpellLink: {}
GetSpellLossOfControlCooldown: {}
GetSpellPenetration: {}
GetSpellPowerCost: {}
GetSpellQueueWindow: {}
GetSpellRank: {}
GetSpellSubtext:
  inputs:
  - - nilable: true
      type: number
  outputs:
  - type: nil
GetSpellTabInfo:
  inputs:
  - - name: tabIndex
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: offset
    type: number
  - name: numSlots
    type: number
  - name: isGuild
    type: boolean
  - name: offSpecID
    type: string
  - name: shouldHide
    type: boolean
  - name: specID
    type: number
GetSpellTexture:
  inputs:
  - - name: spellID
      type: number
  - - name: spellName
      type: string
  outputs:
  - name: icon
    type: number
GetSpellTradeSkillLink: {}
GetStablePetFoodTypes:
  inputs:
  - - name: index
      type: number
GetStablePetInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: petIcon
    type: string
  - name: petName
    type: string
  - name: petLevel
    type: number
  - name: petType
    type: string
  - name: petTalents
    type: string
GetStatistic: {}
GetStatisticsCategoryList: {}
GetSubZoneText:
  inputs:
  - {}
  outputs:
  - type: string
GetSuggestedGroupNum: {}
GetSummonFriendCooldown:
  inputs:
  - {}
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
GetSuperTrackedQuestID: {}
GetTabardCreationCost:
  outputs:
  - type: number
GetTabardInfo: {}
GetTalentGroupRole: {}
GetTalentInfo:
  impl: GetTalentInfo_Vanilla
  sqls:
  - lookup: GetTalentInfo_Vanilla
  states:
  - Units
GetTalentLink: {}
GetTalentPrereqs:
  impl: GetTalentPrereqs_Wrath
  inputs:
  - - name: tabIndex
      type: number
    - name: talentIndex
      type: number
  sqls:
  - cursor: GetTalentPrereqs
  states:
  - Units
GetTalentTabInfo:
  impl: GetTalentTabInfo_Wrath
  inputs:
  - - name: index
      type: number
    - name: isInspect
      nilable: true
      type: boolean
  outputs:
  - name: name
    nilable: true
    type: string
  - name: texture
    type: nil
  - name: pointsSpent
    type: number
  - name: fileName
    nilable: true
    type: string
  - name: previewPointsSpent
    type: number
  sqls:
  - lookup: GetTalentTabInfo
  states:
  - Units
GetTargetTradeMoney:
  inputs:
  - {}
  outputs:
  - name: money
    type: number
GetTaxiBenchmarkMode: {}
GetTaxiMapID: {}
GetTempShapeshiftBarIndex: {}
GetText:
  inputs:
  - - name: token
      type: string
    - name: gender
      nilable: true
      type: number
    - name: ordinal
      nilable: true
      type: number
  outputs:
  - name: text
    type: string
GetThreatStatusColor:
  inputs:
  - - name: status
      type: number
  outputs:
  - name: r
    type: number
  - name: g
    type: number
  - name: b
    type: number
GetTickTime:
  inputs:
  - {}
  outputs:
  - name: elapsed
    type: number
GetTime:
  impl: GetTime
  outputs:
  - type: number
  states:
  - Time
GetTimePreciseSec:
  inputs:
  - {}
  outputs:
  - name: seconds
    type: number
GetTimeToWellRested: {}
GetTitleName: {}
GetTitleText:
  inputs:
  - {}
  outputs:
  - name: titleText
    type: string
GetToolTipInfo: {}
GetTotalAchievementPoints:
  inputs:
  - {}
  outputs:
  - name: points
    type: number
GetTotemCannotDismiss: {}
GetTotemInfo: {}
GetTotemTimeLeft: {}
GetTrackedAchievements: {}
GetTrackingTexture:
  inputs:
  - {}
  outputs:
  - type: nil
GetTradePlayerItemInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: numItems
    type: number
  - name: quality
    type: number
  - name: enchantment
    nilable: true
    type: string
  - name: canLoseTransmog
    type: boolean
GetTradePlayerItemLink:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: itemLink
    type: string
GetTradeSkillCooldown:
  inputs:
  - - name: skillIndex
      type: number
  outputs:
  - name: seconds
    type: number
GetTradeSkillDescription: {}
GetTradeSkillIcon:
  inputs:
  - - name: skillIndex
      type: number
  outputs:
  - name: texture
    type: number
GetTradeSkillInfo:
  inputs:
  - - name: skillIndex
      type: number
  outputs:
  - name: skillName
    type: string
  - name: skillType
    type: string
  - name: numAvailable
    type: number
  - name: isExpanded
    type: boolean
GetTradeSkillInvSlotFilter: {}
GetTradeSkillInvSlots: {}
GetTradeSkillItemLevelFilter: {}
GetTradeSkillItemLink: {}
GetTradeSkillItemNameFilter: {}
GetTradeSkillItemStats: {}
GetTradeSkillLine:
  inputs:
  - {}
  outputs:
  - name: skillLineName
    type: string
  - name: skillLineRank
    type: number
  - name: skillLineMaxRank
    type: number
GetTradeSkillListLink: {}
GetTradeSkillNumMade:
  inputs:
  - - name: skillIndex
      type: number
  outputs:
  - name: minMade
    type: number
  - name: maxMade
    type: number
GetTradeSkillNumReagents:
  inputs:
  - - name: skillIndex
      type: number
  outputs:
  - type: number
GetTradeSkillReagentInfo:
  inputs:
  - - name: skillIndex
      type: number
    - name: reagentIndex
      type: number
  outputs:
  - name: reagentName
    type: string
  - name: reagentTexture
    type: number
  - name: reagentCount
    type: number
  - name: playerReagentCount
    type: number
GetTradeSkillReagentItemLink: {}
GetTradeSkillRecipeLink: {}
GetTradeskillRepeatCount:
  inputs:
  - {}
  outputs:
  - type: number
GetTradeSkillSelectionIndex:
  inputs:
  - {}
  outputs:
  - name: skillIndex
    type: number
GetTradeSkillSubClasses: {}
GetTradeSkillSubClassFilter: {}
GetTradeSkillTools:
  inputs:
  - - name: skillIndex
      type: number
GetTradeTargetItemInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: numItems
    type: number
  - name: quality
    type: number
  - name: isUsable
    type: boolean
  - name: enchantment
    nilable: true
    type: string
GetTradeTargetItemLink:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: itemLink
    type: string
GetTrainerGreetingText:
  inputs:
  - {}
  outputs:
  - name: value
    type: string
GetTrainerSelectionIndex:
  inputs:
  - {}
  outputs:
  - name: value
    type: number
GetTrainerServiceAbilityReq:
  inputs:
  - - name: skillIndex
      type: number
    - name: index
      type: number
  outputs:
  - name: ability
    type: number
  - name: hasReq
    type: boolean
GetTrainerServiceCost:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: money
    type: number
  - name: isProfession
    type: boolean
GetTrainerServiceDescription: {}
GetTrainerServiceIcon: {}
GetTrainerServiceInfo:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: name
    type: string
  - name: rank
    type: string
  - name: category
    type: string
  - name: expanded
    type: oneornil
GetTrainerServiceItemLink: {}
GetTrainerServiceLevelReq: {}
GetTrainerServiceNumAbilityReq:
  inputs:
  - - name: skillIndex
      type: number
  outputs:
  - name: numRequirements
    type: number
GetTrainerServiceSkillLine: {}
GetTrainerServiceSkillReq: {}
GetTrainerServiceStepIndex:
  inputs:
  - {}
  outputs:
  - name: value
    nilable: true
    type: number
GetTrainerServiceTypeFilter: {}
GetTrainerTradeskillRankValues:
  inputs:
  - {}
  outputs:
  - name: rank
    type: number
  - name: maxRank
    type: number
  - name: rankModifier
    type: number
GetTutorialsEnabled:
  inputs:
  - {}
  outputs:
  - type: boolean
GetUICameraInfo: {}
GetUITextureKitInfo: {}
GetUnitHealthModifier: {}
GetUnitHealthRegenRateFromSpirit:
  inputs:
  - - type: string
  outputs:
  - type: number
GetUnitManaRegenRateFromSpirit:
  inputs:
  - - type: string
  outputs:
  - type: number
GetUnitMaxHealthModifier:
  inputs:
  - - type: string
  outputs:
  - type: number
GetUnitPowerModifier: {}
GetUnitSpeed:
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: currentSpeed
    type: number
  - name: runSpeed
    type: number
  - name: flightSpeed
    type: number
  - name: swimSpeed
    type: number
GetUnspentTalentPoints:
  inputs:
  - - default: false
      name: isInspected
      type: boolean
    - default: false
      name: isPet
      type: boolean
    - default: 1
      name: talentGroup
      type: number
  outputs:
  - name: talentPoints
    type: number
GetVehicleBarIndex:
  inputs:
  - {}
  outputs:
  - type: number
GetVehicleUIIndicator: {}
GetVehicleUIIndicatorSeat: {}
GetVideoCaps: {}
GetVideoOptions: {}
GetWarGameQueueStatus: {}
GetWatchedFactionInfo:
  inputs:
  - {}
  outputs:
  - type: string
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
GetWeaponEnchantInfo: {}
GetWebTicket: {}
GetWorldPVPQueueMapName:
  inputs:
  - - type: boolean
  outputs:
  - type: string
GetWorldPVPQueueStatus: {}
GetXPExhaustion: {}
GetZonePVPInfo: {}
GetZoneText: {}
GiveMasterLoot: {}
GlyphMatchesSocket: {}
gmatch:
  alias: string.gmatch
GMEuropaBugsEnabled: {}
GMEuropaComplaintsEnabled: {}
GMEuropaSuggestionsEnabled: {}
GMEuropaTicketsEnabled: {}
GMItemRestorationButtonEnabled: {}
GMQuickTicketSystemEnabled: {}
GMQuickTicketSystemThrottled: {}
GMReportLag: {}
GMRequestPlayerInfo: {}
GMResponseResolve: {}
GMSubmitBug:
  inputs:
  - - name: message
      type: string
  outputs: {}
GMSubmitSuggestion: {}
GMSurveyAnswer: {}
GMSurveyAnswerSubmit: {}
GMSurveyCommentSubmit: {}
GMSurveyNumAnswers: {}
GMSurveyQuestion: {}
GMSurveySubmit: {}
GroupHasOfflineMember: {}
gsub:
  alias: string.gsub
GuildControlAddRank: {}
GuildControlDelRank: {}
GuildControlGetAllowedShifts: {}
GuildControlGetNumRanks:
  outputs:
  - type: number
GuildControlGetRankFlags: {}
GuildControlGetRankName:
  inputs:
  - - name: rank
      type: number
  outputs:
  - name: value
    type: string
GuildControlSaveRank: {}
GuildControlSetRank: {}
GuildControlSetRankFlag: {}
GuildControlShiftRankDown: {}
GuildControlShiftRankUp: {}
GuildDemote: {}
GuildDisband: {}
GuildInfo: {}
GuildInvite: {}
GuildLeave: {}
GuildMasterAbsent: {}
GuildPromote: {}
GuildRosterSendSoR: {}
GuildRosterSetOfficerNote: {}
GuildRosterSetPublicNote: {}
GuildSetLeader: {}
GuildSetMOTD: {}
GuildUninvite: {}
HandleAtlasMemberCommand: {}
HasAction: {}
HasBonusActionBar: {}
HasBoundGemProposed:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
HasCompletedAnyAchievement: {}
HasDualWieldPenalty: {}
HasFilledPetition:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
HasFullControl: {}
HasIgnoreDualWieldWeapon: {}
HasInboxItem: {}
HasInspectHonorData: {}
HasKey: {}
HasLoadedCUFProfiles:
  inputs:
  - {}
  outputs:
  - type: boolean
HasNewMail:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
HasNoReleaseAura: {}
HasOverrideActionBar: {}
HasPetSpells: {}
HasPetUI: {}
HasSendMailItem:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: value
    type: boolean
HasTempShapeshiftActionBar: {}
HasVehicleActionBar: {}
HasWandEquipped: {}
HaveQuestData:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: value
    type: boolean
HaveQuestRewardData:
  inputs:
  - - name: questID
      type: number
  outputs:
  - name: value
    type: boolean
HearthAndResurrectFromArea: {}
HideRepairCursor: {}
HonorSystemEnabled: {}
hooksecurefunc:
  frameworks:
  - env
  impl: hooksecurefunc
  outputs: {}
InActiveBattlefield: {}
InboxItemCanDelete:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: value
    type: boolean
InCinematic: {}
InCombatLockdown: {}
InitiateRolePoll: {}
InitiateTrade:
  inputs:
  - - name: unit
      type: unit
  outputs: {}
InRepairMode: {}
InviteUnit: {}
ipairs:
  stdlib: ipairs
Is64BitClient: {}
IsAccountSecured: {}
IsAchievementEligible: {}
IsActionInRange: {}
IsActiveBattlefieldArena: {}
IsActiveQuestTrivial:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: isActiveQuestTrivial
    type: boolean
IsAddOnLoaded:
  impl: IsAddOnLoaded
  inputs:
  - - name: index
      type: number
  - - name: name
      type: string
  outputs:
  - type: boolean
  states:
  - Addons
IsAddOnLoadOnDemand:
  impl: IsAddOnLoadOnDemand
  inputs:
  - - name: index
      type: number
  - - name: name
      type: string
  outputs:
  - type: oneornil
  states:
  - Addons
IsAddonVersionCheckEnabled:
  inputs:
  - {}
  outputs:
  - type: boolean
IsAltKeyDown: {}
IsArenaSeasonActive: {}
IsArenaSkirmish: {}
IsArenaTeamCaptain: {}
IsAtStableMaster: {}
IsAttackAction:
  inputs:
  - - name: action
      type: number
  outputs:
  - name: value
    type: boolean
IsAttackSpell: {}
IsAuctionSortReversed: {}
IsAutoRepeatAction:
  inputs:
  - - name: action
      type: number
  outputs:
  - name: value
    type: boolean
IsAutoRepeatSpell:
  inputs:
  - - name: spellID
      type: number
  - - name: spellName
      type: string
  outputs:
  - name: value
    type: boolean
IsAvailableQuestTrivial: {}
IsBattlefieldArena: {}
IsBindingForGamePad: {}
IsBNLogin: {}
IsCemeterySelectionAvailable:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
IsChatAFK: {}
IsChatChannelRaid: {}
IsChatDND: {}
IsCompetitiveModeEnabled: {}
IsConsumableAction: {}
IsConsumableItem:
  inputs:
  - - name: itemID
      nilable: true
      type: number
  outputs:
  - name: value
    type: boolean
IsConsumableSpell:
  inputs:
  - - name: spellName
      nilable: true
      type: string
  outputs:
  - name: value
    type: boolean
IsControlKeyDown: {}
IsCurrentAction:
  inputs:
  - - name: action
      type: number
  outputs:
  - name: value
    type: boolean
IsCurrentItem: {}
IsCurrentQuestFailed: {}
IsCurrentSpell:
  inputs:
  - - name: spellID
      type: number
  - - name: spellName
      type: string
  outputs:
  - name: value
    type: boolean
IsDebugBuild:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
IsDesaturateSupported: {}
IsDisplayChannelModerator: {}
IsDisplayChannelOwner: {}
IsDressableItem: {}
IsDualWielding: {}
IsEncounterInProgress:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
IsEncounterLimitingResurrections:
  inputs:
  - {}
  outputs:
  - type: boolean
IsEncounterSuppressingRelease: {}
IsEquippableItem: {}
IsEquippedAction: {}
IsEquippedItem: {}
IsEquippedItemType: {}
IsEuropeanNumbers: {}
IsEveryoneAssistant:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
IsExpansionTrial:
  inputs:
  - {}
  outputs:
  - name: isExpansionTrialAccount
    type: boolean
IsFactionInactive: {}
IsFalling:
  inputs:
  - {}
  outputs:
  - name: falling
    type: boolean
IsFishingLoot: {}
IsFlyableArea: {}
IsFlying: {}
IsGamePadCursorControlEnabled: {}
IsGamePadFreelookEnabled: {}
IsGMClient: {}
IsGUIDInGroup: {}
IsGuildLeader: {}
IsGuildMember: {}
IsGuildRankAssignmentAllowed: {}
IsHarmfulItem: {}
IsHarmfulSpell: {}
IsHelpfulItem: {}
IsHelpfulSpell: {}
IsInActiveWorldPVP:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: oneornil
IsInArenaTeam: {}
IsInAuthenticatedRank: {}
IsInCinematicScene: {}
IsIndoors: {}
IsInGroup: {}
IsInGuild: {}
IsInGuildGroup: {}
IsInInstance: {}
IsInRaid: {}
IsInventoryItemLocked: {}
IsInventoryItemProfessionBag: {}
IsItemAction: {}
IsItemInRange: {}
IsKeyDown: {}
IsLeftAltKeyDown: {}
IsLeftControlKeyDown: {}
IsLeftMetaKeyDown: {}
IsLeftShiftKeyDown: {}
IsLegacyDifficulty: {}
IsLinuxClient: {}
IsLoggedIn:
  impl: IsLoggedIn
  inputs:
  - {}
  outputs:
  - name: isLoggedIn
    type: boolean
  states:
  - System
IsMacClient: {}
IsMasterLooter: {}
IsMetaKeyDown: {}
IsModifiedClick:
  inputs:
  - - name: action
      nilable: true
      type: string
  outputs:
  - name: value
    type: boolean
IsModifierKeyDown: {}
IsMounted:
  outputs:
  - type: boolean
IsMouseButtonDown: {}
IsMouselooking: {}
IsMovieLocal: {}
IsMoviePlayable: {}
IsOnGlueScreen: {}
IsOnTournamentRealm: {}
IsOutdoors: {}
IsOutlineModeSupported: {}
IsOutOfBounds: {}
IsPassiveSpell:
  inputs:
  - - name: slot
      type: number
    - name: bookType
      type: string
  - - name: spellName
      type: string
  outputs:
  - name: isPassive
    type: boolean
IsPetActive: {}
IsPetAttackAction:
  inputs:
  - - type: number
  outputs:
  - type: boolean
IsPetAttackActive: {}
IsPlayerAttacking: {}
IsPlayerInGuildFromGUID:
  inputs:
  - - name: playerGUID
      type: string
  outputs:
  - name: IsInGuild
    type: boolean
IsPlayerInWorld: {}
IsPlayerMoving: {}
IsPlayerSpell: {}
IsPossessBarVisible: {}
IsPublicBuild:
  inputs:
  - {}
  outputs:
  - name: value
    stub: true
    type: boolean
IsPVPTimerRunning: {}
IsQuestCompletable:
  inputs:
  - {}
  outputs:
  - name: isCompletable
    type: boolean
IsQuestComplete: {}
IsQuestHardWatched: {}
IsQuestItemHidden:
  inputs:
  - - name: index
      type: number
  outputs:
  - name: hidden
    stub: 0
    type: number
IsQuestLogSpecialItemInRange: {}
IsQuestWatched: {}
IsRangedWeapon: {}
IsRecognizedName: {}
IsReferAFriendLinked: {}
IsResting: {}
IsRestrictedAccount: {}
IsRightAltKeyDown: {}
IsRightControlKeyDown: {}
IsRightMetaKeyDown: {}
IsRightShiftKeyDown: {}
issecure:
  stdlib: issecure
issecurevariable:
  stdlib: issecurevariable
IsSelectedSpellBookItem: {}
IsShiftKeyDown: {}
IsSpellInRange: {}
IsSpellKnown: {}
IsSpellKnownOrOverridesKnown:
  inputs:
  - - name: spellID
      type: number
    - name: isPet
      nilable: true
      type: boolean
  outputs:
  - name: value
    type: boolean
IsStackableAction: {}
IsStealthed:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
IsSubmerged: {}
IsSubZonePVPPOI: {}
IsSwimming: {}
IsTargetLoose: {}
IsTestBuild:
  frameworks:
  - datalua
  impl: IsTestBuild
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
IsThreatWarningEnabled: {}
IsTitleKnown: {}
IsTrackedAchievement: {}
IsTradeSkillLinked: {}
IsTradeskillTrainer:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
IsTrainerServiceLearnSpell: {}
IsTrialAccount:
  inputs:
  - {}
  outputs:
  - name: isTrialAccount
    type: boolean
IsTutorialFlagged: {}
IsUnitOnQuest: {}
IsUnitOnQuestByQuestID: {}
IsUsableAction: {}
IsUsableItem: {}
IsUsableSpell: {}
IsUsingFixedTimeStep: {}
IsUsingVehicleControls: {}
IsVehicleAimAngleAdjustable: {}
IsVehicleAimPowerAdjustable: {}
IsVeteranTrialAccount:
  inputs:
  - {}
  outputs:
  - name: isVeteranTrialAccount
    type: boolean
IsWargame: {}
IsWindowsClient: {}
IsXPUserDisabled: {}
ItemHasRange: {}
ItemTextGetCreator:
  inputs:
  - {}
  outputs:
  - name: creatorName
    type: string
ItemTextGetItem:
  inputs:
  - {}
  outputs:
  - name: textName
    type: string
ItemTextGetMaterial:
  inputs:
  - {}
  outputs:
  - name: materialName
    nilable: true
    type: string
ItemTextGetPage:
  inputs:
  - {}
  outputs:
  - name: pageNum
    type: number
ItemTextGetText:
  inputs:
  - {}
  outputs:
  - name: pageBody
    type: string
ItemTextHasNextPage:
  inputs:
  - {}
  outputs:
  - name: value
    type: oneornil
ItemTextIsFullPage:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
ItemTextNextPage: {}
ItemTextPrevPage: {}
JoinArena: {}
JoinBattlefield: {}
JoinChannelByName: {}
JoinPermanentChannel: {}
JoinSkirmish: {}
JoinTemporaryChannel: {}
JoinWorldPVPQueue: {}
JumpOrAscendStart:
  inputs:
  - {}
  outputs: {}
KBArticle_BeginLoading: {}
KBArticle_GetData: {}
KBArticle_IsLoaded: {}
KBQuery_BeginLoading: {}
KBQuery_GetArticleHeaderCount: {}
KBQuery_GetArticleHeaderData: {}
KBQuery_GetTotalArticleCount: {}
KBQuery_IsLoaded: {}
KBSetup_BeginLoading: {}
KBSetup_GetArticleHeaderCount: {}
KBSetup_GetArticleHeaderData: {}
KBSetup_GetCategoryCount: {}
KBSetup_GetCategoryData: {}
KBSetup_GetLanguageCount: {}
KBSetup_GetLanguageData: {}
KBSetup_GetSubCategoryCount: {}
KBSetup_GetSubCategoryData: {}
KBSetup_GetTotalArticleCount: {}
KBSetup_IsLoaded: {}
KBSystem_GetMOTD: {}
KBSystem_GetServerNotice: {}
KBSystem_GetServerStatus: {}
KeyRingButtonIDToInvSlotID: {}
Kiosk.GetCharacterTemplateSetIndex: {}
Kiosk.IsEnabled:
  inputs:
  - {}
  outputs:
  - type: boolean
Kiosk.ShutdownSession: {}
Kiosk.StartSession: {}
ldexp:
  alias: math.ldexp
LearnPreviewTalents: {}
LearnTalent: {}
LeaveBattlefield: {}
LeaveChannelByLocalID: {}
LeaveChannelByName: {}
LeaveParty: {}
ListChannelByName: {}
ListChannels: {}
LoadAddOn:
  frameworks:
  - loader
  impl: LoadAddOn
  inputs:
  - - name: addonIndex
      type: number
  - - name: addonName
      type: string
  outputs:
  - name: loaded
    type: boolean
  - name: reason
    nilable: true
    type: string
LoadBindings: {}
loadstring:
  stdlib: loadstring
loadstring_untainted:
  stdlib: loadstring_untainted
LoadURLIndex: {}
log:
  alias: math.log
log10:
  alias: math.log10
LoggingChat:
  inputs:
  - - name: value
      nilable: true
      type: boolean
  outputs:
  - name: value
    type: boolean
LoggingCombat:
  inputs:
  - - name: value
      nilable: true
      type: boolean
  outputs:
  - name: value
    type: boolean
Logout:
  inputs:
  - {}
  outputs: {}
LootMoneyNotify: {}
LootSlot: {}
LootSlotHasItem: {}
MacOptions_AreOSShortcutsDisabled: {}
MacOptions_GetGameBundleName: {}
MacOptions_HasNewStyleUniversalAccess: {}
MacOptions_IsUniversalAccessEnabled: {}
MacOptions_OpenUniversalAccess: {}
MacOptions_SetOSShortcutsDisabled: {}
math.abs:
  stdlib: math.abs
math.acos:
  stdlib: math.acos
math.asin:
  stdlib: math.asin
math.atan:
  stdlib: math.atan
math.atan2:
  stdlib: math.atan2
math.ceil:
  stdlib: math.ceil
math.cos:
  stdlib: math.cos
math.cosh:
  stdlib: math.cosh
math.deg:
  stdlib: math.deg
math.exp:
  stdlib: math.exp
math.floor:
  stdlib: math.floor
math.fmod:
  stdlib: math.fmod
math.frexp:
  stdlib: math.frexp
math.huge:
  stdlib: math.huge
math.ldexp:
  stdlib: math.ldexp
math.log:
  stdlib: math.log
math.log10:
  stdlib: math.log10
math.max:
  stdlib: math.max
math.min:
  stdlib: math.min
math.modf:
  stdlib: math.modf
math.pi:
  stdlib: math.pi
math.pow:
  stdlib: math.pow
math.rad:
  stdlib: math.rad
math.random:
  stdlib: math.random
math.sin:
  stdlib: math.sin
math.sinh:
  stdlib: math.sinh
math.sqrt:
  stdlib: math.sqrt
math.tan:
  stdlib: math.tan
math.tanh:
  stdlib: math.tanh
max:
  alias: math.max
min:
  alias: math.min
mod:
  alias: math.fmod
MouselookStart: {}
MouselookStop: {}
MouseOverrideCinematicDisable: {}
MoveAndSteerStart:
  inputs:
  - {}
  outputs: {}
MoveAndSteerStop:
  inputs:
  - {}
  outputs: {}
MoveBackwardStart:
  inputs:
  - {}
  outputs: {}
MoveBackwardStop: {}
MoveForwardStart:
  inputs:
  - {}
  outputs: {}
MoveForwardStop: {}
MoveViewDownStart: {}
MoveViewDownStop: {}
MoveViewInStart:
  inputs:
  - {}
  outputs: {}
MoveViewInStop: {}
MoveViewLeftStart: {}
MoveViewLeftStop: {}
MoveViewOutStart:
  inputs:
  - {}
  outputs: {}
MoveViewOutStop: {}
MoveViewRightStart: {}
MoveViewRightStop: {}
MoveViewUpStart: {}
MoveViewUpStop: {}
MultiSampleAntiAliasingSupported: {}
MuteSoundFile: {}
newproxy:
  stdlib: newproxy
next:
  stdlib: next
NextView:
  inputs:
  - {}
  outputs: {}
NoPlayTime:
  inputs:
  - {}
  outputs:
  - type: boolean
NotifyInspect: {}
NotWhileDeadError: {}
NumTaxiNodes: {}
OfferPetition: {}
OpeningCinematic: {}
OpenTrainer: {}
pairs:
  stdlib: pairs
PartialPlayTime:
  inputs:
  - {}
  outputs:
  - type: boolean
pcall:
  stdlib: pcall
PetAbandon: {}
PetAggressiveMode: {}
PetAttack:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs: {}
PetCanBeAbandoned: {}
PetCanBeDismissed: {}
PetCanBeRenamed: {}
PetDefensiveMode: {}
PetDismiss: {}
PetFollow: {}
PetHasActionBar: {}
PetHasSpellbook: {}
PetMoveTo: {}
PetPassiveMode: {}
PetRename: {}
PetStopAttack: {}
PetUsesPetFrame: {}
PetWait: {}
PI:
  stdlib: math.pi
PickupAction: {}
PickupBagFromSlot: {}
PickupCompanion: {}
PickupCurrency: {}
PickupGuildBankItem: {}
PickupGuildBankMoney: {}
PickupInventoryItem: {}
PickupItem: {}
PickupMacro: {}
PickupMerchantItem: {}
PickupPetAction: {}
PickupPetSpell: {}
PickupPlayerMoney: {}
PickupSpell: {}
PickupSpellBookItem: {}
PickupStablePet: {}
PickupTradeMoney: {}
PitchDownStart:
  inputs:
  - {}
  outputs: {}
PitchDownStop:
  inputs:
  - {}
  outputs: {}
PitchUpStart:
  inputs:
  - {}
  outputs: {}
PitchUpStop:
  inputs:
  - {}
  outputs: {}
PlaceAction: {}
PlaceAuctionBid: {}
PlaceGlyphInSocket: {}
PlayerCanTeleport: {}
PlayerEffectiveAttackPower: {}
PlayerIsPVPInactive:
  inputs:
  - - type: unit
  outputs:
  - type: boolean
PlayMusic: {}
PlaySound: {}
PlaySoundFile: {}
PlayVocalErrorSoundID: {}
PostAuction: {}
PreloadMovie: {}
PrevView:
  inputs:
  - {}
  outputs: {}
PromoteToAssistant: {}
PromoteToLeader:
  inputs:
  - - name: unit
      type: unit
  outputs: {}
PurchaseSlot: {}
PutItemInBackpack: {}
PutItemInBag: {}
QueryAuctionItems: {}
QueryGuildBankLog: {}
QueryGuildBankTab:
  inputs:
  - - name: index
      type: number
  outputs: {}
QueryGuildBankText:
  inputs:
  - - name: tabIndex
      type: number
  outputs: {}
QueryGuildEventLog: {}
QuestChooseRewardError: {}
QuestIsDaily: {}
QuestLogPushQuest: {}
Quit:
  inputs:
  - {}
  outputs: {}
rad:
  alias: math.rad
RaidProfileExists: {}
RaidProfileHasUnsavedChanges: {}
random:
  alias: math.random
RandomRoll:
  inputs:
  - - name: low
      type: number
    - name: high
      type: number
  outputs: {}
rawequal: {}
rawget:
  stdlib: rawget
rawset:
  stdlib: rawset
RedockChatWindows:
  inputs:
  - {}
  outputs: {}
RegisterStaticConstants: {}
RemoveChatWindowChannel: {}
RemoveChatWindowMessages: {}
RemoveGlyphFromSocket: {}
RemoveQuestWatch: {}
RemoveTrackedAchievement: {}
RenamePetition: {}
RepairAllItems: {}
ReplaceEnchant: {}
ReplaceGuildMaster: {}
ReplaceTradeEnchant: {}
RepopMe:
  inputs:
  - {}
  outputs: {}
ReportBug: {}
ReportPlayerIsPVPAFK: {}
ReportSuggestion: {}
RequestBattlefieldScoreData: {}
RequestBattlegroundInstanceInfo: {}
RequestInspectHonorData: {}
RequestInviteFromUnit: {}
RequestPVPRewards: {}
RequestRaidInfo: {}
RequestRatedInfo: {}
RequestTimePlayed:
  frameworks:
  - api
  impl: RequestTimePlayed
  inputs:
  - {}
  outputs: {}
  states:
  - Time
RequeueSkirmish: {}
ResetAddOns:
  inputs:
  - {}
  outputs: {}
ResetChatColors: {}
ResetChatWindows: {}
ResetCPUUsage: {}
ResetCursor: {}
ResetDisabledAddOns: {}
ResetGroupPreviewTalentPoints: {}
ResetInstances: {}
ResetPerformanceValues:
  debug: true
  inputs:
  - {}
  outputs: {}
ResetPreviewTalentPoints: {}
ResetTutorials: {}
ResetView:
  inputs:
  - - name: view
      type: number
  outputs: {}
ResistancePercent: {}
RespondInstanceLock:
  inputs:
  - - name: response
      nilable: true
      type: boolean
  outputs: {}
RespondMailLockSendItem: {}
RespondToInviteConfirmation: {}
RestartGx: {}
RestoreRaidProfileFromCopy: {}
ResurrectGetOfferer: {}
ResurrectHasSickness: {}
ResurrectHasTimer: {}
RetrieveCorpse: {}
ReturnInboxItem: {}
RollOnLoot: {}
RunBinding: {}
RunMacro: {}
RunMacroText:
  frameworks:
  - api
  impl: RunMacroText
  inputs:
  - - name: macroText
      type: string
  outputs: {}
RunScript:
  impl: RunScript
  inputs:
  - - name: script
      nilable: true
      type: string
  outputs: {}
SaveAddOns: {}
SaveBindings:
  inputs:
  - - type: number
  outputs: {}
SaveRaidProfileCopy: {}
SaveView:
  inputs:
  - - name: view
      type: number
  outputs: {}
Screenshot:
  inputs:
  - {}
  outputs: {}
ScriptsDisallowedForBeta:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
scrub:
  stdlib: scrub
securecall:
  frameworks:
  - env
  impl: securecall
securecallfunction:
  stdlib: securecallfunction
SecureCmdOptionParse:
  impl: SecureCmdOptionParse
  inputs:
  - - type: string
  outputs:
  - name: result
    nilable: true
    type: string
  - name: target
    nilable: true
    type: string
secureexecuterange:
  stdlib: secureexecuterange
select:
  stdlib: select
SelectActiveQuest: {}
SelectAvailableQuest: {}
SelectCraft:
  inputs:
  - - name: id
      type: number
  outputs: {}
SelectedRealmName: {}
SelectQuestLogEntry: {}
SelectTradeSkill:
  inputs:
  - - name: skillIndex
      type: number
  outputs: {}
SelectTrainerService: {}
SellCursorItem: {}
SendChatMessage:
  inputs:
  - - name: message
      type: string
    - name: type
      type: string
    - name: languageID
      nilable: true
      type: number
    - name: target
      nilable: true
      type: string
  outputs: {}
SendMail: {}
SendSoRByText: {}
SendSystemMessage:
  frameworks:
  - api
  impl: SendSystemMessage
  inputs:
  - - name: msg
      type: string
  outputs: {}
  states:
  - Time
SetAbandonQuest: {}
SetAchievementComparisonUnit: {}
SetActionBarToggles: {}
SetActionUIButton: {}
SetActiveTalentGroup: {}
SetAddonVersionCheck: {}
SetAllowDangerousScripts: {}
SetAllowLowLevelRaid: {}
SetArenaTeamRosterSelection: {}
SetArenaTeamRosterShowOffline: {}
SetAuctionsTabShowing:
  inputs:
  - - name: value
      type: boolean
  outputs: {}
SetAutoDeclineGuildInvites: {}
SetBattlefieldScoreFaction: {}
SetBinding: {}
SetBindingClick: {}
SetBindingItem: {}
SetBindingMacro: {}
SetBindingSpell: {}
SetCemeteryPreference: {}
SetChannelOwner: {}
SetChannelPassword: {}
SetChatColorNameByClass: {}
SetChatWindowAlpha: {}
SetChatWindowColor: {}
SetChatWindowDocked: {}
SetChatWindowLocked: {}
SetChatWindowName: {}
SetChatWindowSavedDimensions: {}
SetChatWindowSavedPosition: {}
SetChatWindowShown: {}
SetChatWindowSize:
  inputs:
  - - name: chatFrameID
      type: number
    - name: fontSize
      type: number
  outputs: {}
SetChatWindowUninteractable: {}
SetConsoleKey:
  inputs:
  - - name: key
      nilable: true
      type: string
  outputs: {}
SetCraftFilter: {}
SetCurrencyBackpack: {}
SetCurrencyUnused: {}
SetCurrentGraphicsSetting: {}
SetCurrentGuildBankTab: {}
SetCurrentTitle: {}
SetCursor: {}
SetDefaultVideoOptions: {}
SetDungeonDifficultyID: {}
seterrorhandler: {}
SetEuropeanNumbers: {}
SetEveryoneIsAssistant: {}
SetFactionActive: {}
SetFactionInactive: {}
setfenv:
  stdlib: setfenv
SetGamePadCursorControl: {}
SetGamePadFreeLook: {}
SetGuildBankTabInfo: {}
SetGuildBankTabItemWithdraw: {}
SetGuildBankTabPermissions: {}
SetGuildBankText: {}
SetGuildBankWithdrawGoldLimit: {}
SetGuildInfoText: {}
SetGuildMemberRank: {}
SetGuildRosterSelection: {}
SetGuildRosterShowOffline: {}
SetInventoryPortraitTexture: {}
SetInWorldUIVisibility: {}
SetLegacyRaidDifficultyID: {}
SetLootMethod: {}
SetLootPortrait: {}
SetLootThreshold: {}
SetMacroItem: {}
SetMacroSpell: {}
setmetatable:
  stdlib: setmetatable
SetModifiedClick:
  inputs:
  - - type: string
    - type: string
  outputs: {}
SetMouselookOverrideBinding: {}
SetMoveEnabled: {}
SetMultiCastSpell: {}
SetOptOutOfLoot: {}
SetOverrideBinding: {}
SetOverrideBindingClick: {}
SetOverrideBindingItem: {}
SetOverrideBindingMacro: {}
SetOverrideBindingSpell: {}
SetPartyAssignment:
  inputs:
  - - name: role
      type: string
    - name: unit
      type: unit
  outputs: {}
SetPendingReportArenaTeamName: {}
SetPetStablePaperdoll: {}
SetPortraitTexture:
  impl: SetPortraitTexture
  inputs:
  - - name: textureObject
      type: table
    - name: unitToken
      type: string
  outputs: {}
SetPortraitTextureFromCreatureDisplayID:
  inputs:
  - - name: textureObject
      type: table
    - name: creatureDisplayID
      type: number
  outputs: {}
SetPortraitToTexture: {}
SetPVP: {}
SetRaidDifficultyID: {}
SetRaidProfileOption: {}
SetRaidProfileSavedPosition: {}
SetRaidSubgroup: {}
SetRaidTarget:
  inputs:
  - - type: string
    - type: number
  outputs: {}
SetRaidTargetProtected: {}
SetScreenResolution: {}
SetSelectedAuctionItem: {}
SetSelectedBattlefield: {}
SetSelectedDisplayChannel: {}
SetSelectedFaction: {}
SetSelectedScreenResolutionIndex: {}
SetSelectedSkill: {}
SetSendMailCOD: {}
SetSendMailMoney: {}
SetSendMailShowing:
  inputs:
  - - name: sendMailShowing
      type: boolean
  outputs: {}
SetSpellbookPetAction: {}
SetSuperTrackedQuestID: {}
SetTalentGroupRole: {}
SetTaxiBenchmarkMode:
  inputs:
  - - name: value
      nilable: true
      type: boolean
  outputs: {}
SetTaxiMap: {}
SetTradeMoney:
  inputs:
  - - name: money
      type: number
  outputs: {}
SetTradeSkillInvSlotFilter: {}
SetTradeSkillItemLevelFilter: {}
SetTradeSkillItemNameFilter: {}
SetTradeSkillSubClassFilter: {}
SetTrainerServiceTypeFilter:
  inputs:
  - - name: type
      type: string
    - name: status
      type: number
  outputs: {}
SetTurnEnabled: {}
SetUIVisibility: {}
SetUnitCursorTexture:
  inputs:
  - - name: textureObject
      type: table
    - name: unit
      type: string
    - name: style
      nilable: true
      type: number
    - name: includeLowPriority
      nilable: true
      type: boolean
  outputs:
  - name: hasCursor
    type: boolean
SetupFullscreenScale: {}
SetView:
  inputs:
  - - name: view
      type: number
  outputs: {}
SetWatchedFactionIndex: {}
ShiftQuestWatches: {}
ShouldKnowUnitHealth:
  inputs:
  - - name: unit
      type: string
  outputs:
  - name: shouldKnowUnitHealth
    type: boolean
ShowBossFrameWhenUninteractable: {}
ShowBuybackSellCursor: {}
ShowCloak: {}
ShowHelm: {}
ShowingCloak: {}
ShowingHelm: {}
ShowInventorySellCursor: {}
ShowQuestComplete: {}
ShowQuestOffer: {}
ShowRepairCursor: {}
SignPetition: {}
sin:
  impl: sin
  nowrap: true
SitStandOrDescendStart:
  inputs:
  - {}
  outputs: {}
SocketInventoryItem: {}
sort:
  alias: table.sort
SortArenaTeamRoster: {}
SortAuctionApplySort: {}
SortAuctionClearSort: {}
SortAuctionItems: {}
SortAuctionSetSort: {}
SortBattlefieldScoreData: {}
SortBGList: {}
SortGuildRoster: {}
SortQuests: {}
SortQuestSortTypes: {}
SortQuestWatches: {}
Sound_ChatSystem_GetInputDriverNameByIndex: {}
Sound_ChatSystem_GetNumInputDrivers: {}
Sound_ChatSystem_GetNumOutputDrivers: {}
Sound_ChatSystem_GetOutputDriverNameByIndex: {}
Sound_GameSystem_GetInputDriverNameByIndex: {}
Sound_GameSystem_GetNumInputDrivers: {}
Sound_GameSystem_GetNumOutputDrivers:
  outputs:
  - type: number
Sound_GameSystem_GetOutputDriverNameByIndex: {}
Sound_GameSystem_RestartSoundSystem: {}
SpellCancelQueuedSpell:
  inputs:
  - {}
  outputs: {}
SpellCanTargetItem: {}
SpellCanTargetItemID: {}
SpellCanTargetUnit: {}
SpellGetVisibilityInfo: {}
SpellHasRange: {}
SpellIsAlwaysShown: {}
SpellIsSelfBuff: {}
SpellIsTargeting: {}
SpellStopCasting:
  inputs:
  - {}
  outputs:
  - name: value
    type: boolean
SpellStopTargeting:
  inputs:
  - {}
  outputs:
  - type: boolean
SpellTargetItem: {}
SpellTargetUnit: {}
SplitGuildBankItem: {}
sqrt:
  alias: math.sqrt
StablePet: {}
StartAttack: {}
StartAuction: {}
StartAutoRun:
  inputs:
  - {}
  outputs: {}
StartDuel:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs: {}
StartSpectatorWarGame: {}
StartWarGame: {}
StartWarGameByName:
  inputs:
  - - name: args
      nilable: true
      type: string
  outputs: {}
StopAttack: {}
StopAutoRun:
  inputs:
  - {}
  outputs: {}
StopCinematic: {}
StopMacro:
  inputs:
  - {}
  outputs: {}
StopMusic: {}
StopSound: {}
StopTradeSkillRepeat: {}
StoreSecureReference: {}
StrafeLeftStart:
  inputs:
  - {}
  outputs: {}
StrafeLeftStop: {}
StrafeRightStart:
  inputs:
  - {}
  outputs: {}
StrafeRightStop: {}
strbyte:
  alias: string.byte
strcmputf8i:
  stdlib: strcmputf8i
strconcat:
  stdlib: strconcat
strfind:
  alias: string.find
string.byte:
  stdlib: string.byte
string.char:
  stdlib: string.char
string.find:
  stdlib: string.find
string.format:
  stdlib: string.format
string.gfind:
  stdlib: string.gfind
string.gmatch:
  stdlib: string.gmatch
string.gsub:
  stdlib: string.gsub
string.join:
  stdlib: strjoin
string.len:
  stdlib: string.len
string.lower:
  stdlib: string.lower
string.match:
  stdlib: string.match
string.rep:
  stdlib: string.rep
string.reverse:
  stdlib: string.reverse
string.split:
  stdlib: strsplit
string.sub:
  stdlib: string.sub
string.trim:
  stdlib: strtrim
string.upper:
  stdlib: string.upper
strjoin:
  alias: string.join
strlen:
  alias: string.len
strlenutf8:
  stdlib: strlenutf8
strlower:
  alias: string.lower
strmatch:
  alias: string.match
strrep:
  alias: string.rep
strsplit:
  alias: string.split
strsplittable: {}
strsub:
  alias: string.sub
strtrim:
  alias: string.trim
strupper:
  alias: string.upper
Stuck: {}
SubmitRequiredGuildRename: {}
SummonFriend: {}
SwapRaidSubgroup: {}
table.concat:
  stdlib: table.concat
table.foreach:
  stdlib: table.foreach
table.foreachi:
  stdlib: table.foreachi
table.getn:
  stdlib: table.getn
table.insert:
  stdlib: table.insert
table.maxn:
  stdlib: table.maxn
table.remove:
  stdlib: table.remove
table.removemulti:
  stdlib: table.removemulti
table.setn:
  stdlib: table.setn
table.sort:
  stdlib: table.sort
table.wipe:
  stdlib: table.wipe
TakeInboxItem: {}
TakeInboxMoney: {}
TakeInboxTextItem: {}
TakeTaxiNode: {}
tan:
  impl: tan
  nowrap: true
TargetDirectionEnemy: {}
TargetDirectionFinished: {}
TargetDirectionFriend: {}
TargetLastEnemy:
  inputs:
  - {}
  outputs: {}
TargetLastFriend: {}
TargetLastTarget:
  inputs:
  - {}
  outputs: {}
TargetNearest: {}
TargetNearestEnemy:
  inputs:
  - - name: reverse
      nilable: true
      type: boolean
  outputs: {}
TargetNearestEnemyPlayer:
  inputs:
  - - name: reverse
      nilable: true
      type: boolean
  outputs: {}
TargetNearestFriend:
  inputs:
  - - name: reverse
      nilable: true
      type: boolean
  outputs: {}
TargetNearestFriendPlayer:
  inputs:
  - - name: reverse
      nilable: true
      type: boolean
  outputs: {}
TargetNearestPartyMember: {}
TargetNearestRaidMember: {}
TargetPriorityHighlightEnd:
  inputs:
  - - nilable: true
      type: boolean
  outputs: {}
TargetPriorityHighlightStart:
  inputs:
  - - nilable: true
      type: boolean
  outputs: {}
TargetToggle: {}
TargetTotem: {}
TargetUnit:
  inputs:
  - - nilable: true
      type: unit
  outputs: {}
TaxiGetDestX: {}
TaxiGetDestY: {}
TaxiGetNodeSlot: {}
TaxiGetSrcX: {}
TaxiGetSrcY: {}
TaxiIsDirectFlight: {}
TaxiNodeCost: {}
TaxiNodeGetType: {}
TaxiNodeName: {}
TaxiNodePosition: {}
TaxiRequestEarlyLanding: {}
time:
  stdlib: time
TimeoutResurrect: {}
tinsert:
  alias: table.insert
ToggleAnimKitDisplay:
  inputs:
  - {}
  outputs: {}
ToggleAutoRun:
  inputs:
  - {}
  outputs: {}
ToggleCollision:
  debug: true
  inputs:
  - {}
  outputs: {}
ToggleCollisionDisplay:
  debug: true
  inputs:
  - {}
  outputs: {}
ToggleDebugAIDisplay:
  inputs:
  - {}
  outputs: {}
TogglePerformancePause:
  debug: true
  inputs:
  - {}
  outputs: {}
TogglePerformanceValues:
  debug: true
  inputs:
  - - type: number
  outputs: {}
TogglePetAutocast: {}
TogglePlayerBounds:
  debug: true
  inputs:
  - {}
  outputs: {}
TogglePortals:
  debug: true
  inputs:
  - {}
  outputs: {}
TogglePVP:
  inputs:
  - {}
  outputs: {}
ToggleRun:
  inputs:
  - {}
  outputs: {}
ToggleSelfHighlight:
  inputs:
  - {}
  outputs:
  - type: boolean
ToggleSheath:
  inputs:
  - {}
  outputs: {}
ToggleSpellAutocast: {}
ToggleTris:
  debug: true
  inputs:
  - {}
  outputs: {}
ToggleWindowed:
  inputs:
  - {}
  outputs: {}
tonumber:
  stdlib: tonumber
tostring:
  stdlib: tostring
TradeSkillOnlyShowMakeable: {}
tremove:
  alias: table.remove
TriggerTutorial: {}
TurnInArenaPetition: {}
TurnInGuildCharter: {}
TurnLeftStart:
  inputs:
  - {}
  outputs: {}
TurnLeftStop: {}
TurnOrActionStart:
  inputs:
  - {}
  outputs: {}
TurnOrActionStop:
  inputs:
  - {}
  outputs: {}
TurnRightStart:
  inputs:
  - {}
  outputs: {}
TurnRightStop: {}
type:
  stdlib: type
UninviteUnit: {}
UnitAffectingCombat:
  inputs:
  - - type: string
  outputs:
  - type: boolean
UnitArmor:
  inputs:
  - - type: string
  outputs:
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
UnitAttackBothHands:
  inputs:
  - - type: string
  outputs:
  - type: number
  - type: number
  - type: number
  - type: number
UnitAttackPower:
  inputs:
  - - type: string
  outputs:
  - type: number
  - type: number
  - type: number
UnitAttackSpeed:
  inputs:
  - - type: string
  outputs:
  - type: number
  - type: number
UnitAura: {}
UnitBuff: {}
UnitCanAssist:
  inputs:
  - - type: string
    - type: string
  outputs:
  - type: oneornil
UnitCanAttack:
  inputs:
  - - type: string
    - type: string
  outputs:
  - type: oneornil
UnitCanCooperate:
  inputs:
  - - type: string
    - type: string
  outputs:
  - type: oneornil
UnitCastingInfo:
  inputs:
  - - type: string
UnitChannelInfo:
  inputs:
  - - type: string
UnitCharacterPoints:
  inputs:
  - - type: string
  outputs:
  - type: number
UnitClass:
  impl: UnitClass
  inputs:
  - - name: unit
      type: unit
  mayreturnnothing: true
  outputs:
  - name: className
    type: string
  - name: classFilename
    type: string
  - name: classID
    type: number
  sqls:
  - lookup: UnitClass
UnitClassBase:
  impl: UnitClassBase
  inputs:
  - - name: unit
      type: unit
  mayreturnnothing: true
  outputs:
  - name: classFilename
    type: string
  - name: classID
    type: number
  sqls:
  - lookup: UnitClassBase
UnitClassification:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs:
  - name: classification
    stub: normal
    type: string
UnitControllingVehicle: {}
UnitCreatureFamily: {}
UnitCreatureType: {}
UnitDamage:
  inputs:
  - - type: string
  outputs:
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
UnitDebuff: {}
UnitDefense: {}
UnitDetailedThreatSituation: {}
UnitDistanceSquared: {}
UnitExists:
  impl: UnitExists
  inputs:
  - - nilable: true
      type: unit
  outputs:
  - type: boolean
UnitFactionGroup:
  impl: UnitFactionGroup
  inputs:
  - - name: unit
      type: unit
  mayreturnnothing: true
  outputs:
  - name: factionTag
    type: string
  - name: localizedFactionName
    type: string
  sqls:
  - lookup: UnitFactionGroup
UnitFullName:
  inputs:
  - - type: string
  outputs:
  - type: string
  - type: string
UnitGetAvailableRoles: {}
UnitGetIncomingHeals:
  inputs:
  - - type: string
    - nilable: true
      type: string
  outputs:
  - type: number
UnitGroupRolesAssigned:
  inputs:
  - - name: unit
      nilable: true
      type: string
  outputs:
  - name: role
    stub: DAMAGER
    type: string
UnitGUID:
  impl: UnitGUID
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: guid
    nilable: true
    type: string
UnitHasIncomingResurrection:
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: isBeingResurrected
    type: boolean
UnitHasRelicSlot:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: boolean
UnitHasVehiclePlayerFrameUI:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: boolean
UnitHasVehicleUI:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: oneornil
UnitHealth:
  inputs:
  - - type: string
  outputs:
  - type: number
UnitHealthMax:
  inputs:
  - - type: string
  outputs:
  - type: number
UnitHPPerStamina:
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: value
    type: number
UnitInAnyGroup: {}
UnitInBattleground: {}
UnitInOtherParty: {}
UnitInParty:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs:
  - name: inParty
    type: boolean
UnitInPhase: {}
UnitInRaid:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: boolean
UnitInRange:
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: inRange
    stub: true
    type: boolean
  - name: checkedRange
    stub: true
    type: boolean
UnitInSubgroup: {}
UnitInVehicle:
  inputs:
  - - type: string
  outputs:
  - type: boolean
UnitInVehicleControlSeat: {}
UnitInVehicleHidesPetFrame: {}
UnitIsAFK:
  inputs:
  - - type: string
  outputs:
  - type: oneornil
UnitIsCharmed:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs:
  - name: value
    type: boolean
UnitIsCivilian: {}
UnitIsConnected:
  inputs:
  - - name: unit
      type: string
  outputs:
  - name: isConnected
    type: boolean
UnitIsControlling: {}
UnitIsCorpse: {}
UnitIsDead:
  inputs:
  - - type: string
  outputs:
  - type: boolean
UnitIsDeadOrGhost:
  inputs:
  - - type: string
  outputs:
  - type: boolean
UnitIsDND:
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: isDND
    type: oneornil
UnitIsEnemy:
  inputs:
  - - name: unit
      type: unit
    - name: otherUnit
      type: unit
  outputs:
  - name: isEnemy
    type: oneornil
UnitIsFeignDeath:
  inputs:
  - - type: string
  outputs:
  - type: oneornil
UnitIsFriend:
  inputs:
  - - type: string
    - type: string
  outputs:
  - type: oneornil
UnitIsGameObject: {}
UnitIsGhost:
  inputs:
  - - type: string
  outputs:
  - type: boolean
UnitIsGroupAssistant:
  inputs:
  - - type: string
  outputs:
  - type: boolean
UnitIsGroupLeader:
  inputs:
  - - type: string
  outputs:
  - type: boolean
UnitIsInMyGuild: {}
UnitIsInteractable: {}
UnitIsOtherPlayersPet:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: boolean
UnitIsOwnerOrControllerOfUnit:
  inputs:
  - - name: controllingUnit
      type: string
    - name: controlledUnit
      type: string
  outputs:
  - name: unitIsOwnerOrControllerOfUnit
    type: boolean
UnitIsPlayer:
  impl: UnitIsPlayer
  inputs:
  - - nilable: true
      type: unit
  outputs:
  - type: boolean
UnitIsPossessed:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: boolean
UnitIsPVP:
  inputs:
  - - type: unit
  outputs:
  - type: boolean
UnitIsPVPFreeForAll:
  inputs:
  - - type: unit
  outputs:
  - type: boolean
UnitIsPVPSanctuary: {}
UnitIsRaidOfficer: {}
UnitIsSameServer: {}
UnitIsTapDenied:
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: unitIsTapDenied
    type: boolean
UnitIsTrivial: {}
UnitIsUnconscious: {}
UnitIsUnit:
  impl: UnitIsUnit
  inputs:
  - - type: unit
    - type: unit
  outputs:
  - type: boolean
UnitIsVisible:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: boolean
UnitLeadsAnyGroup: {}
UnitLevel:
  impl: UnitLevel
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: level
    type: number
UnitName:
  impl: UnitName
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: name
    nilable: true
    type: string
  - name: realm
    nilable: true
    type: string
UnitNameUnmodified:
  inputs:
  - - type: string
  outputs:
  - type: string
UnitOnTaxi:
  inputs:
  - - type: string
  outputs:
  - type: oneornil
UnitPlayerControlled:
  inputs:
  - - nilable: true
      type: string
  outputs:
  - type: boolean
UnitPlayerOrPetInParty:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs:
  - name: value
    type: boolean
UnitPlayerOrPetInRaid:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs:
  - name: value
    type: boolean
UnitPosition: {}
UnitPower:
  inputs:
  - - name: unitToken
      type: string
    - default: NumPowerTypes
      name: powerType
      type: number
    - default: false
      name: unmodified
      type: boolean
  outputs:
  - name: power
    type: number
UnitPowerDisplayMod:
  inputs:
  - - name: powerType
      type: number
  outputs:
  - name: displayMod
    type: number
UnitPowerMax:
  inputs:
  - - name: unitToken
      type: string
    - default: NumPowerTypes
      name: powerType
      type: number
    - default: false
      name: unmodified
      type: boolean
  outputs:
  - name: maxPower
    type: number
UnitPowerType:
  impl: UnitPowerType
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: powerType
    type: number
  - name: powerToken
    nilable: true
    type: string
  - name: altR
    nilable: true
    type: number
  - name: altG
    nilable: true
    type: number
  - name: altB
    nilable: true
    type: number
  sqls:
  - lookup: UnitPowerType
UnitPVPName:
  inputs:
  - - type: string
  outputs:
  - type: string
UnitPVPRank:
  inputs:
  - - type: string
  outputs:
  - type: number
UnitRace:
  impl: UnitRace
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: race
    type: string
  - name: fileName
    type: string
  - name: id
    type: number
  sqls:
  - lookup: UnitRace
UnitRangedAttack:
  inputs:
  - - type: string
  outputs:
  - type: number
  - type: number
UnitRangedAttackPower: {}
UnitRangedDamage: {}
UnitReaction:
  inputs:
  - - type: string
    - type: string
  outputs:
  - type: number
UnitRealmRelationship:
  inputs:
  - - type: string
  outputs:
  - type: number
UnitResistance:
  inputs:
  - - name: unit
      type: string
    - name: id
      type: number
  outputs:
  - name: base
    type: number
  - name: resistance
    type: number
  - name: positive
    type: number
  - name: negative
    type: number
UnitSelectionColor:
  inputs:
  - - name: unit
      type: unit
    - name: useExtendedColors
      nilable: true
      type: boolean
  outputs:
  - name: red
    type: number
  - name: green
    type: number
  - name: blue
    type: number
  - name: alpha
    type: number
UnitSetRole: {}
UnitSex:
  impl: UnitSex
  inputs:
  - - name: unit
      type: unit
  outputs:
  - name: sex
    nilable: true
    type: number
UnitShouldDisplayName: {}
UnitStat:
  inputs:
  - - type: string
    - type: number
  outputs:
  - type: number
  - type: number
  - type: number
  - type: number
UnitSwitchToVehicleSeat: {}
UnitTargetsVehicleInRaidUI:
  inputs:
  - - name: unit
      nilable: true
      type: unit
  outputs:
  - name: value
    type: boolean
UnitThreatPercentageOfLead: {}
UnitThreatSituation: {}
UnitTrialBankedLevels: {}
UnitTrialXP: {}
UnitUsingVehicle: {}
UnitVehicleSeatCount: {}
UnitVehicleSeatInfo: {}
UnitVehicleSkin: {}
UnitVehicleSkinType: {}
UnitXP:
  inputs:
  - - type: string
  outputs:
  - type: number
UnitXPMax:
  inputs:
  - - type: string
  outputs:
  - type: number
UnmuteSoundFile: {}
unpack:
  stdlib: unpack
UnstablePet: {}
UpdateAddOnCPUUsage: {}
UpdateAddOnMemoryUsage:
  inputs:
  - {}
  outputs: {}
UpdateInventoryAlertStatus: {}
UpdateWindow: {}
UseAction:
  inputs:
  - - type: number
    - nilable: true
      type: unknown
    - type: string
  outputs: {}
  protection: secure
UseInventoryItem: {}
UseItemByName: {}
UseQuestLogSpecialItem: {}
VehicleAimDecrement:
  inputs:
  - - name: amount
      nilable: true
      type: number
  outputs: {}
VehicleAimDownStart:
  inputs:
  - {}
  outputs: {}
VehicleAimDownStop:
  inputs:
  - {}
  outputs: {}
VehicleAimGetNormPower: {}
VehicleAimIncrement:
  inputs:
  - - name: amount
      nilable: true
      type: number
  outputs: {}
VehicleAimRequestAngle: {}
VehicleAimSetNormPower: {}
VehicleAimUpStart:
  inputs:
  - {}
  outputs: {}
VehicleAimUpStop:
  inputs:
  - {}
  outputs: {}
VehicleCameraZoomIn: {}
VehicleCameraZoomOut: {}
VehicleExit:
  inputs:
  - {}
  outputs: {}
VehicleNextSeat:
  inputs:
  - {}
  outputs: {}
VehiclePrevSeat:
  inputs:
  - {}
  outputs: {}
WarGameRespond: {}
wipe:
  alias: table.wipe
WithdrawGuildBankMoney: {}
xpcall:
  stdlib: xpcall
