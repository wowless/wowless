---
AbandonSkill: {}
abs:
  alias: math.abs
AcceptAreaSpiritHeal:
  inputs: {}
  outputs: {}
AcceptBattlefieldPort:
  inputs:
  - type: number
  - type: boolean
  outputs:
  - type: boolean
  protection: hardware
AcceptDuel: {}
AcceptGroup: {}
AcceptGuild: {}
AcceptProposal: {}
AcceptQuest: {}
AcceptResurrect: {}
AcceptSockets: {}
AcceptSpellConfirmationPrompt: {}
AcceptTrade: {}
AcknowledgeAutoAcceptQuest: {}
AcknowledgeSurvey: {}
acos:
  nowrap: true
  stdlib: acos
ActionBindsItem: {}
ActionHasRange: {}
AddAutoQuestPopUp: {}
AddChatWindowChannel: {}
AddChatWindowMessages:
  inputs:
  - name: chatFrameID
    type: number
  - name: group
    type: string
  outputs: {}
addframetext: {}
AddTradeMoney: {}
Ambiguate:
  inputs:
  - name: fullName
    type: string
  - name: context
    type: string
  outputs:
  - name: name
    type: string
AntiAliasingSupported:
  inputs: {}
  outputs:
  - type: boolean
ArchaeologyGetIconInfo: {}
ArchaeologyMapUpdateAll: {}
ArcheologyGetVisibleBlobID: {}
AreAccountAchievementsHidden:
  inputs: {}
  outputs:
  - name: hidden
    type: boolean
AreDangerousScriptsAllowed:
  inputs: {}
  outputs:
  - name: value
    stub: true
    type: boolean
AreTalentsLocked: {}
AscendStop:
  inputs: {}
  outputs: {}
asin:
  nowrap: true
  stdlib: asin
assert:
  stdlib: assert
AssistUnit:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs: {}
atan:
  nowrap: true
  stdlib: atan
atan2:
  nowrap: true
  stdlib: atan2
AttachGlyphToSpell: {}
AttackTarget:
  inputs: {}
  outputs: {}
AutoChooseCurrentGraphicsSetting: {}
AutoEquipCursorItem: {}
AutoLootMailItem: {}
AutoStoreGuildBankItem: {}
BankButtonIDToInvSlotID:
  inputs:
  - type: number
  - nilable: true
    type: number
  outputs:
  - type: number
BattlefieldMgrEntryInviteResponse: {}
BattlefieldMgrExitRequest: {}
BattlefieldMgrQueueInviteResponse: {}
BattlefieldMgrQueueRequest: {}
BeginTrade: {}
BindEnchant: {}
bit.arshift:
  stdlib: bit.arshift
bit.band:
  stdlib: bit.band
bit.bnot:
  stdlib: bit.bnot
bit.bor:
  stdlib: bit.bor
bit.bxor:
  stdlib: bit.bxor
bit.lshift:
  stdlib: bit.lshift
bit.mod:
  stdlib: bit.mod
bit.rshift:
  stdlib: bit.rshift
BNAcceptFriendInvite: {}
BNCheckBattleTagInviteToGuildMember: {}
BNCheckBattleTagInviteToUnit: {}
BNConnected: {}
BNDeclineFriendInvite: {}
BNFeaturesEnabled:
  inputs: {}
  outputs:
  - type: boolean
BNFeaturesEnabledAndConnected:
  inputs: {}
  outputs:
  - type: boolean
BNGetBlockedInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: blockID
    type: number
  - name: blockName
    type: string
BNGetDisplayName: {}
BNGetFOFInfo: {}
BNGetFriendIndex: {}
BNGetFriendInviteInfo:
  inputs:
  - name: inviteIndex
    type: number
  outputs:
  - name: inviteID
    type: number
  - name: accountName
    type: string
  - name: isBattleTag
    type: boolean
BNGetInfo:
  inputs: {}
  outputs:
  - type: nil
  - type: string
  - type: number
  - type: string
  - type: boolean
  - type: boolean
  - type: boolean
BNGetNumBlocked:
  inputs: {}
  outputs:
  - name: numBlocked
    type: number
BNGetNumFOF: {}
BNGetNumFriendInvites:
  inputs: {}
  outputs:
  - name: numInvites
    type: number
BNGetNumFriends:
  inputs: {}
  outputs:
  - name: numBNetTotal
    type: number
  - name: numBNetOnline
    type: number
  - name: numBNetFavorite
    type: number
  - name: numBNetFavoriteOnline
    type: number
BNGetSelectedBlock: {}
BNGetSelectedFriend: {}
BNInviteFriend: {}
BNIsBlocked: {}
BNIsFriend: {}
BNIsSelf: {}
BNRemoveFriend: {}
BNRequestFOFInfo: {}
BNRequestInviteFriend: {}
BNSendFriendInvite: {}
BNSendFriendInviteByID: {}
BNSendGameData: {}
BNSendVerifiedBattleTagInvite: {}
BNSendWhisper: {}
BNSetAFK: {}
BNSetBlocked: {}
BNSetCustomMessage: {}
BNSetDND: {}
BNSetFriendFavoriteFlag: {}
BNSetFriendNote: {}
BNSetSelectedBlock: {}
BNSetSelectedFriend: {}
BNSummonFriendByIndex: {}
BNTokenFindName: {}
BreakUpLargeNumbers:
  inputs:
  - name: largeNumber
    type: number
  - default: false
    name: natural
    type: boolean
  outputs:
  - name: result
    type: string
BuybackItem: {}
BuyGuildBankTab: {}
BuyGuildCharter: {}
BuyMerchantItem: {}
BuyReagentBank: {}
BuyTrainerService: {}
C_AccountInfo.GetIDFromBattleNetAccountGUID:
  inputs:
  - name: battleNetAccountGUID
    type: string
  outputs:
  - name: battleNetAccountID
    type: number
C_AccountInfo.IsGUIDBattleNetAccountType:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: isBNet
    type: boolean
C_AccountInfo.IsGUIDRelatedToLocalAccount:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: isLocalUser
    type: boolean
C_AchievementInfo.GetRewardItemID:
  inputs:
  - name: achievementID
    type: number
  outputs:
  - name: rewardItemID
    nilable: true
    type: number
C_AchievementInfo.GetSupercedingAchievements:
  inputs:
  - name: achievementID
    type: number
  outputs:
  - name: supercedingAchievements
    type:
      arrayof: number
C_AchievementInfo.IsGuildAchievement:
  inputs:
  - name: achievementId
    type: number
  outputs:
  - name: isGuild
    type: boolean
C_AchievementInfo.IsValidAchievement:
  inputs:
  - name: achievementId
    type: number
  outputs:
  - name: isValidAchievement
    type: boolean
C_AchievementInfo.SetPortraitTexture:
  inputs:
  - name: textureObject
    type: Texture
  outputs: {}
C_ActionBar.EnableActionRangeCheck:
  inputs:
  - name: actionID
    type: number
  - name: enable
    type: boolean
  outputs: {}
C_ActionBar.FindFlyoutActionButtons:
  inputs:
  - name: flyoutID
    type: number
  outputs:
  - name: slots
    type:
      arrayof: number
C_ActionBar.FindPetActionButtons:
  inputs:
  - name: petActionID
    type: number
  outputs:
  - name: slots
    type:
      arrayof: number
C_ActionBar.FindSpellActionButtons:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: slots
    type:
      arrayof: number
C_ActionBar.GetBonusBarIndexForSlot:
  inputs:
  - name: slotID
    type: number
  outputs:
  - name: bonusBarIndex
    nilable: true
    type: number
C_ActionBar.GetItemActionOnEquipSpellID:
  inputs:
  - name: actionID
    type: number
  outputs:
  - name: onEquipSpellID
    nilable: true
    type: number
C_ActionBar.GetPetActionPetBarIndices:
  inputs:
  - name: petActionID
    type: number
  outputs:
  - name: slots
    type:
      arrayof: number
C_ActionBar.GetProfessionQuality:
  inputs:
  - name: actionID
    type: number
  outputs:
  - name: quality
    nilable: true
    type: number
C_ActionBar.HasFlyoutActionButtons:
  inputs:
  - name: flyoutID
    type: number
  outputs:
  - name: hasFlyoutActionButtons
    type: boolean
C_ActionBar.HasPetActionButtons:
  inputs:
  - name: petActionID
    type: number
  outputs:
  - name: hasPetActionButtons
    type: boolean
C_ActionBar.HasPetActionPetBarIndices:
  inputs:
  - name: petActionID
    type: number
  outputs:
  - name: hasPetActionPetBarIndices
    type: boolean
C_ActionBar.HasSpellActionButtons:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: hasSpellActionButtons
    type: boolean
C_ActionBar.IsAutoCastPetAction:
  inputs:
  - name: slotID
    type: number
  outputs:
  - name: isAutoCastPetAction
    type: boolean
C_ActionBar.IsEnabledAutoCastPetAction:
  inputs:
  - name: slotID
    type: number
  outputs:
  - name: isEnabledAutoCastPetAction
    type: boolean
C_ActionBar.IsHarmfulAction:
  inputs:
  - name: actionID
    type: number
  - name: useNeutral
    type: boolean
  outputs:
  - name: isHarmful
    type: boolean
C_ActionBar.IsHelpfulAction:
  inputs:
  - name: actionID
    type: number
  - name: useNeutral
    type: boolean
  outputs:
  - name: isHelpful
    type: boolean
C_ActionBar.IsOnBarOrSpecialBar:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: isOnBarOrSpecialBar
    type: boolean
C_ActionBar.PutActionInSlot:
  inputs:
  - name: slotID
    type: number
  outputs: {}
C_ActionBar.ShouldOverrideBarShowHealthBar:
  inputs: {}
  outputs:
  - name: showHealthBar
    type: boolean
C_ActionBar.ShouldOverrideBarShowManaBar:
  inputs: {}
  outputs:
  - name: showManaBar
    type: boolean
C_ActionBar.ToggleAutoCastPetAction:
  inputs:
  - name: slotID
    type: number
  outputs: {}
C_AddOns.DisableAddOn:
  inputs:
  - name: name
    type: uiAddon
  - default: '0'
    name: character
    type: string
  outputs: {}
C_AddOns.DisableAllAddOns:
  inputs:
  - name: character
    nilable: true
    type: string
  outputs: {}
C_AddOns.DoesAddOnExist:
  inputs:
  - name: name
    type: uiAddon
  outputs:
  - name: exists
    type: boolean
C_AddOns.EnableAddOn:
  inputs:
  - name: name
    type: uiAddon
  - default: '0'
    name: character
    type: string
  outputs: {}
C_AddOns.EnableAllAddOns:
  inputs:
  - name: character
    nilable: true
    type: string
  outputs: {}
C_AddOns.GetAddOnDependencies:
  inputs:
  - name: name
    type: uiAddon
  outputs:
  - name: unpackedPrimitiveType
    type: string
C_AddOns.GetAddOnEnableState:
  impl: GetAddOnEnableState
  inputs:
  - name: name
    type: uiAddon
  - default: '0'
    name: character
    type: string
  outputs:
  - name: state
    type:
      enum: AddOnEnableState
C_AddOns.GetAddOnInfo:
  impl: GetAddOnInfo
  inputs:
  - name: name
    type: uiAddon
  outputs:
  - name: name
    type: string
  - name: title
    type: string
  - name: notes
    type: string
  - name: loadable
    type: boolean
  - name: reason
    type: string
  - name: security
    type: string
  - name: updateAvailable
    type: boolean
C_AddOns.GetAddOnMetadata:
  impl: GetAddOnMetadata
  inputs:
  - name: name
    type: uiAddon
  - name: variable
    type: string
  mayreturnnothing: true
  outputs:
  - name: value
    type: string
C_AddOns.GetAddOnOptionalDependencies:
  inputs:
  - name: name
    type: uiAddon
  outputs:
  - name: unpackedPrimitiveType
    type: string
C_AddOns.GetNumAddOns:
  impl: GetNumAddOns
  inputs: {}
  outputs:
  - name: numAddOns
    type: number
C_AddOns.IsAddOnLoadable:
  inputs:
  - name: name
    type: uiAddon
  - default: '0'
    name: character
    type: string
  - default: false
    name: demandLoaded
    type: boolean
  outputs:
  - name: loadable
    type: boolean
  - name: reason
    type: string
C_AddOns.IsAddOnLoaded:
  impl: IsAddOnLoaded
  inputs:
  - name: name
    type: uiAddon
  outputs:
  - name: loadedOrLoading
    type: boolean
  - name: loaded
    type: boolean
C_AddOns.IsAddOnLoadOnDemand:
  impl: IsAddOnLoadOnDemand
  inputs:
  - name: name
    type: uiAddon
  outputs:
  - name: loadOnDemand
    type: boolean
C_AddOns.IsAddonVersionCheckEnabled:
  inputs: {}
  outputs:
  - name: isEnabled
    type: boolean
C_AddOns.LoadAddOn:
  impl: LoadAddOn
  inputs:
  - name: name
    type: uiAddon
  outputs:
  - name: loaded
    nilable: true
    type: boolean
  - name: value
    nilable: true
    type: string
C_AddOns.ResetAddOns:
  inputs: {}
  outputs: {}
C_AddOns.ResetDisabledAddOns:
  inputs: {}
  outputs: {}
C_AddOns.SaveAddOns:
  inputs: {}
  outputs: {}
C_AddOns.SetAddonVersionCheck:
  inputs:
  - name: enabled
    type: boolean
  outputs: {}
C_AdventureJournal.ActivateEntry: {}
C_AdventureJournal.CanBeShown: {}
C_AdventureJournal.GetNumAvailableSuggestions: {}
C_AdventureJournal.GetPrimaryOffset: {}
C_AdventureJournal.GetReward: {}
C_AdventureJournal.GetSuggestions: {}
C_AdventureJournal.SetPrimaryOffset: {}
C_AdventureJournal.UpdateSuggestions: {}
C_AdventureMap.Close:
  inputs: {}
  outputs: {}
C_AdventureMap.GetMapID: {}
C_AdventureMap.GetMapInsetDetailTileInfo: {}
C_AdventureMap.GetMapInsetInfo: {}
C_AdventureMap.GetNumMapInsets: {}
C_AdventureMap.GetNumQuestOffers: {}
C_AdventureMap.GetNumZoneChoices: {}
C_AdventureMap.GetQuestInfo: {}
C_AdventureMap.GetQuestOfferInfo: {}
C_AdventureMap.GetZoneChoiceInfo: {}
C_AdventureMap.StartQuest: {}
C_AlliedRaces.GetAllRacialAbilitiesFromID:
  inputs:
  - name: raceID
    type: number
  outputs:
  - name: allDisplayInfo
    type:
      arrayof:
        structure: C_AlliedRaces.AlliedRaceRacialAbility
C_AlliedRaces.GetRaceInfoByID:
  inputs:
  - name: raceID
    type: number
  outputs:
  - name: info
    type:
      structure: C_AlliedRaces.AlliedRaceInfo
C_AnimaDiversion.CloseUI:
  inputs: {}
  outputs: {}
C_AnimaDiversion.GetAnimaDiversionNodes:
  inputs: {}
  outputs:
  - name: animaNodes
    type:
      arrayof:
        structure: C_AnimaDiversion.AnimaDiversionNodeInfo
C_AnimaDiversion.GetOriginPosition:
  inputs: {}
  outputs:
  - name: normalizedPosition
    nilable: true
    type:
      structure: vector2
C_AnimaDiversion.GetReinforceProgress:
  inputs: {}
  outputs:
  - name: progress
    type: number
C_AnimaDiversion.GetTextureKit:
  inputs: {}
  outputs:
  - name: textureKit
    type: string
C_AnimaDiversion.OpenAnimaDiversionUI:
  inputs: {}
  outputs: {}
C_AnimaDiversion.SelectAnimaNode:
  inputs:
  - name: talentID
    type: number
  - name: temporary
    type: boolean
  outputs: {}
C_ArdenwealdGardening.GetGardenData:
  inputs: {}
  outputs:
  - name: data
    type:
      structure: C_ArdenwealdGardening.ArdenwealdGardenData
C_ArdenwealdGardening.IsGardenAccessible:
  inputs: {}
  outputs:
  - name: accessible
    type: boolean
C_AreaPoiInfo.GetAreaPOIForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: areaPoiIDs
    type:
      arrayof: number
C_AreaPoiInfo.GetAreaPOIInfo:
  inputs:
  - name: uiMapID
    type: number
  - name: areaPoiID
    type: number
  outputs:
  - name: poiInfo
    type:
      structure: C_AreaPoiInfo.AreaPOIInfo
C_AreaPoiInfo.GetAreaPOISecondsLeft:
  inputs:
  - name: areaPoiID
    type: number
  outputs:
  - name: secondsLeft
    type: number
C_AreaPoiInfo.IsAreaPOITimed:
  inputs:
  - name: areaPoiID
    type: number
  outputs:
  - name: isTimed
    type: boolean
  - name: hideTimerInTooltip
    nilable: true
    type: boolean
C_ArtifactUI.AddPower:
  inputs:
  - name: powerID
    type: number
  outputs:
  - name: success
    type: boolean
C_ArtifactUI.ApplyCursorRelicToSlot:
  inputs:
  - name: relicSlotIndex
    type: number
  outputs: {}
C_ArtifactUI.CanApplyArtifactRelic:
  inputs:
  - name: relicItemID
    type: number
  - name: onlyUnlocked
    type: boolean
  outputs:
  - name: canApply
    type: boolean
C_ArtifactUI.CanApplyCursorRelicToSlot:
  inputs:
  - name: relicSlotIndex
    type: number
  outputs:
  - name: canApply
    type: boolean
C_ArtifactUI.CanApplyRelicItemIDToEquippedArtifactSlot:
  inputs:
  - name: relicItemID
    type: number
  - name: relicSlotIndex
    type: number
  outputs:
  - name: canApply
    type: boolean
C_ArtifactUI.CanApplyRelicItemIDToSlot:
  inputs:
  - name: relicItemID
    type: number
  - name: relicSlotIndex
    type: number
  outputs:
  - name: canApply
    type: boolean
C_ArtifactUI.CheckRespecNPC:
  inputs: {}
  outputs:
  - name: canRespec
    type: boolean
C_ArtifactUI.Clear:
  inputs: {}
  outputs: {}
C_ArtifactUI.ClearForgeCamera:
  inputs: {}
  outputs: {}
C_ArtifactUI.ConfirmRespec:
  inputs: {}
  outputs: {}
C_ArtifactUI.DoesEquippedArtifactHaveAnyRelicsSlotted:
  inputs: {}
  outputs:
  - name: hasAnyRelicsSlotted
    type: boolean
C_ArtifactUI.GetAppearanceInfo:
  inputs:
  - name: appearanceSetIndex
    type: number
  - name: appearanceIndex
    type: number
  outputs:
  - name: artifactAppearanceID
    type: number
  - name: appearanceName
    type: string
  - name: displayIndex
    type: number
  - name: unlocked
    type: boolean
  - name: failureDescription
    nilable: true
    type: string
  - name: uiCameraID
    type: number
  - name: altHandCameraID
    nilable: true
    type: number
  - name: swatchColorR
    type: number
  - name: swatchColorG
    type: number
  - name: swatchColorB
    type: number
  - name: modelOpacity
    type: number
  - name: modelSaturation
    type: number
  - name: obtainable
    type: boolean
C_ArtifactUI.GetAppearanceInfoByID:
  inputs:
  - name: artifactAppearanceID
    type: number
  outputs:
  - name: artifactAppearanceSetID
    type: number
  - name: artifactAppearanceID
    type: number
  - name: appearanceName
    type: string
  - name: displayIndex
    type: number
  - name: unlocked
    type: boolean
  - name: failureDescription
    nilable: true
    type: string
  - name: uiCameraID
    type: number
  - name: altHandCameraID
    nilable: true
    type: number
  - name: swatchColorR
    type: number
  - name: swatchColorG
    type: number
  - name: swatchColorB
    type: number
  - name: modelOpacity
    type: number
  - name: modelSaturation
    type: number
  - name: obtainable
    type: boolean
C_ArtifactUI.GetAppearanceSetInfo:
  inputs:
  - name: appearanceSetIndex
    type: number
  outputs:
  - name: artifactAppearanceSetID
    type: number
  - name: appearanceSetName
    type: string
  - name: appearanceSetDescription
    type: string
  - name: numAppearances
    type: number
C_ArtifactUI.GetArtifactArtInfo:
  inputs: {}
  outputs:
  - name: artifactArtInfo
    type:
      structure: C_ArtifactUI.ArtifactArtInfo
C_ArtifactUI.GetArtifactInfo:
  inputs: {}
  outputs:
  - name: itemID
    type: number
  - name: altItemID
    nilable: true
    type: number
  - name: name
    type: string
  - name: icon
    type: number
  - name: xp
    type: number
  - name: pointsSpent
    type: number
  - name: quality
    type: number
  - name: artifactAppearanceID
    type: number
  - name: appearanceModID
    type: number
  - name: itemAppearanceID
    nilable: true
    type: number
  - name: altItemAppearanceID
    nilable: true
    type: number
  - name: altOnTop
    type: boolean
  - name: tier
    type: number
C_ArtifactUI.GetArtifactItemID:
  inputs: {}
  outputs:
  - name: itemID
    type: number
C_ArtifactUI.GetArtifactTier:
  inputs: {}
  outputs:
  - name: tier
    nilable: true
    type: number
C_ArtifactUI.GetArtifactXPRewardTargetInfo:
  inputs:
  - name: artifactCategoryID
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
C_ArtifactUI.GetCostForPointAtRank:
  inputs:
  - name: rank
    type: number
  - name: tier
    type: number
  outputs:
  - name: cost
    type: number
C_ArtifactUI.GetEquippedArtifactArtInfo:
  inputs: {}
  outputs:
  - name: artifactArtInfo
    type:
      structure: C_ArtifactUI.ArtifactArtInfo
C_ArtifactUI.GetEquippedArtifactInfo:
  inputs: {}
  outputs:
  - name: itemID
    type: number
  - name: altItemID
    nilable: true
    type: number
  - name: name
    type: string
  - name: icon
    type: number
  - name: xp
    type: number
  - name: pointsSpent
    type: number
  - name: quality
    type: number
  - name: artifactAppearanceID
    type: number
  - name: appearanceModID
    type: number
  - name: itemAppearanceID
    nilable: true
    type: number
  - name: altItemAppearanceID
    nilable: true
    type: number
  - name: altOnTop
    type: boolean
  - name: tier
    type: number
C_ArtifactUI.GetEquippedArtifactItemID:
  inputs: {}
  outputs:
  - name: itemID
    type: number
C_ArtifactUI.GetEquippedArtifactNumRelicSlots:
  inputs:
  - default: false
    name: onlyUnlocked
    type: boolean
  outputs:
  - name: numRelicSlots
    type: number
C_ArtifactUI.GetEquippedArtifactRelicInfo:
  inputs:
  - name: relicSlotIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: slotTypeName
    type: string
  - name: link
    type: string
C_ArtifactUI.GetEquippedRelicLockedReason:
  inputs:
  - name: relicSlotIndex
    type: number
  outputs:
  - name: lockedReason
    nilable: true
    type: string
C_ArtifactUI.GetForgeRotation:
  inputs: {}
  outputs:
  - name: forgeRotationX
    type: number
  - name: forgeRotationY
    type: number
  - name: forgeRotationZ
    type: number
C_ArtifactUI.GetItemLevelIncreaseProvidedByRelic:
  inputs:
  - name: itemLinkOrID
    type: string
  outputs:
  - name: itemIevelIncrease
    type: number
C_ArtifactUI.GetMetaPowerInfo:
  inputs: {}
  outputs:
  - name: spellID
    type: number
  - name: powerCost
    type: number
  - name: currentRank
    type: number
C_ArtifactUI.GetNumAppearanceSets:
  inputs: {}
  outputs:
  - name: numAppearanceSets
    type: number
C_ArtifactUI.GetNumObtainedArtifacts:
  inputs: {}
  outputs:
  - name: numObtainedArtifacts
    type: number
C_ArtifactUI.GetNumRelicSlots:
  inputs:
  - default: false
    name: onlyUnlocked
    type: boolean
  outputs:
  - name: numRelicSlots
    type: number
C_ArtifactUI.GetPointsRemaining:
  inputs: {}
  outputs:
  - name: pointsRemaining
    type: number
C_ArtifactUI.GetPowerHyperlink:
  inputs:
  - name: powerID
    type: number
  outputs:
  - name: link
    type: string
C_ArtifactUI.GetPowerInfo:
  inputs:
  - name: powerID
    type: number
  outputs:
  - name: powerInfo
    type:
      structure: C_ArtifactUI.ArtifactPowerInfo
C_ArtifactUI.GetPowerLinks:
  inputs:
  - name: powerID
    type: number
  outputs:
  - name: linkingPowerID
    type:
      arrayof: number
C_ArtifactUI.GetPowers:
  inputs: {}
  outputs:
  - name: powerID
    type:
      arrayof: number
C_ArtifactUI.GetPowersAffectedByRelic:
  inputs:
  - name: relicSlotIndex
    type: number
  outputs:
  - name: powerIDs
    type: number
C_ArtifactUI.GetPowersAffectedByRelicItemLink:
  inputs:
  - name: relicItemInfo
    type: string
  outputs:
  - name: powerIDs
    type: number
C_ArtifactUI.GetPreviewAppearance:
  inputs: {}
  outputs:
  - name: artifactAppearanceID
    nilable: true
    type: number
C_ArtifactUI.GetRelicInfo:
  inputs:
  - name: relicSlotIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: slotTypeName
    type: string
  - name: link
    type: string
C_ArtifactUI.GetRelicInfoByItemID:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: slotTypeName
    type: string
  - name: link
    type: string
C_ArtifactUI.GetRelicLockedReason:
  inputs:
  - name: relicSlotIndex
    type: number
  outputs:
  - name: lockedReason
    nilable: true
    type: string
C_ArtifactUI.GetRelicSlotType:
  inputs:
  - name: relicSlotIndex
    type: number
  outputs:
  - name: slotTypeName
    type: string
C_ArtifactUI.GetRespecArtifactArtInfo:
  inputs: {}
  outputs:
  - name: artifactArtInfo
    type:
      structure: C_ArtifactUI.ArtifactArtInfo
C_ArtifactUI.GetRespecArtifactInfo:
  inputs: {}
  outputs:
  - name: itemID
    type: number
  - name: altItemID
    nilable: true
    type: number
  - name: name
    type: string
  - name: icon
    type: number
  - name: xp
    type: number
  - name: pointsSpent
    type: number
  - name: quality
    type: number
  - name: artifactAppearanceID
    type: number
  - name: appearanceModID
    type: number
  - name: itemAppearanceID
    nilable: true
    type: number
  - name: altItemAppearanceID
    nilable: true
    type: number
  - name: altOnTop
    type: boolean
  - name: tier
    type: number
C_ArtifactUI.GetRespecCost:
  inputs: {}
  outputs:
  - name: cost
    type: number
C_ArtifactUI.GetTotalPowerCost:
  inputs:
  - name: startingTrait
    type: number
  - name: numTraits
    type: number
  - name: artifactTier
    type: number
  outputs:
  - name: totalArtifactPowerCost
    type: number
C_ArtifactUI.GetTotalPurchasedRanks:
  inputs: {}
  outputs:
  - name: totalPurchasedRanks
    type: number
C_ArtifactUI.IsArtifactDisabled:
  inputs: {}
  outputs:
  - name: artifactDisabled
    type: boolean
C_ArtifactUI.IsArtifactItem:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: isArtifact
    type: boolean
C_ArtifactUI.IsAtForge:
  inputs: {}
  outputs:
  - name: isAtForge
    type: boolean
C_ArtifactUI.IsEquippedArtifactDisabled:
  inputs: {}
  outputs:
  - name: artifactDisabled
    type: boolean
C_ArtifactUI.IsEquippedArtifactMaxed:
  inputs: {}
  outputs:
  - name: artifactMaxed
    type: boolean
C_ArtifactUI.IsMaxedByRulesOrEffect:
  inputs: {}
  outputs:
  - name: isEffectivelyMaxed
    type: boolean
C_ArtifactUI.IsPowerKnown:
  inputs:
  - name: powerID
    type: number
  outputs:
  - name: known
    type: boolean
C_ArtifactUI.IsViewedArtifactEquipped:
  inputs: {}
  outputs:
  - name: isViewedArtifactEquipped
    type: boolean
C_ArtifactUI.SetAppearance:
  inputs:
  - name: artifactAppearanceID
    type: number
  outputs: {}
C_ArtifactUI.SetForgeCamera:
  inputs: {}
  outputs: {}
C_ArtifactUI.SetForgeRotation:
  inputs:
  - name: forgeRotationX
    type: number
  - name: forgeRotationY
    type: number
  - name: forgeRotationZ
    type: number
  outputs: {}
C_ArtifactUI.SetPreviewAppearance:
  inputs:
  - default: 0
    name: artifactAppearanceID
    type: number
  outputs: {}
C_ArtifactUI.ShouldSuppressForgeRotation:
  inputs: {}
  outputs:
  - name: shouldSuppressForgeRotation
    type: boolean
C_AuctionHouse.CalculateCommodityDeposit:
  inputs:
  - name: itemID
    type: number
  - name: duration
    type: number
  - name: quantity
    type: number
  outputs:
  - name: depositCost
    nilable: true
    type: number
C_AuctionHouse.CalculateItemDeposit:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  - name: duration
    type: number
  - name: quantity
    type: number
  outputs:
  - name: depositCost
    nilable: true
    type: number
C_AuctionHouse.CanCancelAuction:
  inputs:
  - name: ownedAuctionID
    type: number
  outputs:
  - name: canCancelAuction
    type: boolean
C_AuctionHouse.CancelAuction:
  inputs:
  - name: ownedAuctionID
    type: number
  outputs: {}
C_AuctionHouse.CancelCommoditiesPurchase:
  inputs: {}
  outputs: {}
C_AuctionHouse.CancelSell:
  inputs: {}
  outputs: {}
C_AuctionHouse.CloseAuctionHouse:
  inputs: {}
  outputs: {}
C_AuctionHouse.ConfirmCommoditiesPurchase:
  inputs:
  - name: itemID
    type: number
  - name: quantity
    type: number
  outputs: {}
C_AuctionHouse.ConfirmPostCommodity:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  - name: duration
    type: number
  - name: quantity
    type: number
  - name: unitPrice
    type: number
  outputs: {}
C_AuctionHouse.ConfirmPostItem:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  - name: duration
    type: number
  - name: quantity
    type: number
  - name: bid
    nilable: true
    type: number
  - name: buyout
    nilable: true
    type: number
  outputs: {}
C_AuctionHouse.FavoritesAreAvailable:
  inputs: {}
  outputs:
  - name: favoritesAreAvailable
    type: boolean
C_AuctionHouse.GetAuctionInfoByID:
  inputs:
  - name: auctionID
    type: number
  outputs:
  - name: priceInfo
    nilable: true
    type:
      structure: C_AuctionHouse.AuctionInfo
C_AuctionHouse.GetAuctionItemSubClasses:
  inputs:
  - name: classID
    type: number
  outputs:
  - name: subClasses
    type:
      arrayof: number
C_AuctionHouse.GetAvailablePostCount:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  outputs:
  - name: listCount
    type: number
C_AuctionHouse.GetBidInfo:
  inputs:
  - name: bidIndex
    type: number
  outputs:
  - name: bid
    nilable: true
    type:
      structure: C_AuctionHouse.BidInfo
C_AuctionHouse.GetBids:
  inputs: {}
  outputs:
  - name: bids
    type:
      arrayof:
        structure: C_AuctionHouse.BidInfo
C_AuctionHouse.GetBidType:
  inputs:
  - name: bidTypeIndex
    type: number
  outputs:
  - name: typeItemKey
    nilable: true
    type:
      structure: C_AuctionHouse.ItemKey
C_AuctionHouse.GetBrowseResults:
  inputs: {}
  outputs:
  - name: browseResults
    type:
      arrayof:
        structure: C_AuctionHouse.BrowseResultInfo
C_AuctionHouse.GetCancelCost:
  inputs:
  - name: ownedAuctionID
    type: number
  outputs:
  - name: cancelCost
    type: number
C_AuctionHouse.GetCommoditySearchResultInfo:
  inputs:
  - name: itemID
    type: number
  - name: commoditySearchResultIndex
    type: number
  outputs:
  - name: result
    nilable: true
    type:
      structure: C_AuctionHouse.CommoditySearchResultInfo
C_AuctionHouse.GetCommoditySearchResultsQuantity:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: totalQuantity
    type: number
C_AuctionHouse.GetExtraBrowseInfo:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: extraInfo
    type: number
C_AuctionHouse.GetFilterGroups:
  inputs: {}
  outputs:
  - name: filterGroups
    type:
      arrayof:
        structure: C_AuctionHouse.AuctionHouseFilterGroup
C_AuctionHouse.GetItemCommodityStatus:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  outputs:
  - name: isCommodity
    type:
      enum: ItemCommodityStatus
C_AuctionHouse.GetItemKeyFromItem:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  outputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
C_AuctionHouse.GetItemKeyInfo:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  - default: false
    name: restrictQualityToFilter
    type: boolean
  outputs:
  - name: itemKeyInfo
    nilable: true
    type:
      structure: C_AuctionHouse.ItemKeyInfo
C_AuctionHouse.GetItemKeyRequiredLevel:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: requiredLevel
    type: number
C_AuctionHouse.GetItemSearchResultInfo:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  - name: itemSearchResultIndex
    type: number
  outputs:
  - name: result
    nilable: true
    type:
      structure: C_AuctionHouse.ItemSearchResultInfo
C_AuctionHouse.GetItemSearchResultsQuantity:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: totalQuantity
    type: number
C_AuctionHouse.GetMaxBidItemBid:
  inputs: {}
  outputs:
  - name: maxBid
    nilable: true
    type: number
C_AuctionHouse.GetMaxBidItemBuyout:
  inputs: {}
  outputs:
  - name: maxBuyout
    nilable: true
    type: number
C_AuctionHouse.GetMaxCommoditySearchResultPrice:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: maxUnitPrice
    nilable: true
    type: number
C_AuctionHouse.GetMaxItemSearchResultBid:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: maxBid
    nilable: true
    type: number
C_AuctionHouse.GetMaxItemSearchResultBuyout:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: maxBuyout
    nilable: true
    type: number
C_AuctionHouse.GetMaxOwnedAuctionBid:
  inputs: {}
  outputs:
  - name: maxBid
    nilable: true
    type: number
C_AuctionHouse.GetMaxOwnedAuctionBuyout:
  inputs: {}
  outputs:
  - name: maxBuyout
    nilable: true
    type: number
C_AuctionHouse.GetNumBids:
  inputs: {}
  outputs:
  - name: numBids
    stub: 0
    type: number
C_AuctionHouse.GetNumBidTypes:
  inputs: {}
  outputs:
  - name: numBidTypes
    type: number
C_AuctionHouse.GetNumCommoditySearchResults:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: numSearchResults
    type: number
C_AuctionHouse.GetNumItemSearchResults:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: numItemSearchResults
    type: number
C_AuctionHouse.GetNumOwnedAuctions:
  inputs: {}
  outputs:
  - name: numOwnedAuctions
    type: number
C_AuctionHouse.GetNumOwnedAuctionTypes:
  inputs: {}
  outputs:
  - name: numOwnedAuctionTypes
    type: number
C_AuctionHouse.GetNumReplicateItems:
  inputs: {}
  outputs:
  - name: numReplicateItems
    type: number
C_AuctionHouse.GetOwnedAuctionInfo:
  inputs:
  - name: ownedAuctionIndex
    type: number
  outputs:
  - name: ownedAuction
    nilable: true
    type:
      structure: C_AuctionHouse.OwnedAuctionInfo
C_AuctionHouse.GetOwnedAuctions:
  inputs: {}
  outputs:
  - name: ownedAuctions
    type:
      arrayof:
        structure: C_AuctionHouse.OwnedAuctionInfo
C_AuctionHouse.GetOwnedAuctionType:
  inputs:
  - name: ownedAuctionTypeIndex
    type: number
  outputs:
  - name: typeItemKey
    nilable: true
    type:
      structure: C_AuctionHouse.ItemKey
C_AuctionHouse.GetQuoteDurationRemaining:
  inputs: {}
  outputs:
  - name: quoteDurationSeconds
    type: number
C_AuctionHouse.GetReplicateItemBattlePetInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: creatureID
    type: number
  - name: displayID
    type: number
C_AuctionHouse.GetReplicateItemInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    nilable: true
    type: string
  - name: texture
    nilable: true
    type: number
  - name: count
    type: number
  - name: qualityID
    type: number
  - name: usable
    nilable: true
    type: boolean
  - name: level
    type: number
  - name: levelType
    nilable: true
    type: string
  - name: minBid
    type: number
  - name: minIncrement
    type: number
  - name: buyoutPrice
    type: number
  - name: bidAmount
    type: number
  - name: highBidder
    nilable: true
    type: string
  - name: bidderFullName
    nilable: true
    type: string
  - name: owner
    nilable: true
    type: string
  - name: ownerFullName
    nilable: true
    type: string
  - name: saleStatus
    type: number
  - name: itemID
    type: number
  - name: hasAllInfo
    nilable: true
    type: boolean
C_AuctionHouse.GetReplicateItemLink:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemLink
    nilable: true
    type: string
C_AuctionHouse.GetReplicateItemTimeLeft:
  inputs:
  - name: index
    type: number
  outputs:
  - name: timeLeft
    type: number
C_AuctionHouse.GetTimeLeftBandInfo:
  inputs:
  - name: timeLeftBand
    type:
      enum: AuctionHouseTimeLeftBand
  outputs:
  - name: timeLeftMinSeconds
    type: number
  - name: timeLeftMaxSeconds
    type: number
C_AuctionHouse.HasFavorites:
  inputs: {}
  outputs:
  - name: hasFavorites
    type: boolean
C_AuctionHouse.HasFullBidResults:
  inputs: {}
  outputs:
  - name: hasFullBidResults
    type: boolean
C_AuctionHouse.HasFullBrowseResults:
  inputs: {}
  outputs:
  - name: hasFullBrowseResults
    type: boolean
C_AuctionHouse.HasFullCommoditySearchResults:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: hasFullResults
    type: boolean
C_AuctionHouse.HasFullItemSearchResults:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: hasFullResults
    type: boolean
C_AuctionHouse.HasFullOwnedAuctionResults:
  inputs: {}
  outputs:
  - name: hasFullOwnedAuctionResults
    type: boolean
C_AuctionHouse.HasMaxFavorites:
  inputs: {}
  outputs:
  - name: hasMaxFavorites
    type: boolean
C_AuctionHouse.HasSearchResults:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: hasSearchResults
    type: boolean
C_AuctionHouse.IsFavoriteItem:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: isFavorite
    type: boolean
C_AuctionHouse.IsSellItemValid:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  - default: true
    name: displayError
    type: boolean
  outputs:
  - name: valid
    type: boolean
C_AuctionHouse.IsThrottledMessageSystemReady:
  inputs: {}
  outputs:
  - name: canSendThrottledMessage
    type: boolean
C_AuctionHouse.MakeItemKey:
  inputs:
  - name: itemID
    type: number
  - default: 0
    name: itemLevel
    type: number
  - default: 0
    name: itemSuffix
    type: number
  - default: 0
    name: battlePetSpeciesID
    type: number
  outputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
C_AuctionHouse.PlaceBid:
  inputs:
  - name: auctionID
    type: number
  - name: bidAmount
    type: number
  outputs: {}
C_AuctionHouse.PostCommodity:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  - name: duration
    type: number
  - name: quantity
    type: number
  - name: unitPrice
    type: number
  outputs:
  - name: needsConfirmation
    type: boolean
C_AuctionHouse.PostItem:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  - name: duration
    type: number
  - name: quantity
    type: number
  - name: bid
    nilable: true
    type: number
  - name: buyout
    nilable: true
    type: number
  outputs:
  - name: needsConfirmation
    type: boolean
C_AuctionHouse.QueryBids:
  inputs:
  - name: sorts
    type:
      arrayof:
        structure: C_AuctionHouse.AuctionHouseSortType
  - name: auctionIDs
    type:
      arrayof: number
  outputs: {}
C_AuctionHouse.QueryOwnedAuctions:
  inputs:
  - name: sorts
    type:
      arrayof:
        structure: C_AuctionHouse.AuctionHouseSortType
  outputs: {}
C_AuctionHouse.RefreshCommoditySearchResults:
  inputs:
  - name: itemID
    type: number
  outputs: {}
C_AuctionHouse.RefreshItemSearchResults:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  - name: minLevelFilter
    nilable: true
    type: number
  - name: maxLevelFilter
    nilable: true
    type: number
  outputs: {}
C_AuctionHouse.ReplicateItems:
  inputs: {}
  outputs: {}
C_AuctionHouse.RequestFavorites:
  inputs: {}
  outputs: {}
C_AuctionHouse.RequestMoreBrowseResults:
  inputs: {}
  outputs: {}
C_AuctionHouse.RequestMoreCommoditySearchResults:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: hasFullResults
    type: boolean
C_AuctionHouse.RequestMoreItemSearchResults:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  outputs:
  - name: hasFullResults
    type: boolean
C_AuctionHouse.RequestOwnedAuctionBidderInfo:
  inputs:
  - name: auctionID
    type: number
  outputs:
  - name: bidderName
    type: string
C_AuctionHouse.SearchForFavorites:
  inputs:
  - name: sorts
    type:
      arrayof:
        structure: C_AuctionHouse.AuctionHouseSortType
  outputs: {}
C_AuctionHouse.SearchForItemKeys:
  inputs:
  - name: itemKeys
    type:
      arrayof:
        structure: C_AuctionHouse.ItemKey
  - name: sorts
    type:
      arrayof:
        structure: C_AuctionHouse.AuctionHouseSortType
  outputs: {}
C_AuctionHouse.SendBrowseQuery:
  inputs:
  - name: query
    type:
      structure: C_AuctionHouse.AuctionHouseBrowseQuery
  outputs: {}
C_AuctionHouse.SendSearchQuery:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  - name: sorts
    type:
      arrayof:
        structure: C_AuctionHouse.AuctionHouseSortType
  - name: separateOwnerItems
    type: boolean
  - default: 0
    name: minLevelFilter
    type: number
  - default: 0
    name: maxLevelFilter
    type: number
  outputs: {}
C_AuctionHouse.SendSellSearchQuery:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  - name: sorts
    type:
      arrayof:
        structure: C_AuctionHouse.AuctionHouseSortType
  - name: separateOwnerItems
    type: boolean
  outputs: {}
C_AuctionHouse.SetFavoriteItem:
  inputs:
  - name: itemKey
    type:
      structure: C_AuctionHouse.ItemKey
  - name: setFavorite
    type: boolean
  outputs: {}
C_AuctionHouse.StartCommoditiesPurchase:
  inputs:
  - name: itemID
    type: number
  - name: quantity
    type: number
  outputs: {}
C_AuthChallenge.Cancel: {}
C_AuthChallenge.DidChallengeSucceed: {}
C_AuthChallenge.OnTabPressed: {}
C_AuthChallenge.SetFrame: {}
C_AuthChallenge.Submit: {}
C_AzeriteEmpoweredItem.CanSelectPower:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  - name: powerID
    type: number
  outputs:
  - name: canSelect
    type: boolean
C_AzeriteEmpoweredItem.ConfirmAzeriteEmpoweredItemRespec:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  outputs: {}
C_AzeriteEmpoweredItem.GetAllTierInfo:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: tierInfo
    type:
      arrayof:
        structure: C_AzeriteEmpoweredItem.AzeriteEmpoweredItemTierInfo
C_AzeriteEmpoweredItem.GetAllTierInfoByItemID:
  inputs:
  - name: itemInfo
    type: string
  - name: classID
    nilable: true
    type: number
  outputs:
  - name: tierInfo
    type:
      arrayof:
        structure: C_AzeriteEmpoweredItem.AzeriteEmpoweredItemTierInfo
C_AzeriteEmpoweredItem.GetAzeriteEmpoweredItemRespecCost:
  inputs: {}
  outputs:
  - name: cost
    type: number
C_AzeriteEmpoweredItem.GetPowerInfo:
  inputs:
  - name: powerID
    type: number
  outputs:
  - name: powerInfo
    type:
      structure: C_AzeriteEmpoweredItem.AzeriteEmpoweredItemPowerInfo
C_AzeriteEmpoweredItem.GetPowerText:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  - name: powerID
    type: number
  - name: level
    type:
      enum: AzeritePowerLevel
  outputs:
  - name: powerText
    type:
      structure: C_AzeriteEmpoweredItem.AzeriteEmpoweredItemPowerText
C_AzeriteEmpoweredItem.GetSpecsForPower:
  inputs:
  - name: powerID
    type: number
  outputs:
  - name: specInfo
    type:
      arrayof:
        structure: C_AzeriteEmpoweredItem.AzeriteSpecInfo
C_AzeriteEmpoweredItem.HasAnyUnselectedPowers:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: hasAnyUnselectedPowers
    type: boolean
C_AzeriteEmpoweredItem.HasBeenViewed:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: hasBeenViewed
    type: boolean
C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItem:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: isAzeriteEmpoweredItem
    type: boolean
C_AzeriteEmpoweredItem.IsAzeriteEmpoweredItemByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: isAzeriteEmpoweredItem
    type: boolean
C_AzeriteEmpoweredItem.IsAzeritePreviewSourceDisplayable:
  inputs:
  - name: itemInfo
    type: string
  - name: classID
    nilable: true
    type: number
  outputs:
  - name: isAzeritePreviewSourceDisplayable
    type: boolean
C_AzeriteEmpoweredItem.IsHeartOfAzerothEquipped:
  inputs: {}
  outputs:
  - name: isHeartOfAzerothEquipped
    type: boolean
C_AzeriteEmpoweredItem.IsPowerAvailableForSpec:
  inputs:
  - name: powerID
    type: number
  - name: specID
    type: number
  outputs:
  - name: isPowerAvailableForSpec
    type: boolean
C_AzeriteEmpoweredItem.IsPowerSelected:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  - name: powerID
    type: number
  outputs:
  - name: isSelected
    type: boolean
C_AzeriteEmpoweredItem.SelectPower:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  - name: powerID
    type: number
  outputs:
  - name: success
    type: boolean
C_AzeriteEmpoweredItem.SetHasBeenViewed:
  inputs:
  - name: azeriteEmpoweredItemLocation
    type:
      structure: ItemLocation
  outputs: {}
C_AzeriteEssence.ActivateEssence:
  inputs:
  - name: essenceID
    type: number
  - name: milestoneID
    type: number
  outputs: {}
C_AzeriteEssence.CanActivateEssence:
  inputs:
  - name: essenceID
    type: number
  - name: milestoneID
    type: number
  outputs:
  - name: canActivate
    type: boolean
C_AzeriteEssence.CanDeactivateEssence:
  inputs:
  - name: milestoneID
    type: number
  outputs:
  - name: canDeactivate
    type: boolean
C_AzeriteEssence.CanOpenUI:
  inputs: {}
  outputs:
  - name: canOpen
    type: boolean
C_AzeriteEssence.ClearPendingActivationEssence:
  inputs: {}
  outputs: {}
C_AzeriteEssence.CloseForge:
  inputs: {}
  outputs: {}
C_AzeriteEssence.GetEssenceHyperlink:
  inputs:
  - name: essenceID
    type: number
  - name: rank
    type: number
  outputs:
  - name: link
    type: string
C_AzeriteEssence.GetEssenceInfo:
  inputs:
  - name: essenceID
    type: number
  outputs:
  - name: info
    type:
      structure: C_AzeriteEssence.AzeriteEssenceInfo
C_AzeriteEssence.GetEssences:
  inputs: {}
  outputs:
  - name: essences
    type:
      arrayof:
        structure: C_AzeriteEssence.AzeriteEssenceInfo
C_AzeriteEssence.GetMilestoneEssence:
  inputs:
  - name: milestoneID
    type: number
  outputs:
  - name: essenceID
    type: number
C_AzeriteEssence.GetMilestoneInfo:
  inputs:
  - name: milestoneID
    type: number
  outputs:
  - name: info
    type:
      structure: C_AzeriteEssence.AzeriteMilestoneInfo
C_AzeriteEssence.GetMilestones:
  inputs: {}
  outputs:
  - name: milestones
    type:
      arrayof:
        structure: C_AzeriteEssence.AzeriteMilestoneInfo
C_AzeriteEssence.GetMilestoneSpell:
  inputs:
  - name: milestoneID
    type: number
  outputs:
  - name: spellID
    type: number
C_AzeriteEssence.GetNumUnlockedEssences:
  inputs: {}
  outputs:
  - name: numUnlockedEssences
    type: number
C_AzeriteEssence.GetNumUsableEssences:
  inputs: {}
  outputs:
  - name: numUsableEssences
    type: number
C_AzeriteEssence.GetPendingActivationEssence:
  inputs: {}
  outputs:
  - name: essenceID
    type: number
C_AzeriteEssence.HasNeverActivatedAnyEssences:
  inputs: {}
  outputs:
  - name: hasNeverActivatedAnyEssences
    type: boolean
C_AzeriteEssence.HasPendingActivationEssence:
  inputs: {}
  outputs:
  - name: hasEssence
    type: boolean
C_AzeriteEssence.IsAtForge:
  inputs: {}
  outputs:
  - name: isAtForge
    type: boolean
C_AzeriteEssence.SetPendingActivationEssence:
  inputs:
  - name: essenceID
    type: number
  outputs: {}
C_AzeriteEssence.UnlockMilestone:
  inputs:
  - name: milestoneID
    type: number
  outputs: {}
C_AzeriteItem.FindActiveAzeriteItem:
  inputs: {}
  outputs:
  - name: activeAzeriteItemLocation
    type:
      structure: ItemLocation
C_AzeriteItem.GetAzeriteItemXPInfo:
  inputs:
  - name: azeriteItemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: xp
    type: number
  - name: totalLevelXP
    type: number
C_AzeriteItem.GetPowerLevel:
  inputs:
  - name: azeriteItemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: powerLevel
    type: number
C_AzeriteItem.GetUnlimitedPowerLevel:
  inputs:
  - name: azeriteItemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: powerLevel
    type: number
C_AzeriteItem.HasActiveAzeriteItem:
  inputs: {}
  outputs:
  - name: hasActiveAzeriteItem
    type: boolean
C_AzeriteItem.IsAzeriteItem:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: isAzeriteItem
    type: boolean
C_AzeriteItem.IsAzeriteItemAtMaxLevel:
  inputs: {}
  outputs:
  - name: isAtMax
    type: boolean
C_AzeriteItem.IsAzeriteItemByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: isAzeriteItem
    type: boolean
C_AzeriteItem.IsAzeriteItemEnabled:
  inputs:
  - name: azeriteItemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: isEnabled
    type: boolean
C_AzeriteItem.IsUnlimitedLevelingUnlocked:
  inputs: {}
  outputs:
  - name: isUnlimitedLevelingUnlocked
    type: boolean
C_BarberShop.ApplyCustomizationChoices:
  inputs: {}
  outputs:
  - name: success
    type: boolean
C_BarberShop.Cancel:
  inputs: {}
  outputs: {}
C_BarberShop.ClearPreviewChoices:
  inputs:
  - default: false
    name: clearSavedChoices
    type: boolean
  outputs: {}
C_BarberShop.GetAvailableCustomizations:
  inputs: {}
  outputs:
  - name: categories
    type:
      arrayof:
        structure: CharCustomizationCategory
C_BarberShop.GetCurrentCameraZoom:
  inputs: {}
  outputs:
  - name: zoomLevel
    type: number
C_BarberShop.GetCurrentCharacterData:
  inputs: {}
  outputs:
  - name: characterData
    type:
      structure: PlayerInfoCharacterData
C_BarberShop.GetCurrentCost:
  inputs: {}
  outputs:
  - name: cost
    type: number
C_BarberShop.GetCustomizationScope:
  inputs: {}
  outputs:
  - name: customizationScope
    type: number
C_BarberShop.GetViewingChrModel:
  inputs: {}
  outputs:
  - name: chrModelID
    nilable: true
    type: number
C_BarberShop.HasAnyChanges:
  inputs: {}
  outputs:
  - name: hasChanges
    type: boolean
C_BarberShop.IsViewingAlteredForm:
  inputs: {}
  outputs:
  - name: isViewingAlteredForm
    type: boolean
C_BarberShop.MarkCustomizationChoiceAsSeen:
  inputs:
  - name: choiceID
    type: number
  outputs: {}
C_BarberShop.MarkCustomizationOptionAsSeen:
  inputs:
  - name: optionID
    type: number
  outputs: {}
C_BarberShop.PreviewCustomizationChoice:
  inputs:
  - name: optionID
    type: number
  - name: choiceID
    type: number
  outputs: {}
C_BarberShop.RandomizeCustomizationChoices:
  inputs: {}
  outputs: {}
C_BarberShop.ResetCameraRotation:
  inputs: {}
  outputs: {}
C_BarberShop.ResetCustomizationChoices:
  inputs: {}
  outputs: {}
C_BarberShop.RotateCamera:
  inputs:
  - name: diffDegrees
    type: number
  outputs: {}
C_BarberShop.SaveSeenChoices:
  inputs: {}
  outputs: {}
C_BarberShop.SetCameraDistanceOffset:
  inputs:
  - name: offset
    type: number
  outputs: {}
C_BarberShop.SetCameraZoomLevel:
  inputs:
  - name: zoomLevel
    type: number
  - name: keepCustomZoom
    nilable: true
    type: boolean
  outputs: {}
C_BarberShop.SetCustomizationChoice:
  inputs:
  - name: optionID
    type: number
  - name: choiceID
    type: number
  outputs: {}
C_BarberShop.SetModelDressState:
  inputs:
  - name: dressedState
    type: boolean
  outputs: {}
C_BarberShop.SetSelectedSex:
  inputs:
  - name: sex
    type: number
  outputs: {}
C_BarberShop.SetViewingAlteredForm:
  inputs:
  - name: isViewingAlteredForm
    type: boolean
  outputs: {}
C_BarberShop.SetViewingChrModel:
  inputs:
  - name: chrModelID
    nilable: true
    type: number
  outputs: {}
C_BarberShop.SetViewingShapeshiftForm:
  inputs:
  - name: shapeshiftFormID
    nilable: true
    type: number
  outputs: {}
C_BarberShop.ZoomCamera:
  inputs:
  - name: zoomAmount
    type: number
  outputs: {}
C_BattleNet.GetAccountInfoByGUID:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: accountInfo
    nilable: true
    type:
      structure: C_BattleNet.BNetAccountInfo
C_BattleNet.GetAccountInfoByID:
  inputs:
  - name: id
    type: number
  - name: wowAccountGUID
    nilable: true
    type: string
  outputs:
  - name: accountInfo
    nilable: true
    type:
      structure: C_BattleNet.BNetAccountInfo
C_BattleNet.GetFriendAccountInfo:
  inputs:
  - name: friendIndex
    type: number
  - name: wowAccountGUID
    nilable: true
    type: string
  outputs:
  - name: accountInfo
    nilable: true
    type:
      structure: C_BattleNet.BNetAccountInfo
C_BattleNet.GetFriendGameAccountInfo:
  inputs:
  - name: friendIndex
    type: number
  - name: accountIndex
    type: number
  outputs:
  - name: gameAccountInfo
    nilable: true
    type:
      structure: C_BattleNet.BNetGameAccountInfo
C_BattleNet.GetFriendNumGameAccounts:
  inputs:
  - name: friendIndex
    type: number
  outputs:
  - name: numGameAccounts
    type: number
C_BattleNet.GetGameAccountInfoByGUID:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: gameAccountInfo
    nilable: true
    type:
      structure: C_BattleNet.BNetGameAccountInfo
C_BattleNet.GetGameAccountInfoByID:
  inputs:
  - name: id
    type: number
  outputs:
  - name: gameAccountInfo
    nilable: true
    type:
      structure: C_BattleNet.BNetGameAccountInfo
C_BehavioralMessaging.SendNotificationReceipt:
  inputs:
  - name: dbId
    type: string
  - name: openTimeSeconds
    type: number
  - name: readTimeSeconds
    type: number
  outputs: {}
C_BlackMarket.Close:
  inputs: {}
  outputs: {}
C_BlackMarket.GetHotItem: {}
C_BlackMarket.GetItemInfoByID: {}
C_BlackMarket.GetItemInfoByIndex: {}
C_BlackMarket.GetNumItems: {}
C_BlackMarket.IsViewOnly:
  inputs: {}
  outputs:
  - name: value
    type: boolean
C_BlackMarket.ItemPlaceBid: {}
C_BlackMarket.RequestItems:
  inputs: {}
  outputs: {}
C_Calendar.AddEvent:
  inputs: {}
  outputs: {}
C_Calendar.AreNamesReady:
  inputs: {}
  outputs:
  - name: ready
    type: boolean
C_Calendar.CanAddEvent:
  inputs: {}
  outputs:
  - name: canAddEvent
    type: boolean
C_Calendar.CanSendInvite:
  inputs: {}
  outputs:
  - name: canSendInvite
    type: boolean
C_Calendar.CloseEvent:
  inputs: {}
  outputs: {}
C_Calendar.ContextMenuEventCanComplain:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  - name: eventIndex
    type: number
  outputs:
  - name: canComplain
    type: boolean
C_Calendar.ContextMenuEventCanEdit:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  - name: eventIndex
    type: number
  outputs:
  - name: canEdit
    type: boolean
C_Calendar.ContextMenuEventCanRemove:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  - name: eventIndex
    type: number
  outputs:
  - name: canRemove
    type: boolean
C_Calendar.ContextMenuEventClipboard:
  inputs: {}
  outputs:
  - name: exists
    type: boolean
C_Calendar.ContextMenuEventCopy:
  inputs: {}
  outputs: {}
C_Calendar.ContextMenuEventGetCalendarType:
  inputs: {}
  outputs:
  - name: calendarType
    nilable: true
    type: string
C_Calendar.ContextMenuEventPaste:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  outputs: {}
C_Calendar.ContextMenuEventRemove:
  inputs: {}
  outputs: {}
C_Calendar.ContextMenuEventSignUp:
  inputs: {}
  outputs: {}
C_Calendar.ContextMenuGetEventIndex:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: C_Calendar.CalendarEventIndexInfo
C_Calendar.ContextMenuInviteAvailable:
  inputs: {}
  outputs: {}
C_Calendar.ContextMenuInviteDecline:
  inputs: {}
  outputs: {}
C_Calendar.ContextMenuInviteRemove:
  inputs: {}
  outputs: {}
C_Calendar.ContextMenuInviteTentative:
  inputs: {}
  outputs: {}
C_Calendar.ContextMenuSelectEvent:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  - name: eventIndex
    type: number
  outputs: {}
C_Calendar.CreateCommunitySignUpEvent:
  inputs: {}
  outputs: {}
C_Calendar.CreateGuildAnnouncementEvent:
  inputs: {}
  outputs: {}
C_Calendar.CreateGuildSignUpEvent:
  inputs: {}
  outputs: {}
C_Calendar.CreatePlayerEvent:
  inputs: {}
  outputs: {}
C_Calendar.EventAvailable:
  inputs: {}
  outputs: {}
C_Calendar.EventCanEdit:
  inputs: {}
  outputs:
  - name: canEdit
    type: boolean
C_Calendar.EventClearAutoApprove:
  inputs: {}
  outputs: {}
C_Calendar.EventClearLocked:
  inputs: {}
  outputs: {}
C_Calendar.EventClearModerator:
  inputs:
  - name: inviteIndex
    type: number
  outputs: {}
C_Calendar.EventDecline:
  inputs: {}
  outputs: {}
C_Calendar.EventGetCalendarType:
  inputs: {}
  outputs:
  - name: calendarType
    nilable: true
    type: string
C_Calendar.EventGetClubId:
  inputs: {}
  outputs:
  - name: info
    nilable: true
    type: string
C_Calendar.EventGetInvite:
  inputs:
  - name: eventIndex
    type: number
  outputs:
  - name: info
    type:
      structure: C_Calendar.CalendarEventInviteInfo
C_Calendar.EventGetInviteResponseTime:
  inputs:
  - name: eventIndex
    type: number
  outputs:
  - name: time
    type:
      structure: CalendarTime
C_Calendar.EventGetInviteSortCriterion:
  inputs: {}
  outputs:
  - name: criterion
    type: string
  - name: reverse
    type: boolean
C_Calendar.EventGetSelectedInvite:
  inputs: {}
  outputs:
  - name: inviteIndex
    nilable: true
    type: number
C_Calendar.EventGetStatusOptions:
  inputs:
  - name: eventIndex
    type: number
  outputs:
  - name: options
    type:
      arrayof:
        structure: C_Calendar.CalendarEventStatusOption
C_Calendar.EventGetTextures:
  inputs:
  - name: eventType
    type:
      enum: CalendarEventType
  outputs:
  - name: textures
    type:
      arrayof:
        structure: C_Calendar.CalendarEventTextureInfo
C_Calendar.EventGetTypes:
  inputs: {}
  outputs:
  - name: types
    type:
      arrayof: string
C_Calendar.EventGetTypesDisplayOrdered:
  inputs: {}
  outputs:
  - name: infos
    type:
      arrayof:
        structure: C_Calendar.CalendarEventTypeDisplayInfo
C_Calendar.EventHasPendingInvite:
  inputs: {}
  outputs:
  - name: hasPendingInvite
    type: boolean
C_Calendar.EventHaveSettingsChanged:
  inputs: {}
  outputs:
  - name: haveSettingsChanged
    type: boolean
C_Calendar.EventInvite:
  inputs:
  - name: name
    type: string
  outputs: {}
C_Calendar.EventRemoveInvite:
  inputs:
  - name: inviteIndex
    type: number
  outputs: {}
C_Calendar.EventRemoveInviteByGuid:
  inputs:
  - name: guid
    type: string
  outputs: {}
C_Calendar.EventSelectInvite:
  inputs:
  - name: inviteIndex
    type: number
  outputs: {}
C_Calendar.EventSetAutoApprove:
  inputs: {}
  outputs: {}
C_Calendar.EventSetClubId:
  inputs:
  - name: clubId
    nilable: true
    type: string
  outputs: {}
C_Calendar.EventSetDate:
  inputs:
  - name: month
    type: number
  - name: monthDay
    type: number
  - name: year
    type: number
  outputs: {}
C_Calendar.EventSetDescription:
  inputs:
  - name: description
    type: string
  outputs: {}
C_Calendar.EventSetInviteStatus:
  inputs:
  - name: eventIndex
    type: number
  - name: status
    type:
      enum: CalendarStatus
  outputs: {}
C_Calendar.EventSetLocked:
  inputs: {}
  outputs: {}
C_Calendar.EventSetModerator:
  inputs:
  - name: inviteIndex
    type: number
  outputs: {}
C_Calendar.EventSetTextureID:
  inputs:
  - name: textureIndex
    type: number
  outputs: {}
C_Calendar.EventSetTime:
  inputs:
  - name: hour
    type: number
  - name: minute
    type: number
  outputs: {}
C_Calendar.EventSetTitle:
  inputs:
  - name: title
    type: string
  outputs: {}
C_Calendar.EventSetType:
  inputs:
  - name: typeIndex
    type:
      enum: CalendarEventType
  outputs: {}
C_Calendar.EventSignUp:
  inputs: {}
  outputs: {}
C_Calendar.EventSortInvites:
  inputs:
  - name: criterion
    type: string
  - name: reverse
    type: boolean
  outputs: {}
C_Calendar.EventTentative:
  inputs: {}
  outputs: {}
C_Calendar.GetClubCalendarEvents:
  inputs:
  - name: clubId
    type: string
  - name: startTime
    type:
      structure: CalendarTime
  - name: endTime
    type:
      structure: CalendarTime
  outputs:
  - name: events
    type:
      arrayof:
        structure: C_Calendar.CalendarDayEvent
C_Calendar.GetDayEvent:
  inputs:
  - name: monthOffset
    type: number
  - name: monthDay
    type: number
  - name: index
    type: number
  outputs:
  - name: event
    type:
      structure: C_Calendar.CalendarDayEvent
C_Calendar.GetDefaultGuildFilter:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: C_Calendar.CalendarGuildFilterInfo
C_Calendar.GetEventIndex:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: C_Calendar.CalendarEventIndexInfo
C_Calendar.GetEventIndexInfo:
  inputs:
  - name: eventID
    type: string
  - name: monthOffset
    nilable: true
    type: number
  - name: monthDay
    nilable: true
    type: number
  outputs:
  - name: eventIndexInfo
    nilable: true
    type:
      structure: C_Calendar.CalendarEventIndexInfo
C_Calendar.GetEventInfo:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: C_Calendar.CalendarEventInfo
C_Calendar.GetFirstPendingInvite:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  outputs:
  - name: firstPendingInvite
    nilable: true
    type: number
C_Calendar.GetGuildEventInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: info
    type:
      structure: C_Calendar.CalendarGuildEventInfo
C_Calendar.GetGuildEventSelectionInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: info
    type:
      structure: C_Calendar.CalendarEventIndexInfo
C_Calendar.GetHolidayInfo:
  inputs:
  - name: monthOffset
    type: number
  - name: monthDay
    type: number
  - name: index
    type: number
  outputs:
  - name: event
    type:
      structure: C_Calendar.CalendarHolidayInfo
C_Calendar.GetMaxCreateDate:
  inputs: {}
  outputs:
  - name: maxCreateDate
    type:
      structure: CalendarTime
C_Calendar.GetMinDate:
  inputs: {}
  outputs:
  - name: minDate
    type:
      structure: CalendarTime
C_Calendar.GetMonthInfo:
  impl: C_Calendar.GetMonthInfo
  inputs:
  - default: 0
    name: offsetMonths
    type: number
  outputs:
  - name: monthInfo
    type:
      structure: C_Calendar.CalendarMonthInfo
C_Calendar.GetNextClubId:
  inputs: {}
  outputs:
  - name: clubId
    nilable: true
    type: string
C_Calendar.GetNumDayEvents:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  outputs:
  - name: numDayEvents
    type: number
C_Calendar.GetNumGuildEvents:
  inputs: {}
  outputs:
  - name: numGuildEvents
    type: number
C_Calendar.GetNumInvites:
  inputs: {}
  outputs:
  - name: num
    type: number
C_Calendar.GetNumPendingInvites:
  inputs: {}
  outputs:
  - name: num
    type: number
C_Calendar.GetRaidInfo:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  - name: eventIndex
    type: number
  outputs:
  - name: info
    type:
      structure: C_Calendar.CalendarRaidInfo
C_Calendar.IsActionPending:
  inputs: {}
  outputs:
  - name: actionPending
    type: boolean
C_Calendar.IsEventOpen:
  inputs: {}
  outputs:
  - name: isOpen
    type: boolean
C_Calendar.MassInviteCommunity:
  inputs:
  - name: clubId
    type: string
  - name: minLevel
    type: number
  - name: maxLevel
    type: number
  - name: maxRankOrder
    nilable: true
    type: number
  outputs: {}
C_Calendar.MassInviteGuild:
  inputs:
  - name: minLevel
    type: number
  - name: maxLevel
    type: number
  - name: maxRankOrder
    type: number
  outputs: {}
C_Calendar.OpenCalendar:
  inputs: {}
  outputs: {}
C_Calendar.OpenEvent:
  inputs:
  - name: offsetMonths
    type: number
  - name: monthDay
    type: number
  - name: index
    type: number
  outputs:
  - name: success
    type: boolean
C_Calendar.RemoveEvent:
  inputs: {}
  outputs: {}
C_Calendar.SetAbsMonth:
  impl: C_Calendar.SetAbsMonth
  inputs:
  - name: month
    type: number
  - name: year
    type: number
  outputs: {}
C_Calendar.SetMonth:
  impl: C_Calendar.SetMonth
  inputs:
  - name: offsetMonths
    type: number
  outputs: {}
C_Calendar.SetNextClubId:
  inputs:
  - name: clubId
    nilable: true
    type: string
  outputs: {}
C_Calendar.UpdateEvent:
  inputs: {}
  outputs: {}
C_CameraDefaults.GetCameraFOVDefaults:
  inputs: {}
  outputs:
  - name: fieldOfViewDegreesDefault
    type: number
  - name: fieldOfViewDegreesPlayerMin
    type: number
  - name: fieldOfViewDegreesPlayerMax
    type: number
C_CampaignInfo.GetAvailableCampaigns:
  inputs: {}
  outputs:
  - name: campaignIDs
    type:
      arrayof: number
C_CampaignInfo.GetCampaignChapterInfo:
  inputs:
  - name: campaignChapterID
    type: number
  outputs:
  - name: campaignChapterInfo
    nilable: true
    type:
      structure: C_CampaignInfo.CampaignChapterInfo
C_CampaignInfo.GetCampaignID:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: campaignID
    stub: 0
    type: number
C_CampaignInfo.GetCampaignInfo:
  inputs:
  - name: campaignID
    type: number
  outputs:
  - name: campaignInfo
    nilable: true
    type:
      structure: C_CampaignInfo.CampaignInfo
C_CampaignInfo.GetChapterIDs:
  inputs:
  - name: campaignID
    type: number
  outputs:
  - name: chapterIDs
    nilable: true
    type:
      arrayof: number
C_CampaignInfo.GetCurrentChapterID:
  inputs:
  - name: campaignID
    type: number
  outputs:
  - name: currentChapterID
    nilable: true
    type: number
C_CampaignInfo.GetFailureReason:
  inputs:
  - name: campaignID
    type: number
  outputs:
  - name: failureReason
    nilable: true
    type:
      structure: C_CampaignInfo.CampaignFailureReason
C_CampaignInfo.GetState:
  inputs:
  - name: campaignID
    type: number
  outputs:
  - name: state
    type:
      enum: CampaignState
C_CampaignInfo.IsCampaignQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isCampaignQuest
    type: boolean
C_CampaignInfo.SortAsNormalQuest:
  inputs:
  - name: campaignID
    type: number
  outputs:
  - name: sortAsNormalQuest
    type: boolean
C_ChallengeMode.CanUseKeystoneInCurrentMap:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: canUse
    type: boolean
C_ChallengeMode.ClearKeystone:
  inputs: {}
  outputs: {}
C_ChallengeMode.CloseKeystoneFrame:
  inputs: {}
  outputs: {}
C_ChallengeMode.GetActiveChallengeMapID:
  inputs: {}
  outputs:
  - name: mapChallengeModeID
    nilable: true
    type: number
C_ChallengeMode.GetActiveKeystoneInfo:
  inputs: {}
  outputs:
  - name: activeKeystoneLevel
    type: number
  - name: activeAffixIDs
    type:
      arrayof: number
  - name: wasActiveKeystoneCharged
    type: boolean
C_ChallengeMode.GetAffixInfo:
  inputs:
  - name: affixID
    type: number
  outputs:
  - name: name
    type: string
  - name: description
    type: string
  - name: filedataid
    type: number
C_ChallengeMode.GetCompletionInfo:
  inputs: {}
  outputs:
  - name: mapChallengeModeID
    type: number
  - name: level
    type: number
  - name: time
    type: number
  - name: onTime
    type: boolean
  - name: keystoneUpgradeLevels
    type: number
  - name: practiceRun
    type: boolean
  - name: oldOverallDungeonScore
    nilable: true
    type: number
  - name: newOverallDungeonScore
    nilable: true
    type: number
  - name: IsMapRecord
    type: boolean
  - name: IsAffixRecord
    type: boolean
  - name: PrimaryAffix
    type: number
  - name: isEligibleForScore
    type: boolean
  - name: members
    type:
      arrayof:
        structure: C_ChallengeMode.ChallengeModeCompletionMemberInfo
C_ChallengeMode.GetDeathCount:
  inputs: {}
  outputs:
  - name: numDeaths
    type: number
  - name: timeLost
    type: number
C_ChallengeMode.GetDungeonScoreRarityColor:
  inputs:
  - name: dungeonScore
    type: number
  outputs:
  - name: scoreColor
    type:
      structure: colorRGB
C_ChallengeMode.GetGuildLeaders:
  inputs: {}
  outputs:
  - name: topAttempt
    type:
      arrayof:
        structure: C_ChallengeMode.ChallengeModeGuildTopAttempt
C_ChallengeMode.GetKeystoneLevelRarityColor:
  inputs:
  - name: level
    type: number
  outputs:
  - name: levelScore
    type:
      structure: colorRGB
C_ChallengeMode.GetMapScoreInfo:
  inputs: {}
  outputs:
  - name: displayScores
    type:
      arrayof:
        structure: MythicPlusRatingLinkInfo
C_ChallengeMode.GetMapTable:
  inputs: {}
  outputs:
  - name: mapChallengeModeIDs
    stub:
    - 42
    type:
      arrayof: number
C_ChallengeMode.GetMapUIInfo:
  inputs:
  - name: mapChallengeModeID
    type: number
  outputs:
  - name: name
    type: string
  - name: id
    type: number
  - name: timeLimit
    type: number
  - name: texture
    nilable: true
    type: number
  - name: backgroundTexture
    type: number
C_ChallengeMode.GetOverallDungeonScore:
  inputs: {}
  outputs:
  - name: overallDungeonScore
    type: number
C_ChallengeMode.GetPowerLevelDamageHealthMod:
  inputs:
  - name: powerLevel
    type: number
  outputs:
  - name: damageMod
    type: number
  - name: healthMod
    type: number
C_ChallengeMode.GetSlottedKeystoneInfo:
  inputs: {}
  outputs:
  - name: mapChallengeModeID
    type: number
  - name: affixIDs
    type:
      arrayof: number
  - name: keystoneLevel
    type: number
C_ChallengeMode.GetSpecificDungeonOverallScoreRarityColor:
  inputs:
  - name: specificDungeonOverallScore
    type: number
  outputs:
  - name: specificDungeonOverallScoreColor
    type:
      structure: colorRGB
C_ChallengeMode.GetSpecificDungeonScoreRarityColor:
  inputs:
  - name: specificDungeonScore
    type: number
  outputs:
  - name: specificDungeonScoreColor
    type:
      structure: colorRGB
C_ChallengeMode.HasSlottedKeystone:
  inputs: {}
  outputs:
  - name: hasSlottedKeystone
    type: boolean
C_ChallengeMode.IsChallengeModeActive:
  inputs: {}
  outputs:
  - name: challengeModeActive
    type: boolean
C_ChallengeMode.RemoveKeystone:
  inputs: {}
  outputs:
  - name: removalSuccessful
    type: boolean
C_ChallengeMode.RequestLeaders:
  inputs:
  - name: mapChallengeModeID
    type: number
  outputs: {}
C_ChallengeMode.Reset:
  inputs: {}
  outputs: {}
C_ChallengeMode.SlotKeystone:
  inputs: {}
  outputs: {}
C_ChallengeMode.StartChallengeMode:
  inputs: {}
  outputs:
  - name: success
    type: boolean
C_CharacterServices.AssignNameChangeDistribution: {}
C_CharacterServices.AssignPCTDistribution: {}
C_CharacterServices.AssignRaceOrFactionChangeDistribution: {}
C_CharacterServices.AssignUpgradeDistribution: {}
C_CharacterServices.CapitalizeCharName: {}
C_CharacterServices.GetActiveCharacterUpgradeBoostType: {}
C_CharacterServices.GetActiveClassTrialBoostType: {}
C_CharacterServices.GetAutomaticBoost: {}
C_CharacterServices.GetAutomaticBoostCharacter: {}
C_CharacterServices.GetCharacterServiceDisplayData:
  inputs:
  - name: boostType
    type: number
  outputs:
  - name: upgradeDisplayData
    stub:
      popupInfo: {}
    type: table
C_CharacterServices.GetCharacterServiceDisplayDataByVASType: {}
C_CharacterServices.GetCharacterServiceDisplayInfo: {}
C_CharacterServices.GetVASDistributions: {}
C_CharacterServices.HasRequiredBoostForClassTrial: {}
C_CharacterServices.HasRequiredBoostForUnrevoke: {}
C_CharacterServices.RPEResetCharacter: {}
C_CharacterServices.SetAutomaticBoost: {}
C_CharacterServices.SetAutomaticBoostCharacter: {}
C_CharacterServicesPublic.ShouldSeeControlPopup: {}
C_ChatBubbles.GetAllChatBubbles:
  inputs:
  - default: false
    name: includeForbidden
    type: boolean
  outputs:
  - name: chatBubbles
    type:
      arrayof: table
C_ChatInfo.CanPlayerSpeakLanguage:
  inputs:
  - name: languageId
    type: number
  outputs:
  - name: canSpeakLanguage
    type: boolean
C_ChatInfo.GetChannelInfoFromIdentifier:
  inputs:
  - name: channelIdentifier
    type: string
  outputs:
  - name: info
    nilable: true
    type:
      structure: ChatChannelInfo
C_ChatInfo.GetChannelRosterInfo:
  inputs:
  - name: channelIndex
    type: number
  - name: rosterIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: owner
    type: boolean
  - name: moderator
    type: boolean
  - name: guid
    type: string
C_ChatInfo.GetChannelRuleset:
  inputs:
  - name: channelIndex
    type: number
  outputs:
  - name: ruleset
    type:
      enum: ChatChannelRuleset
C_ChatInfo.GetChannelRulesetForChannelID:
  inputs:
  - name: channelID
    type: number
  outputs:
  - name: ruleset
    type:
      enum: ChatChannelRuleset
C_ChatInfo.GetChannelShortcut:
  inputs:
  - name: channelIndex
    type: number
  outputs:
  - name: shortcut
    type: string
C_ChatInfo.GetChannelShortcutForChannelID:
  inputs:
  - name: channelID
    type: number
  outputs:
  - name: shortcut
    type: string
C_ChatInfo.GetChatLineSenderGUID:
  inputs:
  - name: chatLine
    type: number
  outputs:
  - name: guid
    type: string
C_ChatInfo.GetChatLineSenderName:
  inputs:
  - name: chatLine
    type: number
  outputs:
  - name: name
    type: string
C_ChatInfo.GetChatLineText:
  inputs:
  - name: chatLine
    type: number
  outputs:
  - name: text
    type: string
C_ChatInfo.GetChatTypeName:
  inputs:
  - name: typeID
    type: number
  outputs:
  - name: name
    nilable: true
    type: string
C_ChatInfo.GetClubStreamIDs:
  inputs:
  - name: clubID
    type: string
  outputs:
  - name: ids
    type:
      arrayof: string
C_ChatInfo.GetColorForChatType:
  inputs:
  - name: chatType
    type: string
  outputs:
  - name: color
    nilable: true
    type:
      structure: colorRGB
C_ChatInfo.GetGeneralChannelID:
  inputs: {}
  outputs:
  - name: channelID
    type: number
C_ChatInfo.GetGeneralChannelLocalID:
  inputs: {}
  outputs:
  - name: localID
    nilable: true
    type: number
C_ChatInfo.GetMentorChannelID:
  inputs: {}
  outputs:
  - name: channelID
    type: number
C_ChatInfo.GetNumActiveChannels:
  inputs: {}
  outputs:
  - name: numChannels
    type: number
C_ChatInfo.GetNumReservedChatWindows:
  inputs: {}
  outputs:
  - name: numReserved
    type: number
C_ChatInfo.GetRegisteredAddonMessagePrefixes:
  inputs: {}
  outputs:
  - name: registeredPrefixes
    type:
      arrayof: string
C_ChatInfo.IsAddonMessagePrefixRegistered:
  inputs:
  - name: prefix
    type: string
  outputs:
  - name: isRegistered
    type: boolean
C_ChatInfo.IsChannelRegional:
  inputs:
  - name: channelIndex
    type: number
  outputs:
  - name: isRegional
    type: boolean
C_ChatInfo.IsChannelRegionalForChannelID:
  inputs:
  - name: channelID
    type: number
  outputs:
  - name: isRegional
    type: boolean
C_ChatInfo.IsChatLineCensored:
  inputs:
  - name: chatLine
    type: number
  outputs:
  - name: isCensored
    type: boolean
C_ChatInfo.IsPartyChannelType:
  inputs:
  - name: channelType
    type:
      enum: ChatChannelType
  outputs:
  - name: isPartyChannelType
    type: boolean
C_ChatInfo.IsRegionalServiceAvailable:
  inputs: {}
  outputs:
  - name: available
    type: boolean
C_ChatInfo.IsValidChatLine:
  inputs:
  - name: chatLine
    nilable: true
    type: number
  outputs:
  - name: isValid
    type: boolean
C_ChatInfo.RegisterAddonMessagePrefix:
  inputs:
  - name: prefix
    type: string
  outputs:
  - name: successfulRequest
    type: boolean
C_ChatInfo.ReplaceIconAndGroupExpressions:
  impl: C_ChatInfo.ReplaceIconAndGroupExpressions
  inputs:
  - name: input
    type: string
  - name: noIconReplacement
    nilable: true
    type: boolean
  - name: noGroupReplacement
    nilable: true
    type: boolean
  outputs:
  - name: output
    type: string
C_ChatInfo.RequestCanLocalWhisperTarget:
  inputs:
  - name: whisperTarget
    type: string
  outputs: {}
C_ChatInfo.ResetDefaultZoneChannels:
  inputs: {}
  outputs: {}
C_ChatInfo.SendAddonMessage:
  inputs:
  - name: prefix
    type: string
  - name: message
    type: string
  - name: chatType
    nilable: true
    type: string
  - name: target
    nilable: true
    type: string
  outputs:
  - name: success
    type: boolean
C_ChatInfo.SendAddonMessageLogged:
  inputs:
  - name: prefix
    type: string
  - name: message
    type: string
  - name: chatType
    nilable: true
    type: string
  - name: target
    nilable: true
    type: string
  outputs:
  - name: success
    type: boolean
C_ChatInfo.SwapChatChannelsByChannelIndex:
  inputs:
  - name: firstChannelIndex
    type: number
  - name: secondChannelIndex
    type: number
  outputs: {}
C_ChatInfo.UncensorChatLine:
  inputs:
  - name: chatLine
    type: number
  outputs: {}
C_ChromieTime.CloseUI:
  inputs: {}
  outputs: {}
C_ChromieTime.GetChromieTimeExpansionOption:
  inputs:
  - name: expansionRecID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_ChromieTime.ChromieTimeExpansionInfo
C_ChromieTime.GetChromieTimeExpansionOptions:
  inputs: {}
  outputs:
  - name: expansionOptions
    type:
      arrayof:
        structure: C_ChromieTime.ChromieTimeExpansionInfo
C_ChromieTime.SelectChromieTimeOption:
  inputs:
  - name: chromieTimeExpansionInfoId
    type: number
  outputs: {}
C_ClassColor.GetClassColor:
  inputs:
  - name: className
    type: string
  outputs:
  - name: classColor
    type:
      structure: colorRGB
C_ClassTalents.CanChangeTalents:
  inputs: {}
  outputs:
  - name: canChange
    type: boolean
  - name: canAdd
    type: boolean
  - name: changeError
    type: string
C_ClassTalents.CanCreateNewConfig:
  inputs: {}
  outputs:
  - name: canCreate
    type: boolean
C_ClassTalents.CanEditTalents:
  inputs: {}
  outputs:
  - name: canEdit
    type: boolean
  - name: changeError
    type: string
C_ClassTalents.CommitConfig:
  inputs:
  - name: savedConfigID
    nilable: true
    type: number
  outputs:
  - name: success
    type: boolean
C_ClassTalents.DeleteConfig:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: success
    type: boolean
C_ClassTalents.GetActiveConfigID:
  impl: C_ClassTalents.GetActiveConfigID
  inputs: {}
  outputs:
  - name: activeConfigID
    nilable: true
    type: number
C_ClassTalents.GetConfigIDsBySpecID:
  inputs:
  - name: specID
    nilable: true
    type: number
  outputs:
  - name: configIDs
    type:
      arrayof: number
C_ClassTalents.GetHasStarterBuild:
  inputs: {}
  outputs:
  - name: hasStarterBuild
    type: boolean
C_ClassTalents.GetLastSelectedSavedConfigID:
  inputs:
  - name: specID
    type: number
  outputs:
  - name: configID
    nilable: true
    type: number
C_ClassTalents.GetNextStarterBuildPurchase:
  inputs: {}
  outputs:
  - name: nodeID
    nilable: true
    type: number
  - name: entryID
    nilable: true
    type: number
C_ClassTalents.GetStarterBuildActive:
  inputs: {}
  outputs:
  - name: isActive
    type: boolean
C_ClassTalents.GetTraitTreeForSpec:
  impl: C_ClassTalents.GetTraitTreeForSpec
  inputs:
  - name: specID
    type: number
  outputs:
  - name: treeID
    nilable: true
    type: number
C_ClassTalents.HasUnspentTalentPoints:
  inputs: {}
  outputs:
  - name: hasUnspentPoints
    type: boolean
  - name: numClassPoints
    type: number
  - name: numSpecPoints
    type: number
C_ClassTalents.ImportLoadout:
  inputs:
  - name: configID
    type: number
  - name: entries
    type:
      arrayof:
        structure: C_ClassTalents.ImportLoadoutEntryInfo
  - name: name
    type: string
  outputs:
  - name: success
    type: boolean
  - name: importError
    type: string
C_ClassTalents.InitializeViewLoadout:
  impl: C_ClassTalents.InitializeViewLoadout
  inputs:
  - name: specID
    type: number
  - name: level
    type: number
  outputs: {}
C_ClassTalents.IsConfigPopulated:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: isPopulated
    type: boolean
C_ClassTalents.LoadConfig:
  inputs:
  - name: configID
    type: number
  - name: autoApply
    type: boolean
  outputs:
  - name: result
    type:
      enum: LoadConfigResult
  - name: changeError
    type: string
  - name: newLearnedNodeIDs
    type:
      arrayof: number
C_ClassTalents.RenameConfig:
  inputs:
  - name: configID
    type: number
  - name: name
    type: string
  outputs:
  - name: success
    type: boolean
C_ClassTalents.RequestNewConfig:
  inputs:
  - name: name
    type: string
  outputs:
  - name: success
    type: boolean
C_ClassTalents.SaveConfig:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: success
    type: boolean
C_ClassTalents.SetStarterBuildActive:
  inputs:
  - name: active
    type: boolean
  outputs:
  - name: result
    type:
      enum: LoadConfigResult
C_ClassTalents.SetUsesSharedActionBars:
  inputs:
  - name: configID
    type: number
  - name: usesShared
    type: boolean
  outputs: {}
C_ClassTalents.UpdateLastSelectedSavedConfigID:
  inputs:
  - name: specID
    type: number
  - name: configID
    nilable: true
    type: number
  outputs: {}
C_ClassTalents.ViewLoadout:
  impl: C_ClassTalents.ViewLoadout
  inputs:
  - name: entries
    type:
      arrayof:
        structure: C_ClassTalents.ImportLoadoutEntryInfo
  outputs:
  - name: success
    type: boolean
C_ClassTrial.GetClassTrialLogoutTimeSeconds:
  outputs:
  - type: number
C_ClassTrial.IsClassTrialCharacter: {}
C_ClickBindings.CanSpellBeClickBound:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: canBeBound
    type: boolean
C_ClickBindings.ExecuteBinding:
  inputs:
  - name: targetToken
    type: string
  - name: button
    type: string
  - name: modifiers
    type: number
  outputs: {}
C_ClickBindings.GetBindingType:
  inputs:
  - name: button
    type: string
  - name: modifiers
    type: number
  outputs:
  - name: type
    type:
      enum: ClickBindingType
C_ClickBindings.GetEffectiveInteractionButton:
  inputs:
  - name: button
    type: string
  - name: modifiers
    type: number
  outputs:
  - name: effectiveButton
    type: string
C_ClickBindings.GetProfileInfo:
  inputs: {}
  outputs:
  - name: infoVec
    type:
      arrayof:
        structure: ClickBindingInfo
C_ClickBindings.GetStringFromModifiers:
  inputs:
  - name: modifiers
    type: number
  outputs:
  - name: modifierString
    type: string
C_ClickBindings.GetTutorialShown:
  inputs: {}
  outputs:
  - name: tutorialShown
    type: boolean
C_ClickBindings.MakeModifiers:
  inputs: {}
  outputs:
  - name: modifiers
    type: number
C_ClickBindings.ResetCurrentProfile:
  inputs: {}
  outputs: {}
C_ClickBindings.SetProfileByInfo:
  inputs:
  - name: infoVec
    type:
      arrayof:
        structure: ClickBindingInfo
  outputs: {}
C_ClickBindings.SetTutorialShown:
  inputs: {}
  outputs: {}
C_Club.AcceptInvitation:
  inputs:
  - name: clubId
    type: string
  outputs: {}
C_Club.AddClubStreamChatChannel:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs: {}
C_Club.AdvanceStreamViewMarker:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs: {}
C_Club.AssignMemberRole:
  inputs:
  - name: clubId
    type: string
  - name: memberId
    type: number
  - name: roleId
    type:
      enum: ClubRoleIdentifier
  outputs: {}
C_Club.CanResolvePlayerLocationFromClubMessageData:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: epoch
    type: number
  - name: position
    type: number
  outputs:
  - name: canResolve
    type: boolean
C_Club.ClearAutoAdvanceStreamViewMarker:
  inputs: {}
  outputs: {}
C_Club.ClearClubPresenceSubscription:
  inputs: {}
  outputs: {}
C_Club.CompareBattleNetDisplayName:
  inputs:
  - name: clubId
    type: string
  - name: lhsMemberId
    type: number
  - name: rhsMemberId
    type: number
  outputs:
  - name: comparison
    type: number
C_Club.CreateClub:
  inputs:
  - name: name
    type: string
  - name: shortName
    nilable: true
    type: string
  - name: description
    type: string
  - name: clubType
    type:
      enum: ClubType
  - name: avatarId
    type: number
  - name: isCrossFaction
    nilable: true
    type: boolean
  outputs: {}
C_Club.CreateStream:
  inputs:
  - name: clubId
    type: string
  - name: name
    type: string
  - name: subject
    type: string
  - name: leadersAndModeratorsOnly
    type: boolean
  outputs: {}
C_Club.CreateTicket:
  inputs:
  - name: clubId
    type: string
  - name: allowedRedeemCount
    nilable: true
    type: number
  - name: duration
    nilable: true
    type: number
  - name: defaultStreamId
    nilable: true
    type: string
  - name: isCrossFaction
    nilable: true
    type: boolean
  outputs: {}
C_Club.DeclineInvitation:
  inputs:
  - name: clubId
    type: string
  outputs: {}
C_Club.DestroyClub:
  inputs:
  - name: clubId
    type: string
  outputs: {}
C_Club.DestroyMessage:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: messageId
    type:
      structure: C_Club.ClubMessageIdentifier
  outputs: {}
C_Club.DestroyStream:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs: {}
C_Club.DestroyTicket:
  inputs:
  - name: clubId
    type: string
  - name: ticketId
    type: string
  outputs: {}
C_Club.DoesAnyCommunityHaveUnreadMessages:
  inputs: {}
  outputs:
  - name: hasUnreadMessages
    type: boolean
C_Club.DoesCommunityHaveMembersOfTheOppositeFaction:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: hasMembersOfOppositeFaction
    type: boolean
C_Club.EditClub:
  inputs:
  - name: clubId
    type: string
  - name: name
    nilable: true
    type: string
  - name: shortName
    nilable: true
    type: string
  - name: description
    nilable: true
    type: string
  - name: avatarId
    nilable: true
    type: number
  - name: broadcast
    nilable: true
    type: string
  - name: crossFaction
    nilable: true
    type: boolean
  outputs: {}
C_Club.EditMessage:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: messageId
    type:
      structure: C_Club.ClubMessageIdentifier
  - name: message
    type: string
  outputs: {}
C_Club.EditStream:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: name
    nilable: true
    type: string
  - name: subject
    nilable: true
    type: string
  - name: leadersAndModeratorsOnly
    nilable: true
    type: boolean
  outputs: {}
C_Club.Flush:
  inputs: {}
  outputs: {}
C_Club.FocusCommunityStreams:
  inputs: {}
  outputs: {}
C_Club.FocusStream:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs:
  - name: focused
    type: boolean
C_Club.GetAssignableRoles:
  inputs:
  - name: clubId
    type: string
  - name: memberId
    type: number
  outputs:
  - name: assignableRoles
    type:
      arrayof:
        enum: ClubRoleIdentifier
C_Club.GetAvatarIdList:
  inputs:
  - name: clubType
    type:
      enum: ClubType
  outputs:
  - name: avatarIds
    nilable: true
    type:
      arrayof: number
C_Club.GetClubCapacity:
  inputs: {}
  outputs:
  - name: capacity
    type: number
C_Club.GetClubInfo:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_Club.ClubInfo
C_Club.GetClubLimits:
  inputs:
  - name: clubType
    type:
      enum: ClubType
  outputs:
  - name: clubLimits
    type:
      structure: C_Club.ClubLimits
C_Club.GetClubMembers:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    nilable: true
    type: string
  outputs:
  - name: members
    type:
      arrayof: number
C_Club.GetClubPrivileges:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: privilegeInfo
    type:
      structure: C_Club.ClubPrivilegeInfo
C_Club.GetClubStreamNotificationSettings:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: settings
    type:
      arrayof:
        structure: C_Club.ClubStreamNotificationSetting
C_Club.GetCommunityNameResultText:
  inputs:
  - name: result
    type:
      enum: ValidateNameResult
  outputs:
  - name: errorCode
    nilable: true
    type: string
C_Club.GetGuildClubId:
  inputs: {}
  outputs:
  - name: guildClubId
    nilable: true
    type: string
C_Club.GetInfoFromLastCommunityChatLine:
  inputs: {}
  outputs:
  - name: messageInfo
    type:
      structure: C_Club.ClubMessageInfo
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: clubType
    type:
      enum: ClubType
C_Club.GetInvitationCandidates:
  inputs:
  - name: filter
    nilable: true
    type: string
  - name: maxResults
    nilable: true
    type: number
  - name: cursorPosition
    nilable: true
    type: number
  - name: allowFullMatch
    nilable: true
    type: boolean
  - name: clubId
    type: string
  outputs:
  - name: candidates
    type:
      arrayof:
        structure: C_Club.ClubInvitationCandidateInfo
C_Club.GetInvitationInfo:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: invitation
    nilable: true
    type:
      structure: C_Club.ClubSelfInvitationInfo
C_Club.GetInvitationsForClub:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: invitations
    type:
      arrayof:
        structure: C_Club.ClubInvitationInfo
C_Club.GetInvitationsForSelf:
  inputs: {}
  outputs:
  - name: invitations
    type:
      arrayof:
        structure: C_Club.ClubSelfInvitationInfo
C_Club.GetLastTicketResponse:
  inputs:
  - name: ticket
    type: string
  outputs:
  - name: error
    type:
      enum: ClubErrorType
  - name: info
    nilable: true
    type:
      structure: C_Club.ClubInfo
  - name: showError
    type: boolean
C_Club.GetMemberInfo:
  inputs:
  - name: clubId
    type: string
  - name: memberId
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_Club.ClubMemberInfo
C_Club.GetMemberInfoForSelf:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_Club.ClubMemberInfo
C_Club.GetMessageInfo:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: messageId
    type:
      structure: C_Club.ClubMessageIdentifier
  outputs:
  - name: message
    nilable: true
    type:
      structure: C_Club.ClubMessageInfo
C_Club.GetMessageRanges:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs:
  - name: ranges
    type:
      arrayof:
        structure: C_Club.ClubMessageRange
C_Club.GetMessagesBefore:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: newest
    type:
      structure: C_Club.ClubMessageIdentifier
  - name: count
    type: number
  outputs:
  - name: messages
    type:
      arrayof:
        structure: C_Club.ClubMessageInfo
C_Club.GetMessagesInRange:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: oldest
    type:
      structure: C_Club.ClubMessageIdentifier
  - name: newest
    type:
      structure: C_Club.ClubMessageIdentifier
  outputs:
  - name: messages
    type:
      arrayof:
        structure: C_Club.ClubMessageInfo
C_Club.GetStreamInfo:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs:
  - name: streamInfo
    nilable: true
    type:
      structure: C_Club.ClubStreamInfo
C_Club.GetStreams:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: streams
    type:
      arrayof:
        structure: C_Club.ClubStreamInfo
C_Club.GetStreamViewMarker:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs:
  - name: lastReadTime
    nilable: true
    type: number
C_Club.GetSubscribedClubs:
  inputs: {}
  outputs:
  - name: clubs
    type:
      arrayof:
        structure: C_Club.ClubInfo
C_Club.GetTickets:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: tickets
    type:
      arrayof:
        structure: C_Club.ClubTicketInfo
C_Club.IsAccountMuted:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: accountMuted
    type: boolean
C_Club.IsBeginningOfStream:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: messageId
    type:
      structure: C_Club.ClubMessageIdentifier
  outputs:
  - name: isBeginningOfStream
    type: boolean
C_Club.IsEnabled:
  inputs: {}
  outputs:
  - name: clubsEnabled
    type: boolean
C_Club.IsRestricted:
  inputs: {}
  outputs:
  - name: restrictionReason
    type:
      enum: ClubRestrictionReason
C_Club.IsSubscribedToStream:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs:
  - name: subscribed
    type: boolean
C_Club.KickMember:
  inputs:
  - name: clubId
    type: string
  - name: memberId
    type: number
  outputs: {}
C_Club.LeaveClub:
  inputs:
  - name: clubId
    type: string
  outputs: {}
C_Club.RedeemTicket:
  inputs:
  - name: ticketId
    type: string
  outputs: {}
C_Club.RequestInvitationsForClub:
  inputs:
  - name: clubId
    type: string
  outputs: {}
C_Club.RequestMoreMessagesBefore:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: messageId
    nilable: true
    type:
      structure: C_Club.ClubMessageIdentifier
  - name: count
    nilable: true
    type: number
  outputs:
  - name: alreadyHasMessages
    type: boolean
C_Club.RequestTicket:
  inputs:
  - name: ticketId
    type: string
  outputs: {}
C_Club.RequestTickets:
  inputs:
  - name: clubId
    type: string
  outputs: {}
C_Club.RevokeInvitation:
  inputs:
  - name: clubId
    type: string
  - name: memberId
    type: number
  outputs: {}
C_Club.SendBattleTagFriendRequest:
  inputs:
  - name: guildClubId
    type: string
  - name: memberId
    type: number
  outputs: {}
C_Club.SendCharacterInvitation:
  inputs:
  - name: clubId
    type: string
  - name: character
    type: string
  outputs: {}
C_Club.SendInvitation:
  inputs:
  - name: clubId
    type: string
  - name: memberId
    type: number
  outputs: {}
C_Club.SendMessage:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  - name: message
    type: string
  outputs: {}
C_Club.SetAutoAdvanceStreamViewMarker:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs: {}
C_Club.SetAvatarTexture:
  inputs:
  - name: texture
    type: Texture
  - name: avatarId
    type: number
  - name: clubType
    type:
      enum: ClubType
  outputs: {}
C_Club.SetClubMemberNote:
  inputs:
  - name: clubId
    type: string
  - name: memberId
    type: number
  - name: note
    type: string
  outputs: {}
C_Club.SetClubPresenceSubscription:
  inputs:
  - name: clubId
    type: string
  outputs: {}
C_Club.SetClubStreamNotificationSettings:
  inputs:
  - name: clubId
    type: string
  - name: settings
    type:
      arrayof:
        structure: C_Club.ClubStreamNotificationSetting
  outputs: {}
C_Club.SetFavorite:
  inputs:
  - name: clubId
    type: string
  - name: isFavorite
    type: boolean
  outputs: {}
C_Club.SetSocialQueueingEnabled:
  inputs:
  - name: clubId
    type: string
  - name: enabled
    type: boolean
  outputs: {}
C_Club.ShouldAllowClubType:
  inputs:
  - name: clubType
    type:
      enum: ClubType
  outputs:
  - name: clubTypeIsAllowed
    type: boolean
C_Club.UnfocusAllStreams:
  inputs:
  - name: unsubscribe
    type: boolean
  outputs: {}
C_Club.UnfocusStream:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs: {}
C_Club.ValidateText:
  inputs:
  - name: clubType
    type:
      enum: ClubType
  - name: text
    type: string
  - name: clubFieldType
    type:
      enum: ClubFieldType
  outputs:
  - name: result
    type:
      enum: ValidateNameResult
C_ClubFinder.ApplicantAcceptClubInvite:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs: {}
C_ClubFinder.ApplicantDeclineClubInvite:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs: {}
C_ClubFinder.CancelMembershipRequest:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs: {}
C_ClubFinder.CheckAllPlayerApplicantSettings:
  inputs: {}
  outputs: {}
C_ClubFinder.ClearAllFinderCache:
  inputs: {}
  outputs: {}
C_ClubFinder.ClearClubApplicantsCache:
  inputs: {}
  outputs: {}
C_ClubFinder.ClearClubFinderPostingsCache:
  inputs: {}
  outputs: {}
C_ClubFinder.DoesPlayerBelongToClubFromClubGUID:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs:
  - name: belongsToClub
    type: boolean
C_ClubFinder.GetClubFinderDisableReason:
  inputs: {}
  outputs:
  - name: disableReason
    nilable: true
    type:
      enum: ClubFinderDisableReason
C_ClubFinder.GetClubRecruitmentSettings:
  inputs: {}
  outputs:
  - name: settings
    type:
      structure: C_ClubFinder.ClubSettingsInfo
C_ClubFinder.GetClubTypeFromFinderGUID:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs:
  - name: clubType
    type:
      enum: ClubFinderRequestType
C_ClubFinder.GetFocusIndexFromFlag:
  inputs:
  - name: flags
    type: number
  outputs:
  - name: index
    type: number
C_ClubFinder.GetPlayerApplicantLocaleFlags:
  inputs: {}
  outputs:
  - name: localeFlags
    type: number
C_ClubFinder.GetPlayerApplicantSettings:
  inputs: {}
  outputs:
  - name: settings
    type:
      structure: C_ClubFinder.ClubSettingsInfo
C_ClubFinder.GetPlayerClubApplicationStatus:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs:
  - name: clubStatus
    type:
      enum: PlayerClubRequestStatus
C_ClubFinder.GetPlayerSettingsFocusFlagsSelectedCount:
  inputs: {}
  outputs:
  - name: focusCount
    type: number
C_ClubFinder.GetPostingIDFromClubFinderGUID:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs:
  - name: postingID
    nilable: true
    type: number
C_ClubFinder.GetRecruitingClubInfoFromClubID:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: clubInfo
    nilable: true
    type:
      structure: C_ClubFinder.RecruitingClubInfo
C_ClubFinder.GetRecruitingClubInfoFromFinderGUID:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs:
  - name: clubInfo
    type:
      structure: C_ClubFinder.RecruitingClubInfo
C_ClubFinder.GetStatusOfPostingFromClubId:
  inputs:
  - name: postingID
    type: string
  outputs:
  - name: postingFlags
    type:
      arrayof:
        enum: ClubFinderClubPostingStatusFlags
C_ClubFinder.GetTotalMatchingCommunityListSize:
  inputs: {}
  outputs:
  - name: totalSize
    type: number
C_ClubFinder.GetTotalMatchingGuildListSize:
  inputs: {}
  outputs:
  - name: totalSize
    type: number
C_ClubFinder.HasAlreadyAppliedToLinkedPosting:
  inputs:
  - name: clubFinderGUID
    type: string
  outputs:
  - name: hasAlreadyApplied
    type: boolean
C_ClubFinder.HasPostingBeenDelisted:
  inputs:
  - name: postingID
    type: string
  outputs:
  - name: postingDelisted
    type: boolean
C_ClubFinder.IsEnabled:
  inputs: {}
  outputs:
  - name: isEnabled
    type: boolean
C_ClubFinder.IsListingEnabledFromFlags:
  inputs:
  - name: flags
    type: number
  outputs:
  - name: isListed
    type: boolean
C_ClubFinder.IsPostingBanned:
  inputs:
  - name: postingID
    type: string
  outputs:
  - name: postingBanned
    type: boolean
C_ClubFinder.LookupClubPostingFromClubFinderGUID:
  inputs:
  - name: clubFinderGUID
    type: string
  - name: isLinkedPosting
    type: boolean
  outputs: {}
C_ClubFinder.PlayerGetClubInvitationList:
  inputs: {}
  outputs:
  - name: inviteList
    type:
      arrayof:
        structure: C_ClubFinder.RecruitingClubInfo
C_ClubFinder.PlayerRequestPendingClubsList:
  inputs:
  - name: type
    type:
      enum: ClubFinderRequestType
  outputs: {}
C_ClubFinder.PlayerReturnPendingCommunitiesList:
  inputs: {}
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_ClubFinder.RecruitingClubInfo
C_ClubFinder.PlayerReturnPendingGuildsList:
  inputs: {}
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_ClubFinder.RecruitingClubInfo
C_ClubFinder.PostClub:
  inputs:
  - name: clubId
    type: string
  - name: itemLevelRequirement
    type: number
  - name: name
    type: string
  - name: description
    type: string
  - name: avatarId
    type: number
  - name: specs
    type:
      arrayof: number
  - name: type
    type:
      enum: ClubFinderRequestType
  - default: false
    name: crossFaction
    type: boolean
  outputs:
  - name: succesful
    type: boolean
C_ClubFinder.RequestApplicantList:
  inputs:
  - name: type
    type:
      enum: ClubFinderRequestType
  outputs: {}
C_ClubFinder.RequestClubsList:
  inputs:
  - name: guildListRequested
    type: boolean
  - name: searchString
    type: string
  - name: specIDs
    type:
      arrayof: number
  outputs: {}
C_ClubFinder.RequestMembershipToClub:
  inputs:
  - name: clubFinderGUID
    type: string
  - name: comment
    type: string
  - name: specIDs
    type:
      arrayof: number
  outputs: {}
C_ClubFinder.RequestNextCommunityPage:
  inputs:
  - name: startingIndex
    type: number
  - name: pageSize
    type: number
  outputs: {}
C_ClubFinder.RequestNextGuildPage:
  inputs:
  - name: startingIndex
    type: number
  - name: pageSize
    type: number
  outputs: {}
C_ClubFinder.RequestPostingInformationFromClubId:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: success
    type: boolean
C_ClubFinder.RequestSubscribedClubPostingIDs:
  inputs: {}
  outputs: {}
C_ClubFinder.ResetClubPostingMapCache:
  inputs: {}
  outputs: {}
C_ClubFinder.RespondToApplicant:
  inputs:
  - name: clubFinderGUID
    type: string
  - name: playerGUID
    type: string
  - name: shouldAccept
    type: boolean
  - name: requestType
    type:
      enum: ClubFinderRequestType
  - name: playerName
    type: string
  - name: forceAccept
    type: boolean
  - name: reported
    nilable: true
    type: boolean
  outputs: {}
C_ClubFinder.ReturnClubApplicantList:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_ClubFinder.ClubFinderApplicantInfo
C_ClubFinder.ReturnMatchingCommunityList:
  inputs: {}
  outputs:
  - name: recruitingClubs
    type:
      arrayof:
        structure: C_ClubFinder.RecruitingClubInfo
C_ClubFinder.ReturnMatchingGuildList:
  inputs: {}
  outputs:
  - name: recruitingClubs
    type:
      arrayof:
        structure: C_ClubFinder.RecruitingClubInfo
C_ClubFinder.ReturnPendingClubApplicantList:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_ClubFinder.ClubFinderApplicantInfo
C_ClubFinder.SendChatWhisper:
  inputs:
  - name: clubFinderGUID
    type: string
  - name: playerGUID
    type: string
  - name: applicantType
    type:
      enum: ClubFinderRequestType
  - name: name
    type: string
  outputs: {}
C_ClubFinder.SetAllRecruitmentSettings:
  inputs:
  - name: value
    type: number
  outputs: {}
C_ClubFinder.SetPlayerApplicantLocaleFlags:
  inputs:
  - name: localeFlags
    type: number
  outputs: {}
C_ClubFinder.SetPlayerApplicantSettings:
  inputs:
  - name: index
    type: number
  - name: checked
    type: boolean
  outputs: {}
C_ClubFinder.SetRecruitmentLocale:
  inputs:
  - name: locale
    type: number
  outputs: {}
C_ClubFinder.SetRecruitmentSettings:
  inputs:
  - name: index
    type: number
  - name: checked
    type: boolean
  outputs: {}
C_ClubFinder.ShouldShowClubFinder:
  inputs: {}
  outputs:
  - name: shouldShow
    type: boolean
C_Commentator.AddPlayerOverrideName:
  inputs:
  - name: playerName
    type: string
  - name: overrideName
    type: string
  outputs: {}
C_Commentator.AddTrackedDefensiveAuras:
  inputs:
  - name: spellIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.AddTrackedOffensiveAuras:
  inputs:
  - name: spellIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.AreTeamsSwapped:
  inputs: {}
  outputs:
  - name: teamsAreSwapped
    type: boolean
C_Commentator.AssignPlayersToTeam:
  inputs:
  - name: playerName
    type:
      arrayof: string
  - name: teamName
    type: string
  outputs: {}
C_Commentator.AssignPlayersToTeamInCurrentInstance:
  inputs:
  - name: teamIndex
    type: number
  - name: teamName
    type: string
  outputs: {}
C_Commentator.AssignPlayerToTeam:
  inputs:
  - name: playerName
    type: string
  - name: teamName
    type: string
  outputs: {}
C_Commentator.CanUseCommentatorCheats:
  inputs: {}
  outputs:
  - name: canUseCommentatorCheats
    type: boolean
C_Commentator.ClearCameraTarget:
  inputs: {}
  outputs: {}
C_Commentator.ClearFollowTarget:
  inputs: {}
  outputs: {}
C_Commentator.ClearLookAtTarget:
  inputs:
  - name: lookAtIndex
    nilable: true
    type: number
  outputs: {}
C_Commentator.EnterInstance:
  inputs: {}
  outputs: {}
C_Commentator.ExitInstance:
  inputs: {}
  outputs: {}
C_Commentator.FindSpectatedUnit:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: playerIndex
    type: number
  - name: teamIndex
    type: number
  - name: isPet
    type: boolean
C_Commentator.FindTeamNameInCurrentInstance:
  inputs:
  - name: teamIndex
    type: number
  outputs:
  - name: teamName
    nilable: true
    type: string
C_Commentator.FindTeamNameInDirectory:
  inputs:
  - name: playerNames
    type:
      arrayof: string
  outputs:
  - name: teamName
    nilable: true
    type: string
C_Commentator.FlushCommentatorHistory:
  inputs: {}
  outputs: {}
C_Commentator.FollowPlayer:
  inputs:
  - name: factionIndex
    type: number
  - name: playerIndex
    type: number
  - name: forceInstantTransition
    nilable: true
    type: boolean
  outputs: {}
C_Commentator.FollowUnit:
  inputs:
  - name: token
    type: string
  outputs: {}
C_Commentator.ForceFollowTransition:
  inputs: {}
  outputs: {}
C_Commentator.GetAdditionalCameraWeight:
  inputs: {}
  outputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
C_Commentator.GetAdditionalCameraWeightByToken:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: weight
    type: number
C_Commentator.GetAllPlayerOverrideNames:
  inputs: {}
  outputs:
  - name: nameEntries
    type:
      arrayof:
        structure: C_Commentator.NameOverrideEntry
C_Commentator.GetCamera:
  inputs: {}
  outputs:
  - name: xPos
    type: number
  - name: yPos
    type: number
  - name: zPos
    type: number
  - name: yaw
    type: number
  - name: pitch
    type: number
  - name: roll
    type: number
  - name: fov
    type: number
C_Commentator.GetCameraCollision:
  inputs: {}
  outputs:
  - name: isColliding
    type: boolean
C_Commentator.GetCameraPosition:
  inputs: {}
  outputs:
  - name: xPos
    type: number
  - name: yPos
    type: number
  - name: zPos
    type: number
C_Commentator.GetCommentatorHistory:
  inputs: {}
  outputs:
  - name: history
    type:
      structure: C_Commentator.CommentatorHistory
C_Commentator.GetCurrentMapID:
  inputs: {}
  outputs:
  - name: mapID
    nilable: true
    type: number
C_Commentator.GetDampeningPercent:
  inputs: {}
  outputs:
  - name: percentage
    type: number
C_Commentator.GetDistanceBeforeForcedHorizontalConvergence:
  inputs: {}
  outputs:
  - name: distance
    type: number
C_Commentator.GetDurationToForceHorizontalConvergence:
  inputs: {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetExcludeDistance:
  inputs: {}
  outputs:
  - name: excludeDistance
    type: number
C_Commentator.GetHardlockWeight:
  inputs: {}
  outputs:
  - name: weight
    type: number
C_Commentator.GetHorizontalAngleThresholdToSmooth:
  inputs: {}
  outputs:
  - name: angle
    type: number
C_Commentator.GetIndirectSpellID:
  inputs:
  - name: trackedSpellID
    type: number
  outputs:
  - name: indirectSpellID
    type: number
C_Commentator.GetInstanceInfo:
  inputs:
  - name: mapIndex
    type: number
  - name: instanceIndex
    type: number
  outputs:
  - name: mapID
    type: number
  - name: mapName
    nilable: true
    type: string
  - name: status
    type: number
  - name: instanceIDLow
    type: number
  - name: instanceIDHigh
    type: number
C_Commentator.GetLookAtLerpAmount:
  inputs: {}
  outputs:
  - name: amount
    type: number
C_Commentator.GetMapInfo:
  inputs:
  - name: mapIndex
    type: number
  outputs:
  - name: teamSize
    type: number
  - name: minLevel
    type: number
  - name: maxLevel
    type: number
  - name: numInstances
    type: number
C_Commentator.GetMatchDuration:
  inputs: {}
  outputs:
  - name: seconds
    type: number
C_Commentator.GetMaxNumPlayersPerTeam:
  inputs: {}
  outputs:
  - name: maxNumPlayersPerTeam
    type: number
C_Commentator.GetMaxNumTeams:
  inputs: {}
  outputs:
  - name: maxNumTeams
    type: number
C_Commentator.GetMode:
  inputs: {}
  outputs:
  - name: commentatorMode
    type: number
C_Commentator.GetMsToHoldForHorizontalMovement:
  inputs: {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetMsToHoldForVerticalMovement:
  inputs: {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetMsToSmoothHorizontalChange:
  inputs: {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetMsToSmoothVerticalChange:
  inputs: {}
  outputs:
  - name: ms
    type: number
C_Commentator.GetNumMaps:
  inputs: {}
  outputs:
  - name: numMaps
    type: number
C_Commentator.GetNumPlayers:
  inputs:
  - name: factionIndex
    type: number
  outputs:
  - name: numPlayers
    type: number
C_Commentator.GetOrCreateSeries:
  inputs:
  - name: teamName1
    type: string
  - name: teamName2
    type: string
  outputs:
  - name: data
    type:
      structure: C_Commentator.CommentatorSeries
C_Commentator.GetPlayerAuraInfo:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  - name: spellID
    type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerAuraInfoByUnit:
  inputs:
  - name: token
    type: unit
  - name: spellID
    type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerCooldownInfo:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  - name: spellID
    type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerCooldownInfoByUnit:
  inputs:
  - name: unitToken
    type: unit
  - name: spellID
    type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerCrowdControlInfo:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  outputs:
  - name: spellID
    type: number
  - name: expiration
    type: number
  - name: duration
    type: number
C_Commentator.GetPlayerCrowdControlInfoByUnit:
  inputs:
  - name: token
    type: unit
  outputs:
  - name: spellID
    type: number
  - name: expiration
    type: number
  - name: duration
    type: number
C_Commentator.GetPlayerData:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_Commentator.CommentatorPlayerData
C_Commentator.GetPlayerFlagInfo:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  outputs:
  - name: hasFlag
    type: boolean
C_Commentator.GetPlayerFlagInfoByUnit:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: hasFlag
    type: boolean
C_Commentator.GetPlayerItemCooldownInfo:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  - name: itemID
    type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerItemCooldownInfoByUnit:
  inputs:
  - name: unitToken
    type: unit
  - name: itemID
    type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_Commentator.GetPlayerOverrideName:
  inputs:
  - name: originalName
    type: string
  outputs:
  - name: overrideName
    type: string
C_Commentator.GetPlayerSpellCharges:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  - name: spellID
    type: number
  outputs:
  - name: charges
    type: number
  - name: maxCharges
    type: number
  - name: startTime
    type: number
  - name: duration
    type: number
C_Commentator.GetPlayerSpellChargesByUnit:
  inputs:
  - name: unitToken
    type: unit
  - name: spellID
    type: number
  outputs:
  - name: charges
    type: number
  - name: maxCharges
    type: number
  - name: startTime
    type: number
  - name: duration
    type: number
C_Commentator.GetPositionLerpAmount:
  inputs: {}
  outputs:
  - name: amount
    type: number
C_Commentator.GetSmoothFollowTransitioning:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_Commentator.GetSoftlockWeight:
  inputs: {}
  outputs:
  - name: weight
    type: number
C_Commentator.GetSpeedFactor:
  inputs: {}
  outputs:
  - name: factor
    type: number
C_Commentator.GetStartLocation:
  inputs:
  - name: mapID
    type: number
  outputs:
  - name: pos
    type:
      structure: vector3
C_Commentator.GetTeamColor:
  inputs:
  - name: teamIndex
    type: number
  outputs:
  - name: color
    type:
      structure: colorRGB
C_Commentator.GetTeamColorByUnit:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: color
    type:
      structure: colorRGB
C_Commentator.GetTimeLeftInMatch:
  inputs: {}
  outputs:
  - name: timeLeft
    nilable: true
    type: number
C_Commentator.GetTrackedSpellID:
  inputs:
  - name: indirectSpellID
    type: number
  outputs:
  - name: trackedSpellID
    type: number
C_Commentator.GetTrackedSpells:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  - name: category
    type:
      enum: TrackedSpellCategory
  outputs:
  - name: spells
    nilable: true
    type:
      arrayof: number
C_Commentator.GetTrackedSpellsByUnit:
  inputs:
  - name: unitToken
    type: unit
  - name: category
    type:
      enum: TrackedSpellCategory
  outputs:
  - name: spells
    nilable: true
    type:
      arrayof: number
C_Commentator.GetUnitData:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: data
    type:
      structure: C_Commentator.CommentatorUnitData
C_Commentator.GetWargameInfo:
  inputs:
  - name: listID
    type: number
  outputs:
  - name: name
    type: string
  - name: minPlayers
    type: number
  - name: maxPlayers
    type: number
  - name: isArena
    type: boolean
C_Commentator.HasTrackedAuras:
  inputs:
  - name: token
    type: unit
  outputs:
  - name: hasOffensiveAura
    type: boolean
  - name: hasDefensiveAura
    type: boolean
C_Commentator.IsSmartCameraLocked:
  inputs: {}
  outputs:
  - name: isSmartCameraLocked
    type: boolean
C_Commentator.IsSpectating:
  inputs: {}
  outputs:
  - name: isSpectating
    type: boolean
C_Commentator.IsTrackedDefensiveAura:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: isDefensiveTrigger
    type: boolean
C_Commentator.IsTrackedOffensiveAura:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: isOffensiveTrigger
    type: boolean
C_Commentator.IsTrackedSpell:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  - name: spellID
    type: number
  - name: category
    type:
      enum: TrackedSpellCategory
  outputs:
  - name: isTracked
    type: boolean
C_Commentator.IsTrackedSpellByUnit:
  inputs:
  - name: unitToken
    type: unit
  - name: spellID
    type: number
  - name: category
    type:
      enum: TrackedSpellCategory
  outputs:
  - name: isTracked
    type: boolean
C_Commentator.IsUsingSmartCamera:
  inputs: {}
  outputs:
  - name: isUsingSmartCamera
    type: boolean
C_Commentator.LookAtPlayer:
  inputs:
  - name: factionIndex
    type: number
  - name: playerIndex
    type: number
  - name: lookAtIndex
    nilable: true
    type: number
  outputs: {}
C_Commentator.RemoveAllOverrideNames:
  inputs: {}
  outputs: {}
C_Commentator.RemovePlayerOverrideName:
  inputs:
  - name: originalPlayerName
    type: string
  outputs: {}
C_Commentator.RequestPlayerCooldownInfo:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  outputs: {}
C_Commentator.ResetFoVTarget:
  inputs: {}
  outputs: {}
C_Commentator.ResetSeriesScores:
  inputs:
  - name: teamName1
    type: string
  - name: teamName2
    type: string
  outputs: {}
C_Commentator.ResetSettings:
  inputs: {}
  outputs: {}
C_Commentator.ResetTrackedAuras:
  inputs: {}
  outputs: {}
C_Commentator.SetAdditionalCameraWeight:
  inputs:
  - name: teamIndex
    type: number
  - name: playerIndex
    type: number
  - name: weight
    type: number
  outputs: {}
C_Commentator.SetAdditionalCameraWeightByToken:
  inputs:
  - name: unitToken
    type: unit
  - name: weight
    type: number
  outputs: {}
C_Commentator.SetBlocklistedAuras:
  inputs:
  - name: spellIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.SetBlocklistedCooldowns:
  inputs:
  - name: specID
    type: number
  - name: spellIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.SetBlocklistedItemCooldowns:
  inputs:
  - name: itemIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.SetCamera:
  inputs:
  - name: xPos
    type: number
  - name: yPos
    type: number
  - name: zPos
    type: number
  - name: yaw
    type: number
  - name: pitch
    type: number
  - name: roll
    type: number
  - name: fov
    type: number
  outputs: {}
C_Commentator.SetCameraCollision:
  inputs:
  - name: collide
    type: boolean
  outputs: {}
C_Commentator.SetCameraPosition:
  inputs:
  - name: xPos
    type: number
  - name: yPos
    type: number
  - name: zPos
    type: number
  - name: snapToLocation
    type: boolean
  outputs: {}
C_Commentator.SetCheatsEnabled:
  inputs:
  - name: enableCheats
    type: boolean
  outputs: {}
C_Commentator.SetCommentatorHistory:
  inputs:
  - name: history
    type:
      structure: C_Commentator.CommentatorHistory
  outputs: {}
C_Commentator.SetDistanceBeforeForcedHorizontalConvergence:
  inputs:
  - name: distance
    type: number
  outputs: {}
C_Commentator.SetDurationToForceHorizontalConvergence:
  inputs:
  - name: ms
    type: number
  outputs: {}
C_Commentator.SetExcludeDistance:
  inputs:
  - name: excludeDistance
    type: number
  outputs: {}
C_Commentator.SetFollowCameraSpeeds:
  inputs:
  - name: elasticSpeed
    type: number
  - name: minSpeed
    type: number
  outputs: {}
C_Commentator.SetHardlockWeight:
  inputs:
  - name: weight
    type: number
  outputs: {}
C_Commentator.SetHorizontalAngleThresholdToSmooth:
  inputs:
  - name: angle
    type: number
  outputs: {}
C_Commentator.SetLookAtLerpAmount:
  inputs:
  - name: amount
    type: number
  outputs: {}
C_Commentator.SetMapAndInstanceIndex:
  inputs:
  - name: mapIndex
    type: number
  - name: instanceIndex
    type: number
  outputs: {}
C_Commentator.SetMouseDisabled:
  inputs:
  - name: disabled
    type: boolean
  outputs: {}
C_Commentator.SetMoveSpeed:
  inputs:
  - name: newSpeed
    type: number
  outputs: {}
C_Commentator.SetMsToHoldForHorizontalMovement:
  inputs:
  - name: ms
    type: number
  outputs: {}
C_Commentator.SetMsToHoldForVerticalMovement:
  inputs:
  - name: ms
    type: number
  outputs: {}
C_Commentator.SetMsToSmoothHorizontalChange:
  inputs:
  - name: ms
    type: number
  outputs: {}
C_Commentator.SetMsToSmoothVerticalChange:
  inputs:
  - name: ms
    type: number
  outputs: {}
C_Commentator.SetPositionLerpAmount:
  inputs:
  - name: amount
    type: number
  outputs: {}
C_Commentator.SetRequestedDebuffCooldowns:
  inputs:
  - name: specID
    type: number
  - name: spellIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.SetRequestedDefensiveCooldowns:
  inputs:
  - name: specID
    type: number
  - name: spellIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.SetRequestedItemCooldowns:
  inputs:
  - name: itemIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.SetRequestedOffensiveCooldowns:
  inputs:
  - name: specID
    type: number
  - name: spellIDs
    type:
      arrayof: number
  outputs: {}
C_Commentator.SetSeriesScore:
  inputs:
  - name: teamName1
    type: string
  - name: teamName2
    type: string
  - name: scoringTeamName
    type: string
  - name: score
    type: number
  outputs: {}
C_Commentator.SetSeriesScores:
  inputs:
  - name: teamName1
    type: string
  - name: teamName2
    type: string
  - name: score1
    type: number
  - name: score2
    type: number
  outputs: {}
C_Commentator.SetSmartCameraLocked:
  inputs:
  - name: locked
    type: boolean
  outputs: {}
C_Commentator.SetSmoothFollowTransitioning:
  inputs:
  - name: enabled
    type: boolean
  outputs: {}
C_Commentator.SetSoftlockWeight:
  inputs:
  - name: weight
    type: number
  outputs: {}
C_Commentator.SetSpeedFactor:
  inputs:
  - name: factor
    type: number
  outputs: {}
C_Commentator.SetTargetHeightOffset:
  inputs:
  - name: offset
    type: number
  outputs: {}
C_Commentator.SetUseSmartCamera:
  inputs:
  - name: useSmartCamera
    type: boolean
  outputs: {}
C_Commentator.SnapCameraLookAtPoint:
  inputs: {}
  outputs: {}
C_Commentator.StartWargame:
  inputs:
  - name: listID
    type: number
  - name: teamSize
    type: number
  - name: tournamentRules
    type: boolean
  - name: teamOneCaptain
    type: string
  - name: teamTwoCaptain
    type: string
  outputs: {}
C_Commentator.SwapTeamSides:
  inputs: {}
  outputs: {}
C_Commentator.ToggleCheats:
  inputs: {}
  outputs: {}
C_Commentator.UpdateMapInfo:
  inputs:
  - name: targetPlayer
    nilable: true
    type: string
  outputs: {}
C_Commentator.UpdatePlayerInfo:
  inputs: {}
  outputs: {}
C_Commentator.ZoomIn:
  inputs: {}
  outputs: {}
C_Commentator.ZoomOut:
  inputs: {}
  outputs: {}
C_ConsoleScriptCollection.GetCollectionDataByID:
  inputs:
  - name: collectionID
    type: number
  outputs:
  - name: data
    nilable: true
    type:
      structure: C_ConsoleScriptCollection.ConsoleScriptCollectionData
C_ConsoleScriptCollection.GetCollectionDataByTag:
  inputs:
  - name: collectionTag
    type: string
  outputs:
  - name: data
    nilable: true
    type:
      structure: C_ConsoleScriptCollection.ConsoleScriptCollectionData
C_ConsoleScriptCollection.GetElements:
  inputs:
  - name: collectionID
    type: number
  outputs:
  - name: elementIDs
    type:
      arrayof:
        structure: C_ConsoleScriptCollection.ConsoleScriptCollectionElementData
C_ConsoleScriptCollection.GetScriptData:
  inputs:
  - name: consoleScriptID
    type: number
  outputs:
  - name: data
    type:
      structure: C_ConsoleScriptCollection.ConsoleScriptData
C_Container.ContainerIDToInventoryID:
  inputs:
  - name: containerID
    type:
      enum: BagIndex
  outputs:
  - name: inventoryID
    type: number
C_Container.ContainerRefundItemPurchase:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  - default: false
    name: isEquipped
    type: boolean
  outputs: {}
C_Container.GetBackpackAutosortDisabled:
  inputs: {}
  outputs:
  - name: isDisabled
    type: boolean
C_Container.GetBackpackSellJunkDisabled:
  inputs: {}
  outputs:
  - name: isDisabled
    type: boolean
C_Container.GetBagName:
  inputs:
  - name: bagIndex
    type:
      enum: BagIndex
  outputs:
  - name: name
    type: string
C_Container.GetBagSlotFlag:
  inputs:
  - name: bagIndex
    type:
      enum: BagIndex
  - name: flag
    type:
      enum: BagSlotFlags
  outputs:
  - name: isSet
    type: boolean
C_Container.GetBankAutosortDisabled:
  inputs: {}
  outputs:
  - name: isDisabled
    type: boolean
C_Container.GetContainerFreeSlots:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  outputs:
  - name: freeSlots
    type:
      arrayof: number
C_Container.GetContainerItemCooldown:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: number
C_Container.GetContainerItemDurability:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: durability
    type: number
  - name: maxDurability
    type: number
C_Container.GetContainerItemEquipmentSetInfo:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: inSet
    type: boolean
  - name: setList
    type: string
C_Container.GetContainerItemID:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: containerID
    type: number
C_Container.GetContainerItemInfo:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: containerInfo
    type:
      structure: C_Container.ContainerItemInfo
C_Container.GetContainerItemLink:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: itemLink
    type: string
C_Container.GetContainerItemPurchaseCurrency:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  - name: itemIndex
    type: number
  - name: isEquipped
    type: boolean
  outputs:
  - name: currencyInfo
    type:
      structure: C_Container.ItemPurchaseCurrency
C_Container.GetContainerItemPurchaseInfo:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  - name: isEquipped
    type: boolean
  outputs:
  - name: info
    type:
      structure: C_Container.ItemPurchaseInfo
C_Container.GetContainerItemPurchaseItem:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  - name: itemIndex
    type: number
  - name: isEquipped
    type: boolean
  outputs:
  - name: itemInfo
    type:
      structure: C_Container.ItemPurchaseItem
C_Container.GetContainerItemQuestInfo:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: questInfo
    type:
      structure: C_Container.ItemQuestInfo
C_Container.GetContainerNumFreeSlots:
  inputs:
  - name: bagIndex
    type:
      enum: BagIndex
  outputs:
  - name: numFreeSlots
    type: number
  - name: bagFamily
    nilable: true
    type: number
C_Container.GetContainerNumSlots:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  outputs:
  - name: numSlots
    type: number
C_Container.GetInsertItemsLeftToRight:
  inputs: {}
  outputs:
  - name: isEnabled
    type: boolean
C_Container.GetItemCooldown:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: startTime
    type: number
  - name: duration
    type: number
  - name: enable
    type: number
C_Container.GetMaxArenaCurrency:
  inputs: {}
  outputs:
  - name: maxCurrency
    type: number
C_Container.GetSortBagsRightToLeft:
  inputs: {}
  outputs:
  - name: isEnabled
    type: boolean
C_Container.IsBattlePayItem:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: isBattlePayItem
    type: boolean
C_Container.IsContainerFiltered:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  outputs:
  - name: isFiltered
    type: boolean
C_Container.PickupContainerItem:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs: {}
C_Container.PlayerHasHearthstone:
  inputs: {}
  outputs:
  - name: itemID
    nilable: true
    type: number
C_Container.SetBackpackAutosortDisabled:
  inputs:
  - name: disable
    type: boolean
  outputs: {}
C_Container.SetBackpackSellJunkDisabled:
  inputs:
  - name: disable
    type: boolean
  outputs: {}
C_Container.SetBagPortraitTexture:
  inputs:
  - name: texture
    type: Texture
  - name: bagIndex
    type:
      enum: BagIndex
  outputs: {}
C_Container.SetBagSlotFlag:
  inputs:
  - name: bagIndex
    type:
      enum: BagIndex
  - name: flag
    type:
      enum: BagSlotFlags
  - name: isSet
    type: boolean
  outputs: {}
C_Container.SetBankAutosortDisabled:
  inputs:
  - name: disable
    type: boolean
  outputs: {}
C_Container.SetInsertItemsLeftToRight:
  inputs:
  - name: enable
    type: boolean
  outputs: {}
C_Container.SetItemSearch:
  inputs:
  - name: searchString
    type: string
  outputs: {}
C_Container.SetSortBagsRightToLeft:
  inputs:
  - name: enable
    type: boolean
  outputs: {}
C_Container.ShowContainerSellCursor:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs: {}
C_Container.SocketContainerItem:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: success
    type: boolean
C_Container.SortBags:
  inputs: {}
  outputs: {}
C_Container.SortBankBags:
  inputs: {}
  outputs: {}
C_Container.SortReagentBankBags:
  inputs: {}
  outputs: {}
C_Container.SplitContainerItem:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  - name: amount
    type: number
  outputs: {}
C_Container.UseContainerItem:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  - name: unitToken
    nilable: true
    type: unit
  - default: false
    name: reagentBankOpen
    type: boolean
  outputs: {}
C_Container.UseHearthstone:
  inputs: {}
  outputs:
  - name: used
    type: boolean
C_ContentTracking.GetBestMapForTrackable:
  inputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  - name: trackableID
    type: number
  - default: false
    name: ignoreWaypoint
    type: boolean
  outputs:
  - name: result
    type:
      enum: ContentTrackingResult
  - name: mapID
    nilable: true
    type: number
C_ContentTracking.GetCollectableSourceTrackingEnabled:
  inputs: {}
  outputs:
  - name: isEnabled
    type: boolean
C_ContentTracking.GetCollectableSourceTypes:
  inputs: {}
  outputs:
  - name: collectableSourceTypes
    type:
      arrayof:
        enum: ContentTrackingType
C_ContentTracking.GetCurrentTrackingTarget:
  inputs:
  - name: type
    type:
      enum: ContentTrackingType
  - name: id
    type: number
  outputs:
  - name: targetType
    type:
      enum: ContentTrackingTargetType
  - name: targetID
    type: number
C_ContentTracking.GetEncounterTrackingInfo:
  inputs:
  - name: journalEncounterID
    type: number
  outputs:
  - name: trackingInfo
    type:
      structure: EncounterTrackingInfo
C_ContentTracking.GetNextWaypointForTrackable:
  inputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  - name: trackableID
    type: number
  - name: uiMapID
    type: number
  outputs:
  - name: result
    type:
      enum: ContentTrackingResult
  - name: mapInfo
    nilable: true
    type:
      structure: ContentTrackingMapInfo
C_ContentTracking.GetObjectiveText:
  inputs:
  - name: targetType
    type:
      enum: ContentTrackingTargetType
  - name: targetID
    type: number
  - default: true
    name: includeHyperlinks
    type: boolean
  outputs:
  - name: objectiveText
    type: string
C_ContentTracking.GetTitle:
  inputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  - name: trackableID
    type: number
  outputs:
  - name: title
    type: string
C_ContentTracking.GetTrackablesOnMap:
  inputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  - name: uiMapID
    type: number
  outputs:
  - name: result
    type:
      enum: ContentTrackingResult
  - name: trackableMapInfos
    type:
      arrayof:
        structure: ContentTrackingMapInfo
C_ContentTracking.GetTrackedIDs:
  inputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  outputs:
  - name: entryIDs
    type:
      arrayof: number
C_ContentTracking.GetVendorTrackingInfo:
  inputs:
  - name: collectableEntryID
    type: number
  outputs:
  - name: vendorTrackingInfo
    type:
      structure: VendorTrackingInfo
C_ContentTracking.GetWaypointText:
  inputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  - name: trackableID
    type: number
  outputs:
  - name: waypointText
    type: string
C_ContentTracking.IsNavigable:
  inputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  - name: trackableID
    type: number
  outputs:
  - name: result
    type:
      enum: ContentTrackingResult
  - name: isNavigable
    type: boolean
C_ContentTracking.IsTrackable:
  inputs:
  - name: type
    type:
      enum: ContentTrackingType
  - name: id
    type: number
  outputs:
  - name: isTrackable
    type: boolean
C_ContentTracking.IsTracking:
  inputs:
  - name: type
    type:
      enum: ContentTrackingType
  - name: id
    type: number
  outputs:
  - name: isTracking
    type: boolean
C_ContentTracking.StartTracking:
  inputs:
  - name: type
    type:
      enum: ContentTrackingType
  - name: id
    type: number
  outputs:
  - name: error
    nilable: true
    type:
      enum: ContentTrackingError
C_ContentTracking.StopTracking:
  inputs:
  - name: type
    type:
      enum: ContentTrackingType
  - name: id
    type: number
  - name: stopType
    type:
      enum: ContentTrackingStopType
  outputs: {}
C_ContentTracking.ToggleTracking:
  inputs:
  - name: type
    type:
      enum: ContentTrackingType
  - name: id
    type: number
  - name: stopType
    type:
      enum: ContentTrackingStopType
  outputs:
  - name: error
    nilable: true
    type:
      enum: ContentTrackingError
C_ContributionCollector.Close:
  inputs: {}
  outputs: {}
C_ContributionCollector.Contribute:
  inputs:
  - name: contributionID
    type: number
  outputs: {}
C_ContributionCollector.GetActive:
  inputs: {}
  outputs:
  - name: contributionID
    type: number
C_ContributionCollector.GetAtlases:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - name: atlasName
    type:
      arrayof: string
C_ContributionCollector.GetBuffs:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - name: spellID
    type: number
C_ContributionCollector.GetContributionAppearance:
  inputs:
  - name: contributionID
    type: number
  - name: contributionState
    type:
      enum: ContributionState
  outputs:
  - name: appearance
    nilable: true
    type:
      structure: C_ContributionCollector.ContributionAppearance
C_ContributionCollector.GetContributionCollectorsForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: contributionCollectors
    type:
      arrayof:
        structure: C_ContributionCollector.ContributionMapInfo
C_ContributionCollector.GetContributionResult:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - name: result
    type:
      enum: ContributionResult
C_ContributionCollector.GetDescription:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - default: ''
    name: description
    type: string
C_ContributionCollector.GetManagedContributionsForCreatureID:
  inputs:
  - name: creatureID
    type: number
  outputs:
  - name: contributionID
    type: number
C_ContributionCollector.GetName:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - default: ''
    name: name
    type: string
C_ContributionCollector.GetOrderIndex:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - name: orderIndex
    type: number
C_ContributionCollector.GetRequiredContributionCurrency:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - default: 0
    name: currencyID
    type: number
  - default: 0
    name: currencyAmount
    type: number
C_ContributionCollector.GetRequiredContributionItem:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - default: 0
    name: itemID
    type: number
  - default: 0
    name: itemCount
    type: number
C_ContributionCollector.GetRewardQuestID:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - name: questID
    type: number
C_ContributionCollector.GetState:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - default: 0
    name: contributionState
    type:
      enum: ContributionState
  - name: contributionPercentageComplete
    type: number
  - name: timeOfNextStateChange
    nilable: true
    type: number
  - name: startTime
    type: number
C_ContributionCollector.HasPendingContribution:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - name: hasPending
    type: boolean
C_ContributionCollector.IsAwaitingRewardQuestData:
  inputs:
  - name: contributionID
    type: number
  outputs:
  - name: awaitingData
    type: boolean
C_CovenantCallings.AreCallingsUnlocked:
  inputs: {}
  outputs:
  - name: unlocked
    type: boolean
C_CovenantCallings.RequestCallings:
  inputs: {}
  outputs: {}
C_CovenantPreview.CloseFromUI:
  inputs: {}
  outputs: {}
C_CovenantPreview.GetCovenantInfoForPlayerChoiceResponseID:
  inputs:
  - name: playerChoiceResponseID
    type: number
  outputs:
  - name: previewInfo
    type:
      structure: C_CovenantPreview.CovenantPreviewInfo
C_Covenants.GetActiveCovenantID:
  inputs: {}
  outputs:
  - name: covenantID
    type: number
C_Covenants.GetCovenantData:
  impl: C_Covenants.GetCovenantData
  inputs:
  - name: covenantID
    type: number
  outputs:
  - name: data
    nilable: true
    type:
      structure: C_Covenants.CovenantData
C_Covenants.GetCovenantIDs:
  inputs: {}
  outputs:
  - name: covenantID
    type:
      arrayof: number
C_CovenantSanctumUI.CanAccessReservoir:
  inputs: {}
  outputs:
  - name: canAccess
    type: boolean
C_CovenantSanctumUI.CanDepositAnima:
  inputs: {}
  outputs:
  - name: canDeposit
    type: boolean
C_CovenantSanctumUI.DepositAnima:
  inputs: {}
  outputs: {}
C_CovenantSanctumUI.EndInteraction:
  inputs: {}
  outputs: {}
C_CovenantSanctumUI.GetAnimaInfo:
  inputs: {}
  outputs:
  - name: currencyID
    type: number
  - name: maxDisplayableValue
    type: number
C_CovenantSanctumUI.GetCurrentTalentTreeID:
  inputs: {}
  outputs:
  - name: currentTalentTreeID
    nilable: true
    type: number
C_CovenantSanctumUI.GetFeatures:
  inputs: {}
  outputs:
  - name: features
    type:
      arrayof:
        structure: C_CovenantSanctumUI.CovenantSanctumFeatureInfo
C_CovenantSanctumUI.GetRenownLevel:
  inputs: {}
  outputs:
  - name: level
    type: number
C_CovenantSanctumUI.GetRenownLevels:
  impl: C_CovenantSanctumUI.GetRenownLevels
  inputs:
  - name: covenantID
    type: number
  outputs:
  - name: levels
    type:
      arrayof:
        structure: C_CovenantSanctumUI.CovenantSanctumRenownLevelInfo
C_CovenantSanctumUI.GetRenownRewardsForLevel:
  impl: C_CovenantSanctumUI.GetRenownRewardsForLevel
  inputs:
  - name: covenantID
    type: number
  - name: renownLevel
    type: number
  outputs:
  - name: rewards
    type:
      arrayof:
        structure: C_CovenantSanctumUI.CovenantSanctumRenownRewardInfo
C_CovenantSanctumUI.GetSanctumType:
  inputs: {}
  outputs:
  - name: sanctumType
    nilable: true
    type:
      enum: GarrTalentFeatureSubtype
C_CovenantSanctumUI.GetSoulCurrencies:
  inputs: {}
  outputs:
  - name: currencyIDs
    type:
      arrayof: number
C_CovenantSanctumUI.HasMaximumRenown:
  inputs: {}
  outputs:
  - name: hasMaxRenown
    type: boolean
C_CovenantSanctumUI.IsPlayerInRenownCatchUpMode:
  inputs: {}
  outputs:
  - name: isInCatchUpMode
    type: boolean
C_CovenantSanctumUI.IsWeeklyRenownCapped:
  inputs: {}
  outputs:
  - name: isWeeklyCapped
    type: boolean
C_CovenantSanctumUI.RequestCatchUpState:
  inputs: {}
  outputs: {}
C_CraftingOrders.AreOrderNotesDisabled:
  inputs: {}
  outputs:
  - name: areNotesDisabled
    type: boolean
C_CraftingOrders.CalculateCraftingOrderPostingFee:
  inputs:
  - name: skillLineAbilityID
    type: number
  - name: orderType
    type:
      enum: CraftingOrderType
  - name: orderDuration
    type:
      enum: CraftingOrderDuration
  outputs:
  - name: deposit
    type: number
C_CraftingOrders.CancelOrder:
  inputs:
  - name: orderID
    type: number
  outputs: {}
C_CraftingOrders.CanOrderSkillAbility:
  inputs:
  - name: skillLineAbilityID
    type: number
  outputs:
  - name: canOrder
    type: boolean
C_CraftingOrders.ClaimOrder:
  inputs:
  - name: orderID
    type: number
  - name: profession
    type:
      enum: Profession
  outputs: {}
C_CraftingOrders.CloseCrafterCraftingOrders:
  inputs: {}
  outputs: {}
C_CraftingOrders.CloseCustomerCraftingOrders:
  inputs: {}
  outputs: {}
C_CraftingOrders.FulfillOrder:
  inputs:
  - name: orderID
    type: number
  - name: crafterNote
    type: string
  - name: profession
    type:
      enum: Profession
  outputs: {}
C_CraftingOrders.GetClaimedOrder:
  inputs: {}
  outputs:
  - name: order
    nilable: true
    type:
      structure: CraftingOrderInfo
C_CraftingOrders.GetCrafterBuckets:
  inputs: {}
  outputs:
  - name: buckets
    type:
      arrayof:
        structure: CraftingOrderBucketInfo
C_CraftingOrders.GetCrafterOrders:
  inputs: {}
  outputs:
  - name: orders
    type:
      arrayof:
        structure: CraftingOrderInfo
C_CraftingOrders.GetCraftingOrderTime:
  inputs: {}
  outputs:
  - name: time
    type: number
C_CraftingOrders.GetCustomerCategories:
  inputs: {}
  outputs:
  - name: categories
    type:
      arrayof:
        structure: CraftingOrderCustomerCategory
C_CraftingOrders.GetCustomerOptions:
  inputs:
  - name: params
    type:
      structure: CraftingOrderCustomerSearchParams
  outputs:
  - name: results
    type:
      structure: CraftingOrderCustomerSearchResults
C_CraftingOrders.GetCustomerOrders:
  inputs: {}
  outputs:
  - name: customerOrders
    type:
      arrayof:
        structure: CraftingOrderInfo
C_CraftingOrders.GetDefaultOrdersSkillLine:
  inputs: {}
  outputs:
  - name: skillLineID
    nilable: true
    type: number
C_CraftingOrders.GetMyOrders:
  inputs: {}
  outputs:
  - name: myOrders
    type:
      arrayof:
        structure: CraftingOrderInfo
C_CraftingOrders.GetNumFavoriteCustomerOptions:
  inputs: {}
  outputs:
  - name: numFavorites
    type: number
C_CraftingOrders.GetOrderClaimInfo:
  inputs:
  - name: profession
    type:
      enum: Profession
  outputs:
  - name: claimInfo
    type:
      structure: CraftingOrderClaimsRemainingInfo
C_CraftingOrders.GetPersonalOrdersInfo:
  inputs: {}
  outputs:
  - name: infos
    type:
      arrayof:
        structure: CraftingOrderPersonalOrdersInfo
C_CraftingOrders.HasFavoriteCustomerOptions:
  inputs: {}
  outputs:
  - name: hasFavorites
    type: boolean
C_CraftingOrders.IsCustomerOptionFavorited:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: favorited
    type: boolean
C_CraftingOrders.ListMyOrders:
  inputs:
  - name: request
    type:
      structure: C_CraftingOrders.CraftingOrderRequestMyOrdersInfo
  outputs: {}
C_CraftingOrders.OpenCrafterCraftingOrders:
  inputs: {}
  outputs: {}
C_CraftingOrders.OpenCustomerCraftingOrders:
  inputs: {}
  outputs: {}
C_CraftingOrders.OrderCanBeRecrafted:
  inputs:
  - name: orderID
    type: number
  outputs:
  - name: recraftable
    type: boolean
C_CraftingOrders.ParseCustomerOptions:
  inputs: {}
  outputs: {}
C_CraftingOrders.PlaceNewOrder:
  inputs:
  - name: orderInfo
    type:
      structure: NewCraftingOrderInfo
  outputs: {}
C_CraftingOrders.RejectOrder:
  inputs:
  - name: orderID
    type: number
  - name: crafterNote
    type: string
  - name: profession
    type:
      enum: Profession
  outputs: {}
C_CraftingOrders.ReleaseOrder:
  inputs:
  - name: orderID
    type: number
  - name: profession
    type:
      enum: Profession
  outputs: {}
C_CraftingOrders.RequestCrafterOrders:
  inputs:
  - name: request
    type:
      structure: C_CraftingOrders.CraftingOrderRequestInfo
  outputs: {}
C_CraftingOrders.RequestCustomerOrders:
  inputs:
  - name: request
    type:
      structure: C_CraftingOrders.CraftingOrderRequestInfo
  outputs: {}
C_CraftingOrders.SetCustomerOptionFavorited:
  inputs:
  - name: recipeID
    type: number
  - name: favorited
    type: boolean
  outputs: {}
C_CraftingOrders.ShouldShowCraftingOrderTab:
  inputs: {}
  outputs:
  - name: showTab
    type: boolean
C_CraftingOrders.SkillLineHasOrders:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: hasOrders
    type: boolean
C_CraftingOrders.UpdateIgnoreList:
  inputs: {}
  outputs: {}
C_CreatureInfo.GetClassInfo:
  impl: C_CreatureInfo.GetClassInfo
  inputs:
  - name: classID
    type: number
  outputs:
  - name: classInfo
    nilable: true
    type:
      structure: C_CreatureInfo.ClassInfo
C_CreatureInfo.GetFactionInfo:
  inputs:
  - name: raceID
    type: number
  outputs:
  - name: factionInfo
    nilable: true
    type:
      structure: C_CreatureInfo.FactionInfo
C_CreatureInfo.GetRaceInfo:
  inputs:
  - name: raceID
    type: number
  outputs:
  - name: raceInfo
    nilable: true
    type:
      structure: C_CreatureInfo.RaceInfo
C_CurrencyInfo.DoesWarModeBonusApply:
  inputs:
  - name: currencyID
    type: number
  outputs:
  - name: warModeApplies
    nilable: true
    type: boolean
  - name: limitOncePerTooltip
    nilable: true
    type: boolean
C_CurrencyInfo.ExpandCurrencyList:
  inputs:
  - name: index
    type: number
  - name: expand
    type: boolean
  outputs: {}
C_CurrencyInfo.GetAzeriteCurrencyID:
  inputs: {}
  outputs:
  - name: azeriteCurrencyID
    type: number
C_CurrencyInfo.GetBackpackCurrencyInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: info
    type:
      structure: C_CurrencyInfo.BackpackCurrencyInfo
C_CurrencyInfo.GetBasicCurrencyInfo:
  inputs:
  - name: currencyType
    type: number
  - name: quantity
    nilable: true
    type: number
  outputs:
  - name: info
    type:
      structure: C_CurrencyInfo.CurrencyDisplayInfo
C_CurrencyInfo.GetCurrencyContainerInfo:
  inputs:
  - name: currencyType
    type: number
  - name: quantity
    type: number
  outputs:
  - name: info
    type:
      structure: C_CurrencyInfo.CurrencyDisplayInfo
C_CurrencyInfo.GetCurrencyDescription:
  inputs:
  - name: type
    type: number
  outputs:
  - name: description
    type: string
C_CurrencyInfo.GetCurrencyIDFromLink:
  inputs:
  - name: currencyLink
    type: string
  outputs:
  - name: currencyID
    type: number
C_CurrencyInfo.GetCurrencyInfo:
  inputs:
  - name: type
    type: number
  outputs:
  - name: info
    type:
      structure: C_CurrencyInfo.CurrencyInfo
C_CurrencyInfo.GetCurrencyInfoFromLink:
  inputs:
  - name: link
    type: string
  outputs:
  - name: info
    type:
      structure: C_CurrencyInfo.CurrencyInfo
C_CurrencyInfo.GetCurrencyLink:
  inputs:
  - name: type
    type: number
  - name: amount
    nilable: true
    type: number
  outputs:
  - name: link
    type: string
C_CurrencyInfo.GetCurrencyListInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: info
    type:
      structure: C_CurrencyInfo.CurrencyInfo
C_CurrencyInfo.GetCurrencyListLink:
  inputs:
  - name: index
    type: number
  outputs:
  - name: link
    type: string
C_CurrencyInfo.GetCurrencyListSize:
  inputs: {}
  outputs:
  - name: currencyListSize
    type: number
C_CurrencyInfo.GetDragonIslesSuppliesCurrencyID:
  inputs: {}
  outputs:
  - name: dragonIslesSuppliesCurrencyID
    type: number
C_CurrencyInfo.GetFactionGrantedByCurrency:
  inputs:
  - name: currencyID
    type: number
  outputs:
  - name: factionID
    nilable: true
    type: number
C_CurrencyInfo.GetWarResourcesCurrencyID:
  inputs: {}
  outputs:
  - name: warResourceCurrencyID
    type: number
C_CurrencyInfo.IsCurrencyContainer:
  inputs:
  - name: currencyID
    type: number
  - name: quantity
    type: number
  outputs:
  - name: isCurrencyContainer
    type: boolean
C_CurrencyInfo.PickupCurrency:
  inputs:
  - name: type
    type: number
  outputs: {}
C_CurrencyInfo.SetCurrencyBackpack:
  inputs:
  - name: index
    type: number
  - name: backpack
    type: boolean
  outputs: {}
C_CurrencyInfo.SetCurrencyUnused:
  inputs:
  - name: index
    type: number
  - name: unused
    type: boolean
  outputs: {}
C_Cursor.GetCursorItem:
  inputs: {}
  outputs:
  - name: item
    type:
      structure: ItemLocation
C_CVar.GetCVar:
  impl: C_CVar.GetCVar
  inputs:
  - name: name
    type: string
  outputs:
  - name: value
    nilable: true
    type: string
C_CVar.GetCVarBitfield:
  inputs:
  - name: name
    type: string
  - name: index
    type: number
  outputs:
  - name: value
    nilable: true
    type: boolean
C_CVar.GetCVarBool:
  impl: C_CVar.GetCVarBool
  inputs:
  - name: name
    type: string
  outputs:
  - name: value
    nilable: true
    type: boolean
C_CVar.GetCVarDefault:
  impl: C_CVar.GetCVarDefault
  inputs:
  - name: name
    type: string
  outputs:
  - name: defaultValue
    nilable: true
    type: string
C_CVar.GetCVarInfo:
  inputs:
  - name: name
    type: string
  outputs:
  - name: value
    type: string
  - name: defaultValue
    type: string
  - name: isStoredServerAccount
    type: boolean
  - name: isStoredServerCharacter
    type: boolean
  - name: isLockedFromUser
    type: boolean
  - name: isSecure
    type: boolean
  - name: isReadOnly
    type: boolean
C_CVar.RegisterCVar:
  impl: C_CVar.RegisterCVar
  inputs:
  - name: name
    type: string
  - name: value
    nilable: true
    type: string
  outputs: {}
C_CVar.ResetTestCVars:
  inputs: {}
  outputs: {}
C_CVar.SetCVar:
  impl: C_CVar.SetCVar
  inputs:
  - name: name
    type: string
  - name: value
    nilable: true
    type: string
  outputs:
  - name: success
    type: boolean
C_CVar.SetCVarBitfield:
  inputs:
  - name: name
    type: string
  - name: index
    type: number
  - name: value
    type: boolean
  outputs:
  - name: success
    type: boolean
C_DateAndTime.AdjustTimeByDays:
  impl: C_DateAndTime.AdjustTimeByDays
  inputs:
  - name: date
    type:
      structure: CalendarTime
  - name: days
    type: number
  outputs:
  - name: newDate
    type:
      structure: CalendarTime
C_DateAndTime.AdjustTimeByMinutes:
  impl: C_DateAndTime.AdjustTimeByMinutes
  inputs:
  - name: date
    type:
      structure: CalendarTime
  - name: minutes
    type: number
  outputs:
  - name: newDate
    type:
      structure: CalendarTime
C_DateAndTime.AdjustTimeByMonths:
  inputs:
  - name: date
    type:
      structure: CalendarTime
  - name: months
    type: number
  outputs:
  - name: newDate
    type:
      structure: CalendarTime
C_DateAndTime.CompareCalendarTime:
  impl: C_DateAndTime.CompareCalendarTime
  inputs:
  - name: lhsCalendarTime
    type:
      structure: CalendarTime
  - name: rhsCalendarTime
    type:
      structure: CalendarTime
  outputs:
  - name: comparison
    type: number
C_DateAndTime.GetCalendarTimeFromEpoch:
  inputs:
  - name: epoch
    type: number
  outputs:
  - name: date
    type:
      structure: CalendarTime
C_DateAndTime.GetCurrentCalendarTime:
  inputs: {}
  outputs:
  - name: date
    type:
      structure: CalendarTime
C_DateAndTime.GetSecondsUntilDailyReset:
  inputs: {}
  outputs:
  - name: seconds
    type: number
C_DateAndTime.GetSecondsUntilWeeklyReset:
  inputs: {}
  outputs:
  - name: seconds
    type: number
C_DateAndTime.GetServerTimeLocal:
  inputs: {}
  outputs:
  - name: serverTimeLocal
    type: number
C_DeathInfo.GetCorpseMapPosition:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: position
    nilable: true
    type:
      structure: vector2
C_DeathInfo.GetDeathReleasePosition:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: position
    nilable: true
    type:
      structure: vector2
C_DeathInfo.GetGraveyardsForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: graveyards
    type:
      arrayof:
        structure: C_DeathInfo.GraveyardMapInfo
C_DeathInfo.GetSelfResurrectOptions:
  inputs: {}
  outputs:
  - name: options
    type:
      arrayof:
        structure: C_DeathInfo.SelfResurrectOption
C_DeathInfo.UseSelfResurrectOption:
  inputs:
  - name: optionType
    type:
      enum: SelfResurrectOptionType
  - name: id
    type: number
  outputs: {}
C_EditMode.ConvertLayoutInfoToString:
  inputs:
  - name: layoutInfo
    type:
      structure: C_EditMode.EditModeLayoutInfo
  outputs:
  - name: layoutInfoAsString
    type: string
C_EditMode.ConvertStringToLayoutInfo:
  inputs:
  - name: layoutInfoAsString
    type: string
  outputs:
  - name: layoutInfo
    type:
      structure: C_EditMode.EditModeLayoutInfo
C_EditMode.GetAccountSettings:
  inputs: {}
  outputs:
  - name: accountSettings
    type:
      arrayof:
        structure: C_EditMode.EditModeSettingInfo
C_EditMode.GetLayouts:
  inputs: {}
  outputs:
  - name: layoutInfo
    type:
      structure: C_EditMode.EditModeLayouts
C_EditMode.OnEditModeExit:
  inputs: {}
  outputs: {}
C_EditMode.OnLayoutAdded:
  inputs:
  - name: addedLayoutIndex
    type: number
  - name: activateNewLayout
    type: boolean
  - name: isLayoutImported
    type: boolean
  outputs: {}
C_EditMode.OnLayoutDeleted:
  inputs:
  - name: deletedLayoutIndex
    type: number
  outputs: {}
C_EditMode.SaveLayouts:
  inputs:
  - name: saveInfo
    type:
      structure: C_EditMode.EditModeLayouts
  outputs: {}
C_EditMode.SetAccountSetting:
  inputs:
  - name: setting
    type:
      enum: EditModeAccountSetting
  - name: value
    type: number
  outputs: {}
C_EditMode.SetActiveLayout:
  inputs:
  - name: activeLayout
    type: number
  outputs: {}
C_EncounterJournal.GetDungeonEntrancesForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: dungeonEntrances
    type:
      arrayof:
        structure: C_EncounterJournal.DungeonEntranceMapInfo
C_EncounterJournal.GetEncounterJournalLink:
  inputs:
  - name: linkType
    type:
      enum: JournalLinkTypes
  - name: ID
    type: number
  - name: displayText
    type: string
  - name: difficultyID
    type: number
  outputs:
  - name: link
    type: string
C_EncounterJournal.GetEncountersOnMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: encounters
    type:
      arrayof:
        structure: C_EncounterJournal.EncounterJournalMapEncounterInfo
C_EncounterJournal.GetInstanceForGameMap:
  inputs:
  - name: mapID
    type: number
  outputs:
  - name: journalInstanceID
    nilable: true
    type: number
C_EncounterJournal.GetLootInfo:
  inputs:
  - name: id
    type: number
  outputs:
  - name: itemInfo
    type:
      structure: C_EncounterJournal.EncounterJournalItemInfo
C_EncounterJournal.GetLootInfoByIndex:
  inputs:
  - name: index
    type: number
  - name: encounterIndex
    nilable: true
    type: number
  outputs:
  - name: itemInfo
    type:
      structure: C_EncounterJournal.EncounterJournalItemInfo
C_EncounterJournal.GetSectionIconFlags:
  inputs:
  - name: sectionID
    type: number
  outputs:
  - name: iconFlags
    nilable: true
    type:
      arrayof: number
C_EncounterJournal.GetSectionInfo:
  inputs:
  - name: sectionID
    type: number
  outputs:
  - name: info
    type:
      structure: C_EncounterJournal.EncounterJournalSectionInfo
C_EncounterJournal.GetSlotFilter:
  inputs: {}
  outputs:
  - name: filter
    type:
      enum: ItemSlotFilterType
C_EncounterJournal.InstanceHasLoot:
  inputs:
  - name: instanceID
    nilable: true
    type: number
  outputs:
  - name: hasLoot
    type: boolean
C_EncounterJournal.IsEncounterComplete:
  inputs:
  - name: journalEncounterID
    type: number
  outputs:
  - name: isEncounterComplete
    type: boolean
C_EncounterJournal.OnClose:
  inputs: {}
  outputs: {}
C_EncounterJournal.OnOpen:
  inputs: {}
  outputs: {}
C_EncounterJournal.ResetSlotFilter:
  inputs: {}
  outputs: {}
C_EncounterJournal.SetPreviewMythicPlusLevel:
  inputs:
  - name: level
    type: number
  outputs: {}
C_EncounterJournal.SetPreviewPvpTier:
  inputs:
  - name: tier
    type: number
  outputs: {}
C_EncounterJournal.SetSlotFilter:
  inputs:
  - name: filterSlot
    type:
      enum: ItemSlotFilterType
  outputs: {}
C_EncounterJournal.SetTab:
  inputs:
  - name: tabIdx
    type: number
  outputs: {}
C_EquipmentSet.AssignSpecToEquipmentSet:
  inputs:
  - name: equipmentSetID
    type: number
  - name: specIndex
    type: number
  outputs: {}
C_EquipmentSet.CanUseEquipmentSets:
  inputs: {}
  outputs:
  - name: canUseEquipmentSets
    type: boolean
C_EquipmentSet.ClearIgnoredSlotsForSave:
  inputs: {}
  outputs: {}
C_EquipmentSet.CreateEquipmentSet:
  inputs:
  - name: equipmentSetName
    type: string
  - name: icon
    nilable: true
    type: string
  outputs: {}
C_EquipmentSet.DeleteEquipmentSet:
  inputs:
  - name: equipmentSetID
    type: number
  outputs: {}
C_EquipmentSet.EquipmentSetContainsLockedItems:
  inputs:
  - name: equipmentSetID
    type: number
  outputs:
  - name: hasLockedItems
    type: boolean
C_EquipmentSet.GetEquipmentSetAssignedSpec:
  inputs:
  - name: equipmentSetID
    type: number
  outputs:
  - name: specIndex
    type: number
C_EquipmentSet.GetEquipmentSetForSpec:
  inputs:
  - name: specIndex
    type: number
  outputs:
  - name: equipmentSetID
    type: number
C_EquipmentSet.GetEquipmentSetID:
  inputs:
  - name: equipmentSetName
    type: string
  outputs:
  - name: equipmentSetID
    type: number
C_EquipmentSet.GetEquipmentSetIDs:
  inputs: {}
  outputs:
  - name: equipmentSetIDs
    type:
      arrayof: number
C_EquipmentSet.GetEquipmentSetInfo:
  inputs:
  - name: equipmentSetID
    type: number
  outputs:
  - name: name
    type: string
  - name: iconFileID
    type: number
  - name: setID
    type: number
  - name: isEquipped
    type: boolean
  - name: numItems
    type: number
  - name: numEquipped
    type: number
  - name: numInInventory
    type: number
  - name: numLost
    type: number
  - name: numIgnored
    type: number
C_EquipmentSet.GetIgnoredSlots:
  inputs:
  - name: equipmentSetID
    type: number
  outputs:
  - name: slotIgnored
    type:
      arrayof: boolean
C_EquipmentSet.GetItemIDs:
  inputs:
  - name: equipmentSetID
    type: number
  outputs:
  - name: itemIDs
    type:
      arrayof: number
C_EquipmentSet.GetItemLocations:
  inputs:
  - name: equipmentSetID
    type: number
  outputs:
  - name: locations
    type:
      arrayof: number
C_EquipmentSet.GetNumEquipmentSets:
  inputs: {}
  outputs:
  - name: numEquipmentSets
    type: number
C_EquipmentSet.IgnoreSlotForSave:
  inputs:
  - name: slot
    type: number
  outputs: {}
C_EquipmentSet.IsSlotIgnoredForSave:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: isSlotIgnored
    type: boolean
C_EquipmentSet.ModifyEquipmentSet:
  inputs:
  - name: equipmentSetID
    type: number
  - name: newName
    type: string
  - name: newIcon
    nilable: true
    type: string
  outputs: {}
C_EquipmentSet.PickupEquipmentSet:
  inputs:
  - name: equipmentSetID
    type: number
  outputs: {}
C_EquipmentSet.SaveEquipmentSet:
  inputs:
  - name: equipmentSetID
    type: number
  - name: icon
    nilable: true
    type: string
  outputs: {}
C_EquipmentSet.UnassignEquipmentSetSpec:
  inputs:
  - name: equipmentSetID
    type: number
  outputs: {}
C_EquipmentSet.UnignoreSlotForSave:
  inputs:
  - name: slot
    type: number
  outputs: {}
C_EquipmentSet.UseEquipmentSet:
  inputs:
  - name: equipmentSetID
    type: number
  outputs:
  - name: setWasEquipped
    type: boolean
C_EventToastManager.GetLevelUpDisplayToastsFromLevel:
  inputs:
  - name: level
    type: number
  outputs:
  - name: toastInfo
    type:
      arrayof:
        structure: C_EventToastManager.EventToastInfo
C_EventToastManager.GetNextToastToDisplay:
  inputs: {}
  outputs:
  - name: toastInfo
    type:
      structure: C_EventToastManager.EventToastInfo
C_EventToastManager.RemoveCurrentToast:
  inputs: {}
  outputs: {}
C_EventUtils.IsEventValid:
  impl: C_EventUtils.IsEventValid
  inputs:
  - name: eventName
    type: string
  outputs:
  - name: valid
    type: boolean
C_EventUtils.NotifySettingsLoaded:
  inputs: {}
  outputs: {}
C_ExpansionTrial.OnTrialLevelUpDialogClicked:
  inputs: {}
  outputs: {}
C_ExpansionTrial.OnTrialLevelUpDialogShown:
  inputs: {}
  outputs: {}
C_FogOfWar.GetFogOfWarForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: fogOfWarID
    nilable: true
    type: number
C_FogOfWar.GetFogOfWarInfo:
  inputs:
  - name: fogOfWarID
    type: number
  outputs:
  - name: fogOfWarInfo
    nilable: true
    type:
      structure: C_FogOfWar.FogOfWarInfo
C_FrameManager.GetFrameVisibilityState:
  inputs:
  - name: frameType
    type:
      enum: UIFrameType
  outputs:
  - name: shouldShow
    type: boolean
C_FriendList.AddFriend:
  inputs:
  - name: name
    type: string
  - name: notes
    nilable: true
    type: string
  outputs: {}
C_FriendList.AddIgnore:
  inputs:
  - name: name
    type: string
  outputs:
  - name: added
    type: boolean
C_FriendList.AddOrDelIgnore:
  inputs:
  - name: name
    type: string
  outputs: {}
C_FriendList.AddOrRemoveFriend:
  inputs:
  - name: name
    type: string
  - name: notes
    type: string
  outputs: {}
C_FriendList.DelIgnore:
  inputs:
  - name: name
    type: string
  outputs:
  - name: removed
    type: boolean
C_FriendList.DelIgnoreByIndex:
  inputs:
  - name: index
    type: number
  outputs: {}
C_FriendList.GetFriendInfo:
  inputs:
  - name: name
    type: string
  outputs:
  - name: info
    type:
      structure: C_FriendList.FriendInfo
C_FriendList.GetFriendInfoByIndex:
  inputs:
  - name: index
    type: number
  outputs:
  - name: info
    type:
      structure: C_FriendList.FriendInfo
C_FriendList.GetIgnoreName:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    nilable: true
    type: string
C_FriendList.GetNumFriends:
  inputs: {}
  outputs:
  - name: numFriends
    type: number
C_FriendList.GetNumIgnores:
  inputs: {}
  outputs:
  - name: numIgnores
    type: number
C_FriendList.GetNumOnlineFriends:
  inputs: {}
  outputs:
  - name: numOnline
    type: number
C_FriendList.GetNumWhoResults:
  inputs: {}
  outputs:
  - name: numWhos
    type: number
  - name: totalNumWhos
    type: number
C_FriendList.GetSelectedFriend:
  inputs: {}
  outputs:
  - name: index
    nilable: true
    type: number
C_FriendList.GetSelectedIgnore:
  inputs: {}
  outputs:
  - name: index
    nilable: true
    type: number
C_FriendList.GetWhoInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: info
    type:
      structure: C_FriendList.WhoInfo
C_FriendList.IsFriend:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: isFriend
    type: boolean
C_FriendList.IsIgnored:
  inputs:
  - name: token
    type: string
  outputs:
  - name: isIgnored
    type: boolean
C_FriendList.IsIgnoredByGuid:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: isIgnored
    type: boolean
C_FriendList.IsOnIgnoredList:
  inputs:
  - name: token
    type: string
  outputs:
  - name: isIgnored
    type: boolean
C_FriendList.RemoveFriend:
  inputs:
  - name: name
    type: string
  outputs:
  - name: removed
    type: boolean
C_FriendList.RemoveFriendByIndex:
  inputs:
  - name: index
    type: number
  outputs: {}
C_FriendList.SendWho:
  inputs:
  - name: filter
    type: string
  - name: origin
    nilable: true
    type: number
  outputs: {}
C_FriendList.SetFriendNotes:
  inputs:
  - name: name
    type: string
  - name: notes
    type: string
  outputs:
  - name: found
    type: boolean
C_FriendList.SetFriendNotesByIndex:
  inputs:
  - name: index
    type: number
  - name: notes
    type: string
  outputs: {}
C_FriendList.SetSelectedFriend:
  inputs:
  - name: index
    type: number
  outputs: {}
C_FriendList.SetSelectedIgnore:
  inputs:
  - name: index
    type: number
  outputs: {}
C_FriendList.SetWhoToUi:
  inputs:
  - name: whoToUi
    type: boolean
  outputs: {}
C_FriendList.ShowFriends:
  inputs: {}
  outputs: {}
C_FriendList.SortWho:
  inputs:
  - name: sorting
    type: string
  outputs: {}
C_FunctionContainers.CreateCallback: {}
C_GamePad.AddSDLMapping:
  inputs:
  - name: platform
    type:
      enum: ClientPlatformType
  - name: mapping
    type: string
  outputs:
  - name: success
    type: boolean
C_GamePad.ApplyConfigs:
  inputs: {}
  outputs: {}
C_GamePad.AxisIndexToConfigName:
  inputs:
  - name: axisIndex
    type: number
  outputs:
  - name: configName
    nilable: true
    type: string
C_GamePad.ButtonBindingToIndex:
  inputs:
  - name: bindingName
    type: string
  outputs:
  - name: buttonIndex
    nilable: true
    type: number
C_GamePad.ButtonIndexToBinding:
  inputs:
  - name: buttonIndex
    type: number
  outputs:
  - name: bindingName
    nilable: true
    type: string
C_GamePad.ButtonIndexToConfigName:
  inputs:
  - name: buttonIndex
    type: number
  outputs:
  - name: configName
    nilable: true
    type: string
C_GamePad.ClearLedColor:
  inputs: {}
  outputs: {}
C_GamePad.DeleteConfig:
  inputs:
  - name: configID
    type:
      structure: C_GamePad.GamePadConfigID
  outputs: {}
C_GamePad.GetActiveDeviceID:
  inputs: {}
  outputs:
  - name: deviceID
    type: number
C_GamePad.GetAllConfigIDs:
  inputs: {}
  outputs:
  - name: configIDs
    type:
      arrayof:
        structure: C_GamePad.GamePadConfigID
C_GamePad.GetAllDeviceIDs:
  inputs: {}
  outputs:
  - name: deviceIDs
    type:
      arrayof: number
C_GamePad.GetCombinedDeviceID:
  inputs: {}
  outputs:
  - name: deviceID
    type: number
C_GamePad.GetConfig:
  inputs:
  - name: configID
    type:
      structure: C_GamePad.GamePadConfigID
  outputs:
  - name: config
    nilable: true
    type:
      structure: C_GamePad.GamePadConfig
C_GamePad.GetDeviceMappedState:
  inputs:
  - name: deviceID
    nilable: true
    type: number
  outputs:
  - name: state
    nilable: true
    type:
      structure: C_GamePad.GamePadMappedState
C_GamePad.GetDeviceRawState:
  inputs:
  - name: deviceID
    type: number
  outputs:
  - name: rawState
    nilable: true
    type:
      structure: C_GamePad.GamePadRawState
C_GamePad.GetLedColor:
  inputs: {}
  outputs:
  - name: color
    type:
      structure: colorRGB
C_GamePad.GetPowerLevel:
  inputs:
  - name: deviceID
    nilable: true
    type: number
  outputs:
  - name: powerLevel
    type:
      enum: GamePadPowerLevel
C_GamePad.IsEnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_GamePad.SetConfig:
  inputs:
  - name: config
    type:
      structure: C_GamePad.GamePadConfig
  outputs: {}
C_GamePad.SetLedColor:
  inputs:
  - name: color
    type:
      structure: colorRGB
  outputs: {}
C_GamePad.SetVibration:
  inputs:
  - name: vibrationType
    type: string
  - name: intensity
    type: number
  outputs: {}
C_GamePad.StickIndexToConfigName:
  inputs:
  - name: stickIndex
    type: number
  outputs:
  - name: configName
    nilable: true
    type: string
C_GamePad.StopVibration:
  inputs: {}
  outputs: {}
C_Garrison.AddFollowerToMission:
  inputs:
  - name: missionID
    type: number
  - name: followerID
    type: string
  - name: boardIndex
    nilable: true
    type: number
  outputs:
  - name: followerAdded
    type: boolean
C_Garrison.AllowMissionStartAboveSoftCap: {}
C_Garrison.AreMissionFollowerRequirementsMet: {}
C_Garrison.AssignFollowerToBuilding: {}
C_Garrison.CancelConstruction: {}
C_Garrison.CanGenerateRecruits: {}
C_Garrison.CanOpenMissionChest: {}
C_Garrison.CanSetRecruitmentPreference: {}
C_Garrison.CanSpellTargetFollowerIDWithAddAbility: {}
C_Garrison.CanUpgradeGarrison: {}
C_Garrison.CastItemSpellOnFollowerAbility: {}
C_Garrison.CastSpellOnFollower: {}
C_Garrison.CastSpellOnFollowerAbility: {}
C_Garrison.CastSpellOnMission: {}
C_Garrison.ClearCompleteTalent: {}
C_Garrison.CloseArchitect: {}
C_Garrison.CloseGarrisonTradeskillNPC:
  inputs: {}
  outputs: {}
C_Garrison.CloseMissionNPC: {}
C_Garrison.CloseRecruitmentNPC: {}
C_Garrison.CloseTalentNPC: {}
C_Garrison.CloseTradeskillCrafter: {}
C_Garrison.GenerateRecruits: {}
C_Garrison.GetAllBonusAbilityEffects: {}
C_Garrison.GetAllEncounterThreats:
  outputs:
  - type: table
C_Garrison.GetAutoCombatDamageClassValues:
  inputs: {}
  outputs:
  - name: damageClassStrings
    type:
      arrayof:
        structure: C_Garrison.AutoCombatDamageClassString
C_Garrison.GetAutoMissionBoardState:
  inputs:
  - name: missionID
    type: number
  outputs:
  - name: targetInfo
    type:
      arrayof:
        structure: C_Garrison.AutoMissionTargetingInfo
C_Garrison.GetAutoMissionEnvironmentEffect:
  inputs:
  - name: missionID
    type: number
  outputs:
  - name: autoMissionEnvEffect
    nilable: true
    type:
      structure: C_Garrison.AutoMissionEnvironmentEffect
C_Garrison.GetAutoMissionTargetingInfo:
  inputs:
  - name: missionID
    type: number
  - name: followerID
    type: string
  - name: casterBoardIndex
    type: number
  outputs:
  - name: targetInfo
    type:
      arrayof:
        structure: C_Garrison.AutoMissionTargetingInfo
C_Garrison.GetAutoMissionTargetingInfoForSpell:
  inputs:
  - name: missionID
    type: number
  - name: autoCombatSpellID
    type: number
  - name: casterBoardIndex
    type: number
  outputs:
  - name: targetInfo
    type:
      arrayof:
        structure: C_Garrison.AutoMissionTargetingInfo
C_Garrison.GetAutoTroops:
  inputs:
  - name: followerType
    type: number
  outputs:
  - name: autoTroopInfo
    type:
      arrayof:
        structure: C_Garrison.AutoCombatTroopInfo
C_Garrison.GetAvailableMissions: {}
C_Garrison.GetAvailableRecruits:
  inputs: {}
  outputs:
  - name: followers
    type: table
C_Garrison.GetBasicMissionInfo: {}
C_Garrison.GetBuffedFollowersForMission: {}
C_Garrison.GetBuildingInfo: {}
C_Garrison.GetBuildingLockInfo: {}
C_Garrison.GetBuildings: {}
C_Garrison.GetBuildingsForPlot: {}
C_Garrison.GetBuildingsForSize: {}
C_Garrison.GetBuildingSizes:
  outputs:
  - type: table
C_Garrison.GetBuildingSpecInfo: {}
C_Garrison.GetBuildingTimeRemaining: {}
C_Garrison.GetBuildingTooltip: {}
C_Garrison.GetBuildingUpgradeInfo: {}
C_Garrison.GetClassSpecCategoryInfo: {}
C_Garrison.GetCombatAllyMission: {}
C_Garrison.GetCombatLogSpellInfo:
  inputs:
  - name: autoCombatSpellID
    type: number
  outputs:
  - name: spellInfo
    nilable: true
    type:
      structure: C_Garrison.AutoCombatSpellInfo
C_Garrison.GetCompleteMissions: {}
C_Garrison.GetCompleteTalent: {}
C_Garrison.GetCurrencyTypes:
  inputs:
  - name: garrisonType
    type: number
  outputs:
  - name: primaryCurrency
    type: number
  - name: secondaryCurrency
    type: number
C_Garrison.GetCurrentCypherEquipmentLevel:
  inputs: {}
  outputs:
  - name: equipmentLevel
    type: number
C_Garrison.GetCurrentGarrTalentTreeFriendshipFactionID:
  inputs: {}
  outputs:
  - name: currentGarrTalentTreeFriendshipFactionID
    nilable: true
    type: number
C_Garrison.GetCurrentGarrTalentTreeID:
  inputs: {}
  outputs:
  - name: currentGarrTalentTreeID
    nilable: true
    type: number
C_Garrison.GetCyphersToNextEquipmentLevel:
  inputs: {}
  outputs:
  - name: cyphersToNext
    nilable: true
    type: number
C_Garrison.GetFollowerAbilities: {}
C_Garrison.GetFollowerAbilityAtIndex: {}
C_Garrison.GetFollowerAbilityAtIndexByID: {}
C_Garrison.GetFollowerAbilityCounterMechanicInfo: {}
C_Garrison.GetFollowerAbilityCountersForMechanicTypes: {}
C_Garrison.GetFollowerAbilityDescription: {}
C_Garrison.GetFollowerAbilityIcon: {}
C_Garrison.GetFollowerAbilityInfo: {}
C_Garrison.GetFollowerAbilityIsTrait: {}
C_Garrison.GetFollowerAbilityLink: {}
C_Garrison.GetFollowerAbilityName: {}
C_Garrison.GetFollowerActivationCost: {}
C_Garrison.GetFollowerAutoCombatSpells:
  inputs:
  - name: garrFollowerID
    type: string
  - name: followerLevel
    type: number
  outputs:
  - name: autoCombatSpells
    type:
      arrayof:
        structure: C_Garrison.AutoCombatSpellInfo
  - name: autoCombatAutoAttack
    nilable: true
    type:
      structure: C_Garrison.AutoCombatSpellInfo
C_Garrison.GetFollowerAutoCombatStats:
  inputs:
  - name: garrFollowerID
    type: string
  outputs:
  - name: autoCombatInfo
    nilable: true
    type:
      structure: C_Garrison.FollowerAutoCombatStatsInfo
C_Garrison.GetFollowerBiasForMission: {}
C_Garrison.GetFollowerClassSpec: {}
C_Garrison.GetFollowerClassSpecAtlas: {}
C_Garrison.GetFollowerClassSpecByID: {}
C_Garrison.GetFollowerClassSpecName: {}
C_Garrison.GetFollowerDisplayID: {}
C_Garrison.GetFollowerInfo: {}
C_Garrison.GetFollowerInfoForBuilding: {}
C_Garrison.GetFollowerIsTroop: {}
C_Garrison.GetFollowerItemLevelAverage: {}
C_Garrison.GetFollowerItems: {}
C_Garrison.GetFollowerLevel: {}
C_Garrison.GetFollowerLevelXP: {}
C_Garrison.GetFollowerLink: {}
C_Garrison.GetFollowerLinkByID: {}
C_Garrison.GetFollowerMissionCompleteInfo:
  inputs:
  - name: followerID
    type: string
  outputs:
  - name: followerMissionCompleteInfo
    type:
      structure: C_Garrison.FollowerMissionCompleteInfo
C_Garrison.GetFollowerMissionTimeLeft: {}
C_Garrison.GetFollowerMissionTimeLeftSeconds: {}
C_Garrison.GetFollowerModelItems: {}
C_Garrison.GetFollowerName: {}
C_Garrison.GetFollowerNameByID: {}
C_Garrison.GetFollowerPortraitIconID: {}
C_Garrison.GetFollowerPortraitIconIDByID: {}
C_Garrison.GetFollowerQuality: {}
C_Garrison.GetFollowerQualityTable: {}
C_Garrison.GetFollowerRecentlyGainedAbilityIDs: {}
C_Garrison.GetFollowerRecentlyGainedTraitIDs: {}
C_Garrison.GetFollowers:
  outputs:
  - type: table
C_Garrison.GetFollowerShipments: {}
C_Garrison.GetFollowerSoftCap:
  outputs:
  - type: number
C_Garrison.GetFollowerSourceTextByID: {}
C_Garrison.GetFollowerSpecializationAtIndex: {}
C_Garrison.GetFollowersSpellsForMission: {}
C_Garrison.GetFollowerStatus: {}
C_Garrison.GetFollowersTraitsForMission: {}
C_Garrison.GetFollowerTraitAtIndex: {}
C_Garrison.GetFollowerTraitAtIndexByID: {}
C_Garrison.GetFollowerTypeByID: {}
C_Garrison.GetFollowerTypeByMissionID: {}
C_Garrison.GetFollowerUnderBiasReason: {}
C_Garrison.GetFollowerXP: {}
C_Garrison.GetFollowerXPTable:
  outputs:
  - type: table
C_Garrison.GetFollowerZoneSupportAbilities: {}
C_Garrison.GetGarrisonInfo: {}
C_Garrison.GetGarrisonPlotsInstancesForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: garrisonPlotInstances
    type:
      arrayof:
        structure: C_Garrison.GarrisonPlotInstanceMapInfo
C_Garrison.GetGarrisonTalentTreeCurrencyTypes:
  inputs:
  - name: garrTalentTreeID
    type: number
  outputs:
  - name: garrTalentTreeCurrencyType
    nilable: true
    type: number
C_Garrison.GetGarrisonTalentTreeType:
  inputs:
  - name: garrTalentTreeID
    type: number
  outputs:
  - name: garrTalentTreeType
    type: number
C_Garrison.GetGarrisonUpgradeCost: {}
C_Garrison.GetInProgressMissions:
  outputs:
  - type: number
C_Garrison.GetLandingPageGarrisonType:
  inputs: {}
  outputs:
  - type: number
C_Garrison.GetLandingPageItems: {}
C_Garrison.GetLandingPageShipmentCount: {}
C_Garrison.GetLandingPageShipmentInfo: {}
C_Garrison.GetLandingPageShipmentInfoByContainerID: {}
C_Garrison.GetLooseShipments: {}
C_Garrison.GetMaxCypherEquipmentLevel:
  inputs: {}
  outputs:
  - name: maxEquipmentLevel
    type: number
C_Garrison.GetMissionBonusAbilityEffects: {}
C_Garrison.GetMissionCompleteEncounters:
  inputs:
  - name: missionID
    type: number
  outputs:
  - name: encounters
    type:
      arrayof:
        structure: C_Garrison.GarrisonEnemyEncounterInfo
C_Garrison.GetMissionCost: {}
C_Garrison.GetMissionDeploymentInfo:
  inputs:
  - name: missionID
    type: number
  outputs:
  - name: missionDeploymentInfo
    type:
      structure: C_Garrison.MissionDeploymentInfo
C_Garrison.GetMissionDisplayIDs: {}
C_Garrison.GetMissionEncounterIconInfo:
  inputs:
  - name: missionID
    type: number
  outputs:
  - name: missionEncounterIconInfo
    type:
      structure: C_Garrison.MissionEncounterIconInfo
C_Garrison.GetMissionLink: {}
C_Garrison.GetMissionMaxFollowers: {}
C_Garrison.GetMissionName: {}
C_Garrison.GetMissionRewardInfo: {}
C_Garrison.GetMissionSuccessChance: {}
C_Garrison.GetMissionTexture: {}
C_Garrison.GetMissionTimes: {}
C_Garrison.GetMissionUncounteredMechanics: {}
C_Garrison.GetNumActiveFollowers: {}
C_Garrison.GetNumFollowerActivationsRemaining: {}
C_Garrison.GetNumFollowerDailyActivations: {}
C_Garrison.GetNumFollowers:
  outputs:
  - type: number
C_Garrison.GetNumFollowersForMechanic: {}
C_Garrison.GetNumFollowersOnMission: {}
C_Garrison.GetNumPendingShipments: {}
C_Garrison.GetNumShipmentCurrencies: {}
C_Garrison.GetNumShipmentReagents: {}
C_Garrison.GetOwnedBuildingInfo: {}
C_Garrison.GetOwnedBuildingInfoAbbrev: {}
C_Garrison.GetPartyBuffs: {}
C_Garrison.GetPartyMentorLevels: {}
C_Garrison.GetPartyMissionInfo: {}
C_Garrison.GetPendingShipmentInfo: {}
C_Garrison.GetPlots: {}
C_Garrison.GetPlotsForBuilding: {}
C_Garrison.GetPossibleFollowersForBuilding: {}
C_Garrison.GetRecruitAbilities: {}
C_Garrison.GetRecruiterAbilityCategories:
  outputs:
  - type: table
C_Garrison.GetRecruiterAbilityList: {}
C_Garrison.GetRecruitmentPreferences:
  inputs: {}
  outputs:
  - name: ability
    type: number
  - name: name
    type: string
  - name: desc
    type: string
  - name: icon
    type: number
  - name: id
    type: number
C_Garrison.GetShipDeathAnimInfo: {}
C_Garrison.GetShipmentContainerInfo: {}
C_Garrison.GetShipmentItemInfo: {}
C_Garrison.GetShipmentReagentCurrencyInfo: {}
C_Garrison.GetShipmentReagentInfo: {}
C_Garrison.GetShipmentReagentItemLink: {}
C_Garrison.GetSpecChangeCost: {}
C_Garrison.GetTabForPlot: {}
C_Garrison.GetTalentInfo:
  inputs:
  - name: talentID
    type: number
  outputs:
  - name: info
    type:
      structure: GarrisonTalentInfo
C_Garrison.GetTalentPointsSpentInTalentTree:
  inputs:
  - name: garrTalentTreeID
    type: number
  outputs:
  - name: talentPoints
    type: number
C_Garrison.GetTalentTreeIDsByClassID:
  inputs:
  - name: garrType
    type: number
  - name: classID
    type: number
  outputs:
  - name: treeIDs
    type:
      arrayof: number
C_Garrison.GetTalentTreeInfo:
  inputs:
  - name: treeID
    type: number
  outputs:
  - name: info
    type:
      structure: GarrisonTalentTreeInfo
C_Garrison.GetTalentTreeResetInfo:
  inputs:
  - name: garrTalentTreeID
    type: number
  outputs:
  - name: goldCost
    type: number
  - name: currencyCosts
    type:
      arrayof:
        structure: GarrisonTalentCurrencyCostInfo
C_Garrison.GetTalentTreeTalentPointResearchInfo:
  inputs:
  - name: garrTalentID
    type: number
  - name: researchRank
    type: number
  - name: garrTalentTreeID
    type: number
  - name: talentPointIndex
    type: number
  - name: isRespec
    type: number
  outputs:
  - name: goldCost
    type: number
  - name: currencyCosts
    type:
      arrayof:
        structure: GarrisonTalentCurrencyCostInfo
  - name: durationSecs
    type: number
C_Garrison.GetTalentUnlockWorldQuest:
  inputs:
  - name: talentID
    type: number
  outputs:
  - name: worldQuestID
    type: number
C_Garrison.HasAdventures:
  inputs: {}
  outputs:
  - name: hasAdventures
    type: boolean
C_Garrison.HasGarrison: {}
C_Garrison.HasShipyard: {}
C_Garrison.IsAboveFollowerSoftCap: {}
C_Garrison.IsAtGarrisonMissionNPC:
  inputs: {}
  outputs:
  - name: atGarrisonMissionNPC
    type: boolean
C_Garrison.IsEnvironmentCountered:
  inputs:
  - name: missionID
    type: number
  outputs:
  - name: environmentCountered
    type: boolean
C_Garrison.IsFollowerCollected: {}
C_Garrison.IsFollowerOnCompletedMission:
  inputs:
  - name: followerID
    type: string
  outputs:
  - name: followerOnCompletedMission
    type: boolean
C_Garrison.IsInvasionAvailable: {}
C_Garrison.IsMechanicFullyCountered: {}
C_Garrison.IsOnGarrisonMap: {}
C_Garrison.IsOnShipmentQuestForNPC: {}
C_Garrison.IsOnShipyardMap: {}
C_Garrison.IsPlayerInGarrison: {}
C_Garrison.IsTalentConditionMet:
  inputs:
  - name: talentID
    type: number
  outputs:
  - name: isMet
    type: boolean
  - name: failureString
    nilable: true
    type: string
C_Garrison.IsUsingPartyGarrison: {}
C_Garrison.IsVisitGarrisonAvailable: {}
C_Garrison.MarkMissionComplete: {}
C_Garrison.MissionBonusRoll: {}
C_Garrison.PlaceBuilding: {}
C_Garrison.RecruitFollower: {}
C_Garrison.RegenerateCombatLog:
  inputs:
  - name: missionID
    type: number
  outputs:
  - name: success
    type: boolean
C_Garrison.RemoveFollower: {}
C_Garrison.RemoveFollowerFromBuilding: {}
C_Garrison.RemoveFollowerFromMission:
  inputs:
  - name: missionID
    type: number
  - name: followerID
    type: string
  - name: boardIndex
    nilable: true
    type: number
  outputs: {}
C_Garrison.RenameFollower: {}
C_Garrison.RequestClassSpecCategoryInfo: {}
C_Garrison.RequestGarrisonUpgradeable: {}
C_Garrison.RequestLandingPageShipmentInfo: {}
C_Garrison.RequestShipmentCreation: {}
C_Garrison.RequestShipmentInfo: {}
C_Garrison.ResearchTalent: {}
C_Garrison.RushHealAllFollowers:
  inputs:
  - name: followerType
    type: number
  outputs: {}
C_Garrison.RushHealFollower:
  inputs:
  - name: garrFollowerID
    type: string
  outputs: {}
C_Garrison.SearchForFollower: {}
C_Garrison.SetAutoCombatSpellFastForward:
  inputs:
  - name: state
    type: boolean
  outputs: {}
C_Garrison.SetBuildingActive: {}
C_Garrison.SetBuildingSpecialization: {}
C_Garrison.SetFollowerFavorite: {}
C_Garrison.SetFollowerInactive: {}
C_Garrison.SetRecruitmentPreferences: {}
C_Garrison.SetUsingPartyGarrison: {}
C_Garrison.ShouldShowMapTab: {}
C_Garrison.ShowFollowerNameInErrorMessage: {}
C_Garrison.StartMission: {}
C_Garrison.SwapBuildings: {}
C_Garrison.TargetSpellHasFollowerItemLevelUpgrade: {}
C_Garrison.TargetSpellHasFollowerReroll: {}
C_Garrison.TargetSpellHasFollowerTemporaryAbility: {}
C_Garrison.UpgradeBuilding: {}
C_Garrison.UpgradeGarrison: {}
C_GenericWidgetDisplay.Acknowledge:
  inputs: {}
  outputs: {}
C_GenericWidgetDisplay.Close:
  inputs: {}
  outputs: {}
C_GossipInfo.CloseGossip:
  inputs: {}
  outputs: {}
C_GossipInfo.ForceGossip:
  inputs: {}
  outputs:
  - name: forceGossip
    type: boolean
C_GossipInfo.GetActiveQuests:
  inputs: {}
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_GossipInfo.GossipQuestUIInfo
C_GossipInfo.GetAvailableQuests:
  inputs: {}
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_GossipInfo.GossipQuestUIInfo
C_GossipInfo.GetCompletedOptionDescriptionString:
  inputs: {}
  outputs:
  - name: description
    nilable: true
    type: string
C_GossipInfo.GetCustomGossipDescriptionString:
  inputs: {}
  outputs:
  - name: description
    nilable: true
    type: string
C_GossipInfo.GetFriendshipReputation:
  inputs:
  - name: friendshipFactionID
    type: number
  outputs:
  - name: reputationInfo
    type:
      structure: C_GossipInfo.FriendshipReputationInfo
C_GossipInfo.GetFriendshipReputationRanks:
  inputs:
  - name: friendshipFactionID
    type: number
  outputs:
  - name: rankInfo
    type:
      structure: C_GossipInfo.FriendshipReputationRankInfo
C_GossipInfo.GetNumActiveQuests:
  inputs: {}
  outputs:
  - name: numQuests
    type: number
C_GossipInfo.GetNumAvailableQuests:
  inputs: {}
  outputs:
  - name: numQuests
    type: number
C_GossipInfo.GetOptions:
  inputs: {}
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_GossipInfo.GossipOptionUIInfo
C_GossipInfo.GetPoiForUiMapID:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: gossipPoiID
    nilable: true
    type: number
C_GossipInfo.GetPoiInfo:
  inputs:
  - name: uiMapID
    type: number
  - name: gossipPoiID
    type: number
  outputs:
  - name: gossipPoiInfo
    nilable: true
    type:
      structure: C_GossipInfo.GossipPoiInfo
C_GossipInfo.GetText:
  inputs: {}
  outputs:
  - name: gossipText
    type: string
C_GossipInfo.RefreshOptions:
  inputs: {}
  outputs: {}
C_GossipInfo.SelectActiveQuest:
  inputs:
  - name: optionID
    type: number
  outputs: {}
C_GossipInfo.SelectAvailableQuest:
  inputs:
  - name: optionID
    type: number
  outputs: {}
C_GossipInfo.SelectOption:
  inputs:
  - name: optionID
    type: number
  - name: text
    nilable: true
    type: string
  - name: confirmed
    nilable: true
    type: boolean
  outputs: {}
C_GossipInfo.SelectOptionByIndex:
  inputs:
  - name: optionID
    type: number
  - name: text
    nilable: true
    type: string
  - name: confirmed
    nilable: true
    type: boolean
  outputs: {}
C_GuildInfo.CanEditOfficerNote:
  inputs: {}
  outputs:
  - name: canEditOfficerNote
    type: boolean
C_GuildInfo.CanSpeakInGuildChat:
  inputs: {}
  outputs:
  - name: canSpeakInGuildChat
    type: boolean
C_GuildInfo.CanViewOfficerNote:
  inputs: {}
  outputs:
  - name: canViewOfficerNote
    type: boolean
C_GuildInfo.GetGuildNewsInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: newsInfo
    type:
      structure: C_GuildInfo.GuildNewsInfo
C_GuildInfo.GetGuildRankOrder:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: rankOrder
    type: number
C_GuildInfo.GetGuildTabardInfo:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: tabardInfo
    nilable: true
    type:
      structure: GuildTabardInfo
C_GuildInfo.GuildControlGetRankFlags:
  inputs:
  - name: rankOrder
    type: number
  outputs:
  - name: permissions
    stub:
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    - false
    type:
      arrayof: boolean
C_GuildInfo.GuildRoster:
  inputs: {}
  outputs: {}
C_GuildInfo.IsGuildOfficer:
  inputs: {}
  outputs:
  - name: isOfficer
    type: boolean
C_GuildInfo.IsGuildRankAssignmentAllowed:
  inputs:
  - name: guid
    type: string
  - name: rankOrder
    type: number
  outputs:
  - name: isGuildRankAssignmentAllowed
    type: boolean
C_GuildInfo.MemberExistsByName:
  inputs:
  - name: name
    type: string
  outputs:
  - name: exists
    type: boolean
C_GuildInfo.QueryGuildMemberRecipes:
  inputs:
  - name: guildMemberGUID
    type: string
  - name: skillLineID
    type: number
  outputs: {}
C_GuildInfo.QueryGuildMembersForRecipe:
  inputs:
  - name: skillLineID
    type: number
  - name: recipeSpellID
    type: number
  - name: recipeLevel
    nilable: true
    type: number
  outputs:
  - name: updatedRecipeSpellID
    type: number
C_GuildInfo.RemoveFromGuild:
  inputs:
  - name: guid
    type: string
  outputs: {}
C_GuildInfo.SetGuildRankOrder:
  inputs:
  - name: guid
    type: string
  - name: rankOrder
    type: number
  outputs: {}
C_GuildInfo.SetNote:
  inputs:
  - name: guid
    type: string
  - name: note
    type: string
  - name: isPublic
    type: boolean
  outputs: {}
C_Heirloom.CanHeirloomUpgradeFromPending: {}
C_Heirloom.CreateHeirloom: {}
C_Heirloom.GetClassAndSpecFilters:
  inputs: {}
  outputs:
  - name: classFilter
    type: number
  - name: specFilter
    stub: 0
    type: number
C_Heirloom.GetCollectedHeirloomFilter: {}
C_Heirloom.GetHeirloomInfo:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: name
    type: string
  - name: itemEquipLoc
    type: number
  - name: isPvP
    type: boolean
  - name: itemTexture
    type: number
  - name: upgradeLevel
    type: number
  - name: source
    type: string
  - name: searchFiltered
    type: boolean
  - name: effectiveLevel
    type: number
  - name: minLevel
    type: number
  - name: maxLevel
    type: number
C_Heirloom.GetHeirloomItemIDFromDisplayedIndex:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemID
    type: number
C_Heirloom.GetHeirloomItemIDs: {}
C_Heirloom.GetHeirloomLink: {}
C_Heirloom.GetHeirloomMaxUpgradeLevel:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: upgradeLevel
    type: number
C_Heirloom.GetHeirloomSourceFilter: {}
C_Heirloom.GetNumDisplayedHeirlooms:
  inputs: {}
  outputs:
  - name: value
    type: number
C_Heirloom.GetNumHeirlooms: {}
C_Heirloom.GetNumKnownHeirlooms: {}
C_Heirloom.GetUncollectedHeirloomFilter: {}
C_Heirloom.IsItemHeirloom: {}
C_Heirloom.IsPendingHeirloomUpgrade: {}
C_Heirloom.PlayerHasHeirloom: {}
C_Heirloom.SetClassAndSpecFilters:
  inputs:
  - name: classID
    type: number
  - name: specID
    type: number
  outputs: {}
C_Heirloom.SetCollectedHeirloomFilter: {}
C_Heirloom.SetHeirloomSourceFilter: {}
C_Heirloom.SetSearch: {}
C_Heirloom.SetUncollectedHeirloomFilter: {}
C_Heirloom.ShouldShowHeirloomHelp: {}
C_Heirloom.UpgradeHeirloom: {}
C_HeirloomInfo.AreAllCollectionFiltersChecked:
  inputs: {}
  outputs:
  - name: areAllCollectionFiltersChecked
    type: boolean
C_HeirloomInfo.AreAllSourceFiltersChecked:
  inputs: {}
  outputs:
  - name: areAllSourceFiltersChecked
    type: boolean
C_HeirloomInfo.IsHeirloomSourceValid:
  inputs:
  - name: source
    type: number
  outputs:
  - name: isHeirloomSourceValid
    type: boolean
C_HeirloomInfo.IsUsingDefaultFilters:
  inputs: {}
  outputs:
  - name: isUsingDefaultFilters
    type: boolean
C_HeirloomInfo.SetAllCollectionFilters:
  inputs:
  - name: checked
    type: boolean
  outputs: {}
C_HeirloomInfo.SetAllSourceFilters:
  inputs:
  - name: checked
    type: boolean
  outputs: {}
C_HeirloomInfo.SetDefaultFilters:
  inputs: {}
  outputs: {}
C_IncomingSummon.HasIncomingSummon:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: summon
    type: boolean
C_IncomingSummon.IncomingSummonStatus:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: status
    type:
      enum: SummonStatus
C_InterfaceFileManifest.GetInterfaceArtFiles:
  inputs: {}
  outputs:
  - name: images
    type:
      arrayof: string
C_InvasionInfo.AreInvasionsAvailable:
  inputs: {}
  outputs:
  - name: areInvasionsAvailable
    type: boolean
C_InvasionInfo.GetInvasionForUiMapID:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: invasionID
    nilable: true
    type: number
C_InvasionInfo.GetInvasionInfo:
  inputs:
  - name: invasionID
    type: number
  outputs:
  - name: invasionInfo
    type:
      structure: C_InvasionInfo.InvasionMapInfo
C_InvasionInfo.GetInvasionTimeLeft:
  inputs:
  - name: invasionID
    type: number
  outputs:
  - name: timeLeftMinutes
    nilable: true
    type: number
C_IslandsQueue.CloseIslandsQueueScreen:
  inputs: {}
  outputs: {}
C_IslandsQueue.GetIslandDifficultyInfo:
  inputs: {}
  outputs:
  - name: islandDifficultyInfo
    type:
      arrayof:
        structure: C_IslandsQueue.IslandsQueueDifficultyInfo
C_IslandsQueue.GetIslandsMaxGroupSize:
  inputs: {}
  outputs:
  - name: maxGroupSize
    type: number
C_IslandsQueue.GetIslandsWeeklyQuestID:
  inputs: {}
  outputs:
  - name: questID
    nilable: true
    stub: 1
    type: number
C_IslandsQueue.QueueForIsland:
  inputs:
  - name: difficultyID
    type: number
  outputs: {}
C_IslandsQueue.RequestPreloadRewardData:
  inputs:
  - name: questId
    type: number
  outputs: {}
C_Item.CanItemTransmogAppearance:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: canTransmog
    type: boolean
  - name: errorCode
    type: number
C_Item.CanScrapItem:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: canBeScrapped
    type: boolean
C_Item.CanViewItemPowers:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: isItemViewable
    type: boolean
C_Item.DoesItemExist:
  inputs:
  - name: emptiableItemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: itemExists
    type: boolean
C_Item.DoesItemExistByID:
  impl: C_Item.DoesItemExistByID
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: itemExists
    type: boolean
C_Item.DoesItemMatchBonusTreeReplacement:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: matchesBonusTree
    type: boolean
C_Item.DoesItemMatchTrackJump:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: matchesTrackJump
    type: boolean
C_Item.GetAppliedItemTransmogInfo:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: info
    nilable: true
    type:
      structure: ItemTransmogInfo
C_Item.GetBaseItemTransmogInfo:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: info
    nilable: true
    type:
      structure: ItemTransmogInfo
C_Item.GetCurrentItemLevel:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: currentItemLevel
    nilable: true
    type: number
C_Item.GetCurrentItemTransmogInfo:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: info
    nilable: true
    type:
      structure: ItemTransmogInfo
C_Item.GetItemConversionOutputIcon:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: icon
    nilable: true
    type: number
C_Item.GetItemGUID:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: itemGUID
    type: string
C_Item.GetItemIcon:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: icon
    nilable: true
    type: number
C_Item.GetItemIconByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: icon
    nilable: true
    type: number
C_Item.GetItemID:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: itemID
    type: number
C_Item.GetItemIDByGUID:
  inputs:
  - name: itemGUID
    type: string
  outputs:
  - name: itemID
    nilable: true
    type: number
C_Item.GetItemIDForItemInfo:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: itemID
    type: number
C_Item.GetItemInventoryType:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: inventoryType
    nilable: true
    type:
      enum: InventoryType
C_Item.GetItemInventoryTypeByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: inventoryType
    nilable: true
    type:
      enum: InventoryType
C_Item.GetItemLink:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: itemLink
    nilable: true
    type: string
C_Item.GetItemLinkByGUID:
  inputs:
  - name: itemGUID
    type: string
  outputs:
  - name: itemLink
    nilable: true
    type: string
C_Item.GetItemLocation:
  inputs:
  - name: itemGUID
    type: string
  outputs:
  - name: itemLocation
    nilable: true
    type:
      structure: ItemLocation
C_Item.GetItemMaxStackSize:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: stackSize
    nilable: true
    type: number
C_Item.GetItemMaxStackSizeByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: stackSize
    nilable: true
    type: number
C_Item.GetItemName:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: itemName
    nilable: true
    type: string
C_Item.GetItemNameByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: itemName
    nilable: true
    type: string
C_Item.GetItemQuality:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: itemQuality
    nilable: true
    type:
      enum: ItemQuality
C_Item.GetItemQualityByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: itemQuality
    nilable: true
    type:
      enum: ItemQuality
C_Item.GetItemUniquenessByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: isUnique
    type: boolean
  - name: limitCategoryName
    nilable: true
    type: string
  - name: limitCategoryCount
    nilable: true
    type: number
  - name: limitCategoryID
    nilable: true
    type: number
C_Item.GetLimitedCurrencyItemInfo:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: quantity
    type: number
  - name: maxQuantity
    type: number
  - name: totalEarned
    type: number
C_Item.GetStackCount:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: stackCount
    type: number
C_Item.IsAnimaItemByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: isAnimaItem
    type: boolean
C_Item.IsBound:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: isBound
    type: boolean
C_Item.IsDressableItemByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: isDressableItem
    type: boolean
C_Item.IsItemConduit:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: isConduit
    type: boolean
C_Item.IsItemConvertibleAndValidForPlayer:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: isItemConvertibleAndValidForPlayer
    type: boolean
C_Item.IsItemCorrupted:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: isCorrupted
    type: boolean
C_Item.IsItemCorruptionRelated:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: isCorruptionRelated
    type: boolean
C_Item.IsItemCorruptionResistant:
  inputs:
  - name: itemLoc
    type:
      structure: ItemLocation
  outputs:
  - name: isCorruptionResistant
    type: boolean
C_Item.IsItemDataCached:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: isCached
    type: boolean
C_Item.IsItemDataCachedByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: isCached
    type: boolean
C_Item.IsItemGUIDInInventory:
  inputs:
  - name: itemGUID
    type: string
  outputs:
  - name: valid
    type: boolean
C_Item.IsItemKeystoneByID:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: isKeystone
    type: boolean
C_Item.IsItemSpecificToPlayerClass:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: isItemSpecificToPlayerClass
    type: boolean
C_Item.IsLocked:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: isLocked
    type: boolean
C_Item.LockItem:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs: {}
C_Item.LockItemByGUID:
  inputs:
  - name: itemGUID
    type: string
  outputs: {}
C_Item.RequestLoadItemData:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs: {}
C_Item.RequestLoadItemDataByID:
  inputs:
  - name: itemInfo
    type: string
  outputs: {}
C_Item.UnlockItem:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs: {}
C_Item.UnlockItemByGUID:
  inputs:
  - name: itemGUID
    type: string
  outputs: {}
C_ItemInteraction.ClearPendingItem:
  inputs: {}
  outputs: {}
C_ItemInteraction.CloseUI:
  inputs: {}
  outputs: {}
C_ItemInteraction.GetChargeInfo:
  inputs: {}
  outputs:
  - name: chargeInfo
    type:
      structure: C_ItemInteraction.ItemInteractionChargeInfo
C_ItemInteraction.GetItemConversionCurrencyCost:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  outputs:
  - name: conversionCost
    type:
      structure: C_ItemInteraction.ConversionCurrencyCost
C_ItemInteraction.GetItemInteractionInfo:
  impl: C_ItemInteraction.GetItemInteractionInfo
  inputs: {}
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_ItemInteraction.ItemInteractionFrameInfo
C_ItemInteraction.GetItemInteractionSpellId:
  inputs: {}
  outputs:
  - name: spellId
    type: number
C_ItemInteraction.InitializeFrame:
  inputs: {}
  outputs: {}
C_ItemInteraction.PerformItemInteraction:
  inputs: {}
  outputs: {}
C_ItemInteraction.Reset:
  inputs: {}
  outputs: {}
C_ItemInteraction.SetPendingItem:
  inputs:
  - name: item
    nilable: true
    type:
      structure: ItemLocation
  outputs:
  - name: success
    type: boolean
C_ItemSocketInfo.CompleteSocketing:
  inputs: {}
  outputs: {}
C_ItemUpgrade.CanUpgradeItem:
  inputs:
  - name: baseItem
    type:
      structure: ItemLocation
  outputs:
  - name: isValid
    type: boolean
C_ItemUpgrade.ClearItemUpgrade:
  inputs: {}
  outputs: {}
C_ItemUpgrade.CloseItemUpgrade:
  inputs: {}
  outputs: {}
C_ItemUpgrade.GetHighWatermarkForItem:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: characterHighWatermark
    type: number
  - name: accountHighWatermark
    type: number
C_ItemUpgrade.GetHighWatermarkForSlot:
  inputs:
  - name: itemRedundancySlot
    type: number
  outputs:
  - name: characterHighWatermark
    type: number
  - name: accountHighWatermark
    type: number
C_ItemUpgrade.GetHighWatermarkSlotForItem:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: itemRedundancySlot
    type: number
C_ItemUpgrade.GetItemHyperlink:
  inputs: {}
  outputs:
  - name: link
    type: string
C_ItemUpgrade.GetItemUpgradeCurrentLevel:
  inputs: {}
  outputs:
  - name: itemLevel
    type: number
  - name: isPvpItemLevel
    type: boolean
C_ItemUpgrade.GetItemUpgradeEffect:
  inputs:
  - name: effectIndex
    type: number
  - name: numUpgradeLevels
    nilable: true
    type: number
  outputs:
  - name: outBaseEffect
    type: string
  - name: outUpgradedEffect
    type: string
C_ItemUpgrade.GetItemUpgradeItemInfo:
  inputs: {}
  outputs:
  - name: itemInfo
    type:
      structure: C_ItemUpgrade.ItemUpgradeItemInfo
C_ItemUpgrade.GetItemUpgradePvpItemLevelDeltaValues:
  inputs:
  - name: numUpgradeLevels
    type: number
  outputs:
  - name: currentPvPItemLevel
    type: number
  - name: upgradedPvPItemLevel
    type: number
C_ItemUpgrade.GetNumItemUpgradeEffects:
  inputs: {}
  outputs:
  - name: numItemUpgradeEffects
    type: number
C_ItemUpgrade.IsItemBound:
  inputs: {}
  outputs:
  - name: isBound
    type: boolean
C_ItemUpgrade.SetItemUpgradeFromCursorItem:
  inputs: {}
  outputs: {}
C_ItemUpgrade.SetItemUpgradeFromLocation:
  inputs:
  - name: itemToSet
    type:
      structure: ItemLocation
  outputs: {}
C_ItemUpgrade.UpgradeItem:
  inputs:
  - default: 1
    name: numUpgrades
    type: number
  outputs: {}
C_KeyBindings.GetBindingIndex:
  inputs:
  - name: action
    type: string
  outputs:
  - name: bindingIndex
    nilable: true
    type: number
C_KeyBindings.GetCustomBindingType:
  inputs:
  - name: bindingIndex
    type: number
  outputs:
  - name: customBindingType
    nilable: true
    type:
      enum: CustomBindingType
C_LegendaryCrafting.CloseRuneforgeInteraction:
  inputs: {}
  outputs: {}
C_LegendaryCrafting.CraftRuneforgeLegendary:
  inputs:
  - name: description
    type:
      structure: RuneforgeLegendaryCraftDescription
  outputs: {}
C_LegendaryCrafting.GetRuneforgeItemPreviewInfo:
  inputs:
  - name: baseItem
    type:
      structure: ItemLocation
  - name: runeforgePowerID
    nilable: true
    type: number
  - name: modifiers
    nilable: true
    type:
      arrayof: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: RuneforgeItemPreviewInfo
C_LegendaryCrafting.GetRuneforgeLegendaryComponentInfo:
  inputs:
  - name: runeforgeLegendary
    type:
      structure: ItemLocation
  outputs:
  - name: componentInfo
    type:
      structure: RuneforgeLegendaryComponentInfo
C_LegendaryCrafting.GetRuneforgeLegendaryCost:
  inputs:
  - name: baseItem
    type:
      structure: ItemLocation
  outputs:
  - name: cost
    type:
      arrayof:
        structure: CurrencyCost
C_LegendaryCrafting.GetRuneforgeLegendaryCraftSpellID:
  inputs: {}
  outputs:
  - name: spellID
    type: number
C_LegendaryCrafting.GetRuneforgeLegendaryCurrencies:
  inputs: {}
  outputs:
  - name: currencies
    type:
      arrayof: number
C_LegendaryCrafting.GetRuneforgeLegendaryUpgradeCost:
  inputs:
  - name: runeforgeLegendary
    type:
      structure: ItemLocation
  - name: upgradeItem
    type:
      structure: ItemLocation
  outputs:
  - name: cost
    type:
      arrayof:
        structure: CurrencyCost
C_LegendaryCrafting.GetRuneforgeModifierInfo:
  inputs:
  - name: baseItem
    type:
      structure: ItemLocation
  - name: powerID
    nilable: true
    type: number
  - name: addedModifierIndex
    type: number
  - name: modifiers
    type:
      arrayof: number
  outputs:
  - name: name
    type: string
  - name: description
    type:
      arrayof: string
C_LegendaryCrafting.GetRuneforgeModifiers:
  inputs: {}
  outputs:
  - name: modifiedReagentItemIDs
    type:
      arrayof: number
C_LegendaryCrafting.GetRuneforgePowerInfo:
  inputs:
  - name: runeforgePowerID
    type: number
  outputs:
  - name: power
    type:
      structure: RuneforgePower
C_LegendaryCrafting.GetRuneforgePowers:
  inputs:
  - name: baseItem
    nilable: true
    type:
      structure: ItemLocation
  - name: filter
    nilable: true
    type:
      enum: RuneforgePowerFilter
  outputs:
  - name: primaryRuneforgePowerIDs
    type:
      arrayof: number
  - name: otherRuneforgePowerIDs
    type:
      arrayof: number
C_LegendaryCrafting.GetRuneforgePowersByClassSpecAndCovenant:
  inputs:
  - name: classID
    nilable: true
    type: number
  - name: specID
    nilable: true
    type: number
  - name: covenantID
    nilable: true
    type: number
  - name: filter
    nilable: true
    type:
      enum: RuneforgePowerFilter
  outputs:
  - name: runeforgePowerIDs
    type:
      arrayof: number
C_LegendaryCrafting.GetRuneforgePowerSlots:
  inputs:
  - name: runeforgePowerID
    type: number
  outputs:
  - name: slotNames
    type:
      arrayof: string
C_LegendaryCrafting.IsRuneforgeLegendary:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  outputs:
  - name: isRuneforgeLegendary
    type: boolean
C_LegendaryCrafting.IsRuneforgeLegendaryMaxLevel:
  inputs:
  - name: runeforgeLegendary
    type:
      structure: ItemLocation
  outputs:
  - name: isMaxLevel
    type: boolean
C_LegendaryCrafting.IsUpgradeItemValidForRuneforgeLegendary:
  inputs:
  - name: runeforgeLegendary
    type:
      structure: ItemLocation
  - name: upgradeItem
    type:
      structure: ItemLocation
  outputs:
  - name: isValid
    type: boolean
C_LegendaryCrafting.IsValidRuneforgeBaseItem:
  inputs:
  - name: baseItem
    type:
      structure: ItemLocation
  outputs:
  - name: isValid
    type: boolean
C_LegendaryCrafting.MakeRuneforgeCraftDescription:
  inputs:
  - name: baseItem
    type:
      structure: ItemLocation
  - name: runeforgePowerID
    type: number
  - name: modifiers
    type:
      arrayof: number
  outputs:
  - name: description
    type:
      structure: RuneforgeLegendaryCraftDescription
C_LegendaryCrafting.UpgradeRuneforgeLegendary:
  inputs:
  - name: runeforgeLegendary
    type:
      structure: ItemLocation
  - name: upgradeItem
    type:
      structure: ItemLocation
  outputs: {}
C_LevelLink.IsActionLocked:
  inputs:
  - name: actionID
    type: number
  outputs:
  - name: isLocked
    type: boolean
C_LevelLink.IsSpellLocked:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: isLocked
    type: boolean
C_LevelSquish.ConvertFollowerLevel:
  inputs:
  - name: level
    type: number
  - name: maxFollowerLevel
    type: number
  outputs:
  - name: squishedLevel
    type: number
C_LevelSquish.ConvertPlayerLevel:
  inputs:
  - name: level
    type: number
  outputs:
  - name: squishedLevel
    type: number
C_LFGInfo.CanPlayerUseGroupFinder:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_LFGInfo.CanPlayerUseLFD:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_LFGInfo.CanPlayerUseLFR:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_LFGInfo.CanPlayerUsePremadeGroup:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_LFGInfo.CanPlayerUsePVP:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_LFGInfo.ConfirmLfgExpandSearch:
  inputs: {}
  outputs: {}
C_LFGInfo.GetAllEntriesForCategory:
  inputs:
  - name: category
    type: number
  outputs:
  - name: lfgDungeonIDs
    type:
      arrayof: number
C_LFGInfo.GetDungeonInfo:
  inputs:
  - name: lfgDungeonID
    type: number
  outputs:
  - name: dungeonInfo
    type:
      structure: C_LFGInfo.LFGDungeonInfo
C_LFGInfo.GetLFDLockStates:
  inputs: {}
  outputs:
  - name: lockInfo
    type:
      arrayof:
        structure: C_LFGInfo.LFGLockInfo
C_LFGInfo.GetRoleCheckDifficultyDetails:
  inputs: {}
  outputs:
  - name: maxLevel
    nilable: true
    type: number
  - name: isLevelReduced
    type: boolean
C_LFGInfo.HideNameFromUI:
  inputs:
  - name: dungeonID
    type: number
  outputs:
  - name: shouldHide
    type: boolean
C_LFGInfo.IsGroupFinderEnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_LFGInfo.IsLFDEnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_LFGInfo.IsLFREnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_LFGInfo.IsPremadeGroupEnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_LFGList.AcceptInvite: {}
C_LFGList.ApplyToGroup: {}
C_LFGList.CanActiveEntryUseAutoAccept:
  inputs: {}
  outputs:
  - name: canUseAutoAccept
    type: boolean
C_LFGList.CancelApplication: {}
C_LFGList.CanCreateQuestGroup:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: canCreate
    type: boolean
C_LFGList.ClearApplicationTextFields:
  inputs: {}
  outputs: {}
C_LFGList.ClearCreationTextFields:
  inputs: {}
  outputs: {}
C_LFGList.ClearSearchResults: {}
C_LFGList.ClearSearchTextFields:
  inputs: {}
  outputs: {}
C_LFGList.CopyActiveEntryInfoToCreationFields:
  inputs: {}
  outputs: {}
C_LFGList.CreateListing:
  inputs:
  - name: activityIDs
    type:
      arrayof: number
  outputs:
  - name: success
    type: boolean
C_LFGList.DeclineApplicant: {}
C_LFGList.DeclineInvite: {}
C_LFGList.DoesEntryTitleMatchPrebuiltTitle:
  inputs:
  - name: activityID
    type: number
  - name: groupID
    type: number
  - name: playstyle
    nilable: true
    type:
      enum: LFGEntryPlaystyle
  outputs:
  - name: matches
    type: boolean
C_LFGList.GetActiveEntryInfo:
  inputs: {}
  outputs:
  - name: entryData
    type:
      structure: C_LFGList.LfgEntryData
C_LFGList.GetActivityFullName:
  inputs:
  - name: activityID
    type: number
  - name: questID
    nilable: true
    type: number
  - name: showWarmode
    nilable: true
    type: boolean
  outputs:
  - name: fullName
    type: string
C_LFGList.GetActivityGroupInfo:
  inputs:
  - name: groupID
    type: number
  outputs:
  - name: name
    type: string
  - name: orderIndex
    type: number
C_LFGList.GetActivityIDForQuestID: {}
C_LFGList.GetActivityInfoExpensive: {}
C_LFGList.GetActivityInfoTable:
  inputs:
  - name: activityID
    type: number
  - name: questID
    nilable: true
    type: number
  - name: showWarmode
    nilable: true
    type: boolean
  outputs:
  - name: activityInfo
    type:
      structure: C_LFGList.GroupFinderActivityInfo
C_LFGList.GetApplicantDungeonScoreForListing:
  inputs:
  - name: localID
    type: number
  - name: applicantIndex
    type: number
  - name: activityID
    type: number
  outputs:
  - name: bestDungeonScoreForListing
    type:
      structure: C_LFGList.BestDungeonScoreMapInfo
C_LFGList.GetApplicantInfo:
  inputs:
  - name: applicantID
    type: number
  outputs:
  - name: applicantData
    type:
      structure: C_LFGList.LfgApplicantData
C_LFGList.GetApplicantMemberInfo: {}
C_LFGList.GetApplicantMemberStats: {}
C_LFGList.GetApplicantPvpRatingInfoForListing:
  inputs:
  - name: localID
    type: number
  - name: applicantIndex
    type: number
  - name: activityID
    type: number
  outputs:
  - name: pvpRatingInfo
    type:
      structure: C_LFGList.PvpRatingInfo
C_LFGList.GetApplicants: {}
C_LFGList.GetApplicationInfo: {}
C_LFGList.GetApplications:
  outputs:
  - type: table
C_LFGList.GetAvailableActivities:
  inputs:
  - name: categoryID
    nilable: true
    type: number
  - name: groupID
    nilable: true
    type: number
  - name: filter
    nilable: true
    type: number
  outputs:
  - name: activities
    type: table
C_LFGList.GetAvailableActivityGroups: {}
C_LFGList.GetAvailableCategories:
  outputs:
  - type: table
C_LFGList.GetAvailableLanguageSearchFilter:
  outputs:
  - type: table
C_LFGList.GetAvailableRoles: {}
C_LFGList.GetDefaultLanguageSearchFilter:
  outputs:
  - type: number
C_LFGList.GetFilteredSearchResults:
  inputs: {}
  outputs:
  - default: 0
    name: totalResultsFound
    type: number
  - name: filteredResults
    type:
      arrayof: number
C_LFGList.GetKeystoneForActivity:
  inputs:
  - name: activityID
    type: number
  outputs:
  - name: level
    type: number
C_LFGList.GetLanguageSearchFilter:
  outputs:
  - type: number
C_LFGList.GetLfgCategoryInfo:
  inputs:
  - name: categoryID
    type: number
  outputs:
  - name: categoryData
    type:
      structure: C_LFGList.LfgCategoryData
C_LFGList.GetNumApplicants: {}
C_LFGList.GetNumApplications:
  inputs: {}
  outputs:
  - name: numApplications
    type: number
  - name: numActiveApplications
    type: number
C_LFGList.GetNumInvitedApplicantMembers: {}
C_LFGList.GetNumPendingApplicantMembers: {}
C_LFGList.GetOwnedKeystoneActivityAndGroupAndLevel:
  inputs:
  - default: false
    name: getTimewalking
    type: boolean
  outputs:
  - name: activityID
    type: number
  - name: groupID
    type: number
  - name: keystoneLevel
    type: number
C_LFGList.GetPlaystyleString:
  inputs:
  - name: playstyle
    type:
      enum: LFGEntryPlaystyle
  - name: activityInfo
    type:
      structure: C_LFGList.GroupFinderActivityInfo
  outputs:
  - name: playstyleString
    type: string
C_LFGList.GetRoleCheckInfo: {}
C_LFGList.GetSearchResultEncounterInfo: {}
C_LFGList.GetSearchResultFriends: {}
C_LFGList.GetSearchResultInfo:
  inputs:
  - name: searchResultID
    type: number
  outputs:
  - name: searchResultData
    type:
      structure: C_LFGList.LfgSearchResultData
C_LFGList.GetSearchResultMemberCounts: {}
C_LFGList.GetSearchResultMemberInfo: {}
C_LFGList.GetSearchResults:
  inputs: {}
  outputs:
  - default: 0
    name: totalResultsFound
    type: number
  - name: results
    type:
      arrayof: number
C_LFGList.HasActiveEntryInfo:
  inputs: {}
  outputs:
  - name: hasActiveEntryInfo
    type: boolean
C_LFGList.HasActivityList:
  inputs: {}
  outputs:
  - type: boolean
C_LFGList.HasSearchResultInfo:
  inputs:
  - name: searchResultID
    type: number
  outputs:
  - name: hasSearchResultInfo
    type: boolean
C_LFGList.InviteApplicant: {}
C_LFGList.IsCurrentlyApplying: {}
C_LFGList.IsPlayerAuthenticatedForLFG:
  inputs:
  - name: activityID
    nilable: true
    type: number
  outputs:
  - name: isAuthenticated
    type: boolean
C_LFGList.RefreshApplicants: {}
C_LFGList.RemoveApplicant: {}
C_LFGList.RemoveListing: {}
C_LFGList.RequestAvailableActivities:
  inputs: {}
  outputs: {}
C_LFGList.SaveLanguageSearchFilter: {}
C_LFGList.Search:
  inputs:
  - name: categoryID
    type: number
  - default: 0
    name: filter
    type: number
  - default: 0
    name: preferredFilters
    type: number
  - name: languageFilter
    nilable: true
    type:
      structure: C_LFGList.WowLocale
  - default: false
    name: searchCrossFactionListings
    nilable: true
    type: boolean
  outputs: {}
C_LFGList.SetApplicantMemberRole: {}
C_LFGList.SetEntryTitle:
  inputs:
  - name: activityID
    type: number
  - name: groupID
    type: number
  - name: playstyle
    nilable: true
    type:
      enum: LFGEntryPlaystyle
  outputs: {}
C_LFGList.SetSearchToActivity:
  inputs:
  - name: activityID
    type: number
  outputs: {}
C_LFGList.SetSearchToQuestID:
  inputs:
  - name: questID
    type: number
  outputs: {}
C_LFGList.UpdateListing:
  inputs:
  - name: activityIDs
    type:
      arrayof: number
  outputs:
  - name: success
    type: boolean
C_LFGList.ValidateRequiredDungeonScore:
  inputs:
  - name: dungeonScore
    type: number
  outputs:
  - name: passes
    type: boolean
C_LFGList.ValidateRequiredPvpRatingForActivity:
  inputs:
  - name: activityID
    type: number
  - name: rating
    type: number
  outputs:
  - name: passes
    type: boolean
C_Loot.GetLootRollDuration:
  inputs:
  - name: rollID
    type: number
  outputs:
  - name: duration
    nilable: true
    type: number
C_Loot.IsLegacyLootModeEnabled:
  inputs: {}
  outputs:
  - name: isLegacyLootModeEnabled
    type: boolean
C_LootHistory.GetAllEncounterInfos:
  inputs: {}
  outputs:
  - name: infos
    type:
      arrayof:
        structure: C_LootHistory.EncounterLootInfo
C_LootHistory.GetInfoForEncounter:
  inputs:
  - name: encounterID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_LootHistory.EncounterLootInfo
C_LootHistory.GetLootHistoryTime:
  inputs: {}
  outputs:
  - name: time
    type: number
C_LootHistory.GetSortedDropsForEncounter:
  inputs:
  - name: encounterID
    type: number
  outputs:
  - name: drops
    nilable: true
    stub: {}
    type:
      arrayof:
        structure: C_LootHistory.EncounterLootDropInfo
C_LootHistory.GetSortedInfoForDrop:
  inputs:
  - name: encounterID
    type: number
  - name: lootListID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_LootHistory.EncounterLootDropInfo
C_LootJournal.GetItemSetItems:
  inputs:
  - name: setID
    type: number
  outputs:
  - name: items
    type:
      arrayof:
        structure: C_LootJournal.LootJournalItemInfo
C_LootJournal.GetItemSets:
  inputs:
  - name: classID
    nilable: true
    type: number
  - name: specID
    nilable: true
    type: number
  outputs:
  - name: itemSets
    type:
      arrayof:
        structure: C_LootJournal.LootJournalItemSetInfo
C_LoreText.RequestLoreTextForCampaignID:
  inputs:
  - name: campaignID
    type: number
  outputs: {}
C_LossOfControl.GetActiveLossOfControlData:
  inputs:
  - name: index
    type: number
  outputs:
  - name: event
    nilable: true
    type:
      structure: C_LossOfControl.LossOfControlData
C_LossOfControl.GetActiveLossOfControlDataByUnit:
  inputs:
  - name: unitToken
    type: unit
  - name: index
    type: number
  outputs:
  - name: event
    nilable: true
    type:
      structure: C_LossOfControl.LossOfControlData
C_LossOfControl.GetActiveLossOfControlDataCount:
  inputs: {}
  outputs:
  - name: count
    type: number
C_LossOfControl.GetActiveLossOfControlDataCountByUnit:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: count
    type: number
C_Macro.SetMacroExecuteLineCallback:
  impl: C_Macro.SetMacroExecuteLineCallback
  inputs:
  - name: cb
    type: function
  outputs: {}
C_Mail.CanCheckInbox:
  inputs: {}
  outputs:
  - name: canCheckInbox
    type: boolean
  - name: secondsUntilAllowed
    type: number
C_Mail.GetCraftingOrderMailInfo:
  inputs:
  - name: inboxIndex
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: CraftingOrderMailInfo
C_Mail.HasInboxMoney:
  inputs:
  - name: inboxIndex
    type: number
  outputs:
  - name: inboxItemHasMoneyAttached
    type: boolean
C_Mail.IsCommandPending:
  inputs: {}
  outputs:
  - name: isCommandPending
    type: boolean
C_Mail.SetOpeningAll:
  inputs:
  - name: openingAll
    type: boolean
  outputs: {}
C_MajorFactions.GetCovenantIDForMajorFaction:
  inputs:
  - name: majorFactionID
    type: number
  outputs:
  - name: covenantID
    type: number
C_MajorFactions.GetCurrentRenownLevel:
  inputs:
  - name: majorFactionID
    type: number
  outputs:
  - name: level
    type: number
C_MajorFactions.GetFeatureAbilities:
  inputs: {}
  outputs:
  - name: featureAbilities
    type:
      arrayof:
        structure: C_MajorFactions.MajorFactionFeatureAbilityInfo
C_MajorFactions.GetMajorFactionData:
  inputs:
  - name: majorFactionID
    type: number
  outputs:
  - name: data
    nilable: true
    type:
      structure: C_MajorFactions.MajorFactionData
C_MajorFactions.GetMajorFactionIDs:
  inputs:
  - name: expansionID
    nilable: true
    type: number
  outputs:
  - name: majorFactionIDs
    type:
      arrayof: number
C_MajorFactions.GetRenownLevels:
  inputs:
  - name: majorFactionID
    type: number
  outputs:
  - name: levels
    type:
      arrayof:
        structure: C_MajorFactions.MajorFactionRenownLevelInfo
C_MajorFactions.GetRenownNPCFactionID:
  inputs: {}
  outputs:
  - name: renownNPCFactionID
    type: number
C_MajorFactions.GetRenownRewardsForLevel:
  inputs:
  - name: majorFactionID
    type: number
  - name: renownLevel
    type: number
  outputs:
  - name: rewards
    type:
      arrayof:
        structure: C_MajorFactions.MajorFactionRenownRewardInfo
C_MajorFactions.HasMaximumRenown:
  inputs:
  - name: majorFactionID
    type: number
  outputs:
  - name: hasMaxRenown
    type: boolean
C_MajorFactions.IsPlayerInRenownCatchUpMode:
  inputs: {}
  outputs:
  - name: isInCatchUpMode
    type: boolean
C_MajorFactions.IsWeeklyRenownCapped:
  inputs:
  - name: majorFactionID
    type: number
  outputs:
  - name: isWeeklyCapped
    type: boolean
C_MajorFactions.RequestCatchUpState:
  inputs: {}
  outputs: {}
C_Map.CanSetUserWaypointOnMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: canSet
    type: boolean
C_Map.ClearUserWaypoint:
  inputs: {}
  outputs: {}
C_Map.CloseWorldMapInteraction:
  inputs: {}
  outputs: {}
C_Map.GetAreaInfo:
  inputs:
  - name: areaID
    type: number
  outputs:
  - name: name
    type: string
C_Map.GetBestMapForUnit:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: uiMapID
    nilable: true
    type: number
C_Map.GetBountySetMaps:
  inputs:
  - name: bountySetID
    type: number
  outputs:
  - name: mapIDs
    type:
      arrayof: number
C_Map.GetFallbackWorldMapID:
  inputs: {}
  outputs:
  - name: uiMapID
    stub: 947
    type: number
C_Map.GetMapArtBackgroundAtlas:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: atlasName
    type: string
C_Map.GetMapArtHelpTextPosition:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: position
    type:
      enum: MapCanvasPosition
C_Map.GetMapArtID:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: uiMapArtID
    type: number
C_Map.GetMapArtLayers:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: layerInfo
    type:
      arrayof:
        structure: C_Map.UiMapLayerInfo
C_Map.GetMapArtLayerTextures:
  inputs:
  - name: uiMapID
    type: number
  - name: layerIndex
    type: number
  outputs:
  - name: textures
    type:
      arrayof: number
C_Map.GetMapBannersForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: mapBanners
    type:
      arrayof:
        structure: C_Map.MapBannerInfo
C_Map.GetMapChildrenInfo:
  inputs:
  - name: uiMapID
    type: number
  - name: mapType
    nilable: true
    type:
      enum: UIMapType
  - name: allDescendants
    nilable: true
    type: boolean
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_Map.UiMapDetails
C_Map.GetMapDisplayInfo:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: hideIcons
    type: boolean
C_Map.GetMapGroupID:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: uiMapGroupID
    type: number
C_Map.GetMapGroupMembersInfo:
  inputs:
  - name: uiMapGroupID
    type: number
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_Map.UiMapGroupMemberInfo
C_Map.GetMapHighlightInfoAtPosition:
  inputs:
  - name: uiMapID
    type: number
  - name: x
    type: number
  - name: y
    type: number
  outputs:
  - name: fileDataID
    type: number
  - name: atlasID
    type: string
  - name: texturePercentageX
    type: number
  - name: texturePercentageY
    type: number
  - name: textureX
    type: number
  - name: textureY
    type: number
  - name: scrollChildX
    type: number
  - name: scrollChildY
    type: number
C_Map.GetMapHighlightPulseInfo:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: fileDataID
    type: number
  - name: atlasID
    type: string
  - name: texturePercentageX
    type: number
  - name: texturePercentageY
    type: number
  - name: textureX
    type: number
  - name: textureY
    type: number
  - name: scrollChildX
    type: number
  - name: scrollChildY
    type: number
C_Map.GetMapInfo:
  impl: C_Map.GetMapInfo
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: info
    type:
      structure: C_Map.UiMapDetails
C_Map.GetMapInfoAtPosition:
  inputs:
  - name: uiMapID
    type: number
  - name: x
    type: number
  - name: y
    type: number
  - name: ignoreZoneMapPositionData
    nilable: true
    type: boolean
  outputs:
  - name: info
    type:
      structure: C_Map.UiMapDetails
C_Map.GetMapLevels:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: playerMinLevel
    type: number
  - name: playerMaxLevel
    type: number
  - default: 0
    name: petMinLevel
    type: number
  - default: 0
    name: petMaxLevel
    type: number
C_Map.GetMapLinksForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: mapLinks
    type:
      arrayof:
        structure: C_Map.MapLinkInfo
C_Map.GetMapPosFromWorldPos:
  inputs:
  - name: continentID
    type: number
  - name: worldPosition
    type:
      structure: vector2
  - name: overrideUiMapID
    nilable: true
    type: number
  outputs:
  - name: uiMapID
    type: number
  - name: mapPosition
    type:
      structure: vector2
C_Map.GetMapRectOnMap:
  inputs:
  - name: uiMapID
    type: number
  - name: topUiMapID
    type: number
  outputs:
  - name: minX
    type: number
  - name: maxX
    type: number
  - name: minY
    type: number
  - name: maxY
    type: number
C_Map.GetMapWorldSize:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: width
    type: number
  - name: height
    type: number
C_Map.GetPlayerMapPosition:
  inputs:
  - name: uiMapID
    type: number
  - name: unitToken
    type: unit
  outputs:
  - name: position
    nilable: true
    type:
      structure: vector2
C_Map.GetUserWaypoint:
  inputs: {}
  outputs:
  - name: point
    type: table
C_Map.GetUserWaypointFromHyperlink:
  inputs:
  - name: hyperlink
    type: string
  outputs:
  - name: point
    type: table
C_Map.GetUserWaypointHyperlink:
  inputs: {}
  outputs:
  - name: hyperlink
    type: string
C_Map.GetUserWaypointPositionForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: mapPosition
    type:
      structure: vector2
C_Map.GetWorldPosFromMapPos:
  inputs:
  - name: uiMapID
    type: number
  - name: mapPosition
    type:
      structure: vector2
  outputs:
  - name: continentID
    type: number
  - name: worldPosition
    type:
      structure: vector2
C_Map.HasUserWaypoint:
  inputs: {}
  outputs:
  - name: hasUserWaypoint
    type: boolean
C_Map.IsMapValidForNavBarDropDown:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: isValid
    type: boolean
C_Map.MapHasArt:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: hasArt
    type: boolean
C_Map.RequestPreloadMap:
  inputs:
  - name: uiMapID
    type: number
  outputs: {}
C_Map.SetUserWaypoint:
  inputs:
  - name: point
    type: table
  outputs: {}
C_MapExplorationInfo.GetExploredAreaIDsAtPosition:
  inputs:
  - name: uiMapID
    type: number
  - name: normalizedPosition
    type:
      structure: vector2
  outputs:
  - name: areaID
    nilable: true
    type:
      arrayof: number
C_MapExplorationInfo.GetExploredMapTextures:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: overlayInfo
    type:
      arrayof:
        structure: C_MapExplorationInfo.UiMapExplorationInfo
C_MerchantFrame.GetBuybackItemID:
  inputs:
  - name: buybackSlotIndex
    type: number
  outputs:
  - name: buybackItemID
    type: number
C_MerchantFrame.GetNumJunkItems:
  inputs: {}
  outputs:
  - name: numJunkItems
    type: number
C_MerchantFrame.IsMerchantItemRefundable:
  inputs:
  - name: index
    type: number
  outputs:
  - name: refundable
    type: boolean
C_MerchantFrame.IsSellAllJunkEnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_MerchantFrame.SellAllJunkItems:
  inputs: {}
  outputs: {}
C_Minimap.CanTrackBattlePets:
  inputs: {}
  outputs:
  - name: CanTrackBattlePets
    type: boolean
C_Minimap.ClearAllTracking:
  inputs: {}
  outputs: {}
C_Minimap.GetDrawGroundTextures:
  inputs: {}
  outputs:
  - name: draw
    type: boolean
C_Minimap.GetNumQuestPOIWorldEffects:
  inputs: {}
  outputs:
  - name: worldEffectCount
    type: number
C_Minimap.GetNumTrackingTypes:
  inputs: {}
  outputs:
  - name: numTrackingTypes
    type: number
C_Minimap.GetObjectIconTextureCoords:
  inputs:
  - name: index
    nilable: true
    type: number
  outputs:
  - name: textureCoordsX
    type: number
  - name: textureCoordsY
    type: number
  - name: textureCoordsZ
    type: number
  - name: textureCoordsW
    type: number
C_Minimap.GetPOITextureCoords:
  inputs:
  - name: index
    nilable: true
    type: number
  outputs:
  - name: textureCoordsX
    type: number
  - name: textureCoordsY
    type: number
  - name: textureCoordsZ
    type: number
  - name: textureCoordsW
    type: number
C_Minimap.GetTrackingFilter:
  inputs:
  - name: spellIndex
    type: number
  outputs:
  - name: trackingType
    type:
      structure: C_Minimap.MinimapScriptTrackingFilter
C_Minimap.GetTrackingInfo:
  inputs:
  - name: spellIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: textureFileID
    type: number
  - name: active
    type: boolean
  - name: type
    type: string
  - name: subType
    type: number
  - name: spellID
    nilable: true
    type: number
C_Minimap.GetUiMapID:
  inputs: {}
  outputs:
  - name: uiMapID
    nilable: true
    type: number
C_Minimap.GetViewRadius:
  inputs: {}
  outputs:
  - name: yards
    type: number
C_Minimap.IsFilteredOut:
  inputs:
  - name: filterType
    type:
      enum: MinimapTrackingFilter
  outputs:
  - name: isFiltered
    type: boolean
C_Minimap.IsRotateMinimapIgnored:
  inputs: {}
  outputs:
  - name: isIgnored
    type: boolean
C_Minimap.IsTrackingBattlePets:
  inputs: {}
  outputs:
  - name: isTrackingBattlePets
    type: boolean
C_Minimap.IsTrackingHiddenQuests:
  inputs: {}
  outputs:
  - name: isTrackingHiddenQuests
    type: boolean
C_Minimap.SetDrawGroundTextures:
  inputs:
  - name: draw
    type: boolean
  outputs: {}
C_Minimap.SetIgnoreRotateMinimap:
  inputs:
  - name: ignore
    type: boolean
  outputs: {}
C_Minimap.SetTracking:
  inputs:
  - name: index
    type: number
  - name: 'on'
    type: boolean
  outputs: {}
C_Minimap.ShouldUseHybridMinimap:
  inputs: {}
  outputs:
  - name: shouldUse
    type: boolean
C_ModelInfo.AddActiveModelScene:
  inputs:
  - name: modelSceneFrame
    type: ModelScene
  - name: modelSceneID
    type: number
  outputs: {}
C_ModelInfo.AddActiveModelSceneActor:
  inputs:
  - name: modelSceneFrameActor
    type: Actor
  - name: modelSceneActorID
    type: number
  outputs: {}
C_ModelInfo.ClearActiveModelScene:
  inputs:
  - name: modelSceneFrame
    type: ModelScene
  outputs: {}
C_ModelInfo.ClearActiveModelSceneActor:
  inputs:
  - name: modelSceneFrameActor
    type: Actor
  outputs: {}
C_ModelInfo.GetModelSceneActorDisplayInfoByID:
  inputs:
  - name: modelActorDisplayID
    type: number
  outputs:
  - name: actorDisplayInfo
    type:
      structure: C_ModelInfo.UIModelSceneActorDisplayInfo
C_ModelInfo.GetModelSceneActorInfoByID:
  inputs:
  - name: modelActorID
    type: number
  outputs:
  - name: actorInfo
    type:
      structure: C_ModelInfo.UIModelSceneActorInfo
C_ModelInfo.GetModelSceneCameraInfoByID:
  inputs:
  - name: modelSceneCameraID
    type: number
  outputs:
  - name: modelSceneCameraInfo
    type:
      structure: C_ModelInfo.UIModelSceneCameraInfo
C_ModelInfo.GetModelSceneInfoByID:
  inputs:
  - name: modelSceneID
    type: number
  outputs:
  - name: modelSceneType
    type:
      enum: ModelSceneType
  - name: modelCameraIDs
    type:
      arrayof: number
  - name: modelActorsIDs
    type:
      arrayof: number
  - name: flags
    type: number
C_ModifiedInstance.GetModifiedInstanceInfoFromMapID:
  inputs:
  - name: mapID
    type: number
  outputs:
  - name: info
    type:
      structure: C_ModifiedInstance.ModifiedInstanceInfo
C_MountJournal.ApplyMountEquipment:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: canContinue
    type: boolean
C_MountJournal.AreMountEquipmentEffectsSuppressed:
  inputs: {}
  outputs:
  - name: areEffectsSuppressed
    type: boolean
C_MountJournal.ClearFanfare:
  inputs:
  - name: mountID
    type: number
  outputs: {}
C_MountJournal.ClearRecentFanfares:
  inputs: {}
  outputs: {}
C_MountJournal.Dismiss:
  inputs: {}
  outputs: {}
C_MountJournal.GetAllCreatureDisplayIDsForMountID:
  inputs:
  - name: mountID
    type: number
  outputs:
  - name: creatureDisplayIDs
    type:
      arrayof: number
C_MountJournal.GetAppliedMountEquipmentID:
  inputs: {}
  outputs:
  - name: itemID
    nilable: true
    type: number
C_MountJournal.GetCollectedDragonridingMounts:
  inputs: {}
  outputs:
  - name: mountIDs
    type:
      arrayof: number
C_MountJournal.GetCollectedFilterSetting:
  inputs:
  - name: filterIndex
    type: number
  outputs:
  - name: isChecked
    type: boolean
C_MountJournal.GetDisplayedMountAllCreatureDisplayInfo:
  inputs:
  - name: mountIndex
    type: number
  outputs:
  - name: allDisplayInfo
    type:
      arrayof:
        structure: C_MountJournal.MountCreatureDisplayInfo
C_MountJournal.GetDisplayedMountID:
  inputs:
  - name: displayIndex
    type: number
  outputs:
  - name: mountID
    type: number
C_MountJournal.GetDisplayedMountInfo:
  inputs:
  - name: displayIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: spellID
    type: number
  - name: icon
    type: number
  - name: isActive
    type: boolean
  - name: isUsable
    type: boolean
  - name: sourceType
    type: number
  - name: isFavorite
    type: boolean
  - name: isFactionSpecific
    type: boolean
  - name: faction
    nilable: true
    type: number
  - name: shouldHideOnChar
    type: boolean
  - name: isCollected
    type: boolean
  - name: mountID
    type: number
  - name: isForDragonriding
    type: boolean
C_MountJournal.GetDisplayedMountInfoExtra:
  inputs:
  - name: mountIndex
    type: number
  outputs:
  - name: creatureDisplayInfoID
    nilable: true
    type: number
  - name: description
    type: string
  - name: source
    type: string
  - name: isSelfMount
    type: boolean
  - name: mountTypeID
    type: number
  - name: uiModelSceneID
    type: number
  - name: animID
    type: number
  - name: spellVisualKitID
    type: number
  - name: disablePlayerMountPreview
    type: boolean
C_MountJournal.GetIsFavorite:
  inputs:
  - name: mountIndex
    type: number
  outputs:
  - name: isFavorite
    type: boolean
  - name: canSetFavorite
    type: boolean
C_MountJournal.GetMountAllCreatureDisplayInfoByID:
  inputs:
  - name: mountID
    type: number
  outputs:
  - name: allDisplayInfo
    type:
      arrayof:
        structure: C_MountJournal.MountCreatureDisplayInfo
C_MountJournal.GetMountEquipmentUnlockLevel:
  inputs: {}
  outputs:
  - name: level
    type: number
C_MountJournal.GetMountFromItem:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: mountID
    nilable: true
    type: number
C_MountJournal.GetMountFromSpell:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: mountID
    nilable: true
    type: number
C_MountJournal.GetMountIDs:
  inputs: {}
  outputs:
  - name: mountIDs
    type:
      arrayof: number
C_MountJournal.GetMountInfoByID:
  inputs:
  - name: mountID
    type: number
  outputs:
  - name: name
    type: string
  - name: spellID
    type: number
  - name: icon
    type: number
  - name: isActive
    type: boolean
  - name: isUsable
    type: boolean
  - name: sourceType
    type: number
  - name: isFavorite
    type: boolean
  - name: isFactionSpecific
    type: boolean
  - name: faction
    nilable: true
    type: number
  - name: shouldHideOnChar
    type: boolean
  - name: isCollected
    type: boolean
  - name: mountID
    type: number
  - name: isForDragonriding
    type: boolean
C_MountJournal.GetMountInfoExtraByID:
  inputs:
  - name: mountID
    type: number
  outputs:
  - name: creatureDisplayInfoID
    nilable: true
    type: number
  - name: description
    type: string
  - name: source
    type: string
  - name: isSelfMount
    type: boolean
  - name: mountTypeID
    type: number
  - name: uiModelSceneID
    type: number
  - name: animID
    type: number
  - name: spellVisualKitID
    type: number
  - name: disablePlayerMountPreview
    type: boolean
C_MountJournal.GetMountLink:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: mountCreatureDisplayInfoLink
    nilable: true
    type: string
C_MountJournal.GetMountUsabilityByID:
  inputs:
  - name: mountID
    type: number
  - name: checkIndoors
    type: boolean
  outputs:
  - name: isUsable
    type: boolean
  - name: useError
    nilable: true
    type: string
C_MountJournal.GetNumDisplayedMounts:
  inputs: {}
  outputs:
  - name: numMounts
    type: number
C_MountJournal.GetNumMounts:
  inputs: {}
  outputs:
  - name: numMounts
    type: number
C_MountJournal.GetNumMountsNeedingFanfare:
  inputs: {}
  outputs:
  - name: numMountsNeedingFanfare
    type: number
C_MountJournal.IsItemMountEquipment:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs:
  - name: isMountEquipment
    type: boolean
C_MountJournal.IsMountEquipmentApplied:
  inputs: {}
  outputs:
  - name: isApplied
    type: boolean
C_MountJournal.IsSourceChecked:
  inputs:
  - name: filterIndex
    type: number
  outputs:
  - name: isChecked
    type: boolean
C_MountJournal.IsTypeChecked:
  inputs:
  - name: filterIndex
    type: number
  outputs:
  - name: isChecked
    type: boolean
C_MountJournal.IsUsingDefaultFilters:
  inputs: {}
  outputs:
  - name: isUsingDefaultFilters
    type: boolean
C_MountJournal.IsValidSourceFilter:
  inputs:
  - name: filterIndex
    type: number
  outputs:
  - name: isValid
    type: boolean
C_MountJournal.IsValidTypeFilter:
  inputs:
  - name: filterIndex
    type: number
  outputs:
  - name: isValid
    type: boolean
C_MountJournal.NeedsFanfare:
  inputs:
  - name: mountID
    type: number
  outputs:
  - name: needsFanfare
    type: boolean
C_MountJournal.Pickup:
  inputs:
  - name: displayIndex
    type: number
  outputs: {}
C_MountJournal.SetAllSourceFilters:
  inputs:
  - name: isChecked
    type: boolean
  outputs: {}
C_MountJournal.SetAllTypeFilters:
  inputs:
  - name: isChecked
    type: boolean
  outputs: {}
C_MountJournal.SetCollectedFilterSetting:
  inputs:
  - name: filterIndex
    type: number
  - name: isChecked
    type: boolean
  outputs: {}
C_MountJournal.SetDefaultFilters:
  inputs: {}
  outputs: {}
C_MountJournal.SetIsFavorite:
  inputs:
  - name: mountIndex
    type: number
  - name: isFavorite
    type: boolean
  outputs: {}
C_MountJournal.SetSearch:
  inputs:
  - name: searchValue
    type: string
  outputs: {}
C_MountJournal.SetSourceFilter:
  inputs:
  - name: filterIndex
    type: number
  - name: isChecked
    type: boolean
  outputs: {}
C_MountJournal.SetTypeFilter:
  inputs:
  - name: filterIndex
    type: number
  - name: isChecked
    type: boolean
  outputs: {}
C_MountJournal.SummonByID:
  inputs:
  - name: mountID
    type: number
  outputs: {}
C_MythicPlus.GetCurrentAffixes:
  inputs: {}
  outputs:
  - name: affixIDs
    type:
      arrayof:
        structure: C_MythicPlus.MythicPlusKeystoneAffix
C_MythicPlus.GetCurrentSeason:
  inputs: {}
  outputs:
  - name: seasonID
    type: number
C_MythicPlus.GetCurrentSeasonValues:
  inputs: {}
  outputs:
  - name: displaySeasonID
    type: number
  - name: milestoneSeasonID
    type: number
  - name: rewardSeasonID
    type: number
C_MythicPlus.GetCurrentUIDisplaySeason:
  inputs: {}
  outputs:
  - name: seasonID
    nilable: true
    type: number
C_MythicPlus.GetEndOfRunGearSequenceLevel:
  inputs:
  - name: keystoneLevel
    type: number
  outputs:
  - name: sequenceLevel
    nilable: true
    type: number
C_MythicPlus.GetLastWeeklyBestInformation:
  inputs: {}
  outputs:
  - name: challengeMapId
    type: number
  - name: level
    type: number
C_MythicPlus.GetOwnedKeystoneChallengeMapID:
  inputs: {}
  outputs:
  - name: challengeMapID
    type: number
C_MythicPlus.GetOwnedKeystoneLevel:
  inputs: {}
  outputs:
  - name: keyStoneLevel
    type: number
C_MythicPlus.GetOwnedKeystoneMapID:
  inputs: {}
  outputs:
  - name: mapID
    type: number
C_MythicPlus.GetRewardLevelForDifficultyLevel:
  inputs:
  - name: difficultyLevel
    type: number
  outputs:
  - name: weeklyRewardLevel
    type: number
  - name: endOfRunRewardLevel
    type: number
C_MythicPlus.GetRewardLevelFromKeystoneLevel:
  inputs:
  - name: keystoneLevel
    type: number
  outputs:
  - name: rewardLevel
    nilable: true
    type: number
C_MythicPlus.GetRunHistory:
  inputs:
  - default: false
    name: includePreviousWeeks
    type: boolean
  - default: false
    name: includeIncompleteRuns
    type: boolean
  outputs:
  - name: runs
    type:
      arrayof:
        structure: C_MythicPlus.MythicPlusRunInfo
C_MythicPlus.GetSeasonBestAffixScoreInfoForMap:
  inputs:
  - name: mapChallengeModeID
    type: number
  outputs:
  - name: affixScores
    type:
      arrayof:
        structure: MythicPlusAffixScoreInfo
  - name: bestOverAllScore
    type: number
C_MythicPlus.GetSeasonBestForMap:
  inputs:
  - name: mapChallengeModeID
    type: number
  outputs:
  - name: intimeInfo
    nilable: true
    type:
      structure: C_MythicPlus.MapSeasonBestInfo
  - name: overtimeInfo
    nilable: true
    type:
      structure: C_MythicPlus.MapSeasonBestInfo
C_MythicPlus.GetSeasonBestMythicRatingFromThisExpansion:
  inputs: {}
  outputs:
  - name: bestSeasonScore
    type: number
  - name: bestSeason
    type: number
C_MythicPlus.GetWeeklyBestForMap:
  inputs:
  - name: mapChallengeModeID
    type: number
  outputs:
  - name: durationSec
    type: number
  - name: level
    type: number
  - name: completionDate
    type:
      structure: C_MythicPlus.MythicPlusDate
  - name: affixIDs
    type:
      arrayof: number
  - name: members
    type:
      arrayof:
        structure: C_MythicPlus.MythicPlusMember
  - name: dungeonScore
    type: number
C_MythicPlus.GetWeeklyChestRewardLevel:
  inputs: {}
  outputs:
  - name: currentWeekBestLevel
    type: number
  - name: weeklyRewardLevel
    type: number
  - name: nextDifficultyWeeklyRewardLevel
    type: number
  - name: nextBestLevel
    type: number
C_MythicPlus.IsMythicPlusActive:
  inputs: {}
  outputs:
  - name: isMythicPlusActive
    type: boolean
C_MythicPlus.IsWeeklyRewardAvailable:
  inputs: {}
  outputs:
  - name: weeklyRewardAvailable
    type: boolean
C_MythicPlus.RequestCurrentAffixes:
  inputs: {}
  outputs: {}
C_MythicPlus.RequestMapInfo:
  inputs: {}
  outputs: {}
C_MythicPlus.RequestRewards:
  inputs: {}
  outputs: {}
C_NamePlate.GetNamePlateEnemyClickThrough: {}
C_NamePlate.GetNamePlateEnemyPreferredClickInsets: {}
C_NamePlate.GetNamePlateEnemySize: {}
C_NamePlate.GetNamePlateForUnit: {}
C_NamePlate.GetNamePlateFriendlyClickThrough: {}
C_NamePlate.GetNamePlateFriendlyPreferredClickInsets: {}
C_NamePlate.GetNamePlateFriendlySize: {}
C_NamePlate.GetNamePlates:
  outputs:
  - type: table
C_NamePlate.GetNamePlateSelfClickThrough: {}
C_NamePlate.GetNamePlateSelfPreferredClickInsets: {}
C_NamePlate.GetNamePlateSelfSize: {}
C_NamePlate.GetNumNamePlateMotionTypes:
  outputs:
  - type: number
C_NamePlate.GetTargetClampingInsets: {}
C_NamePlate.SetNamePlateEnemyClickThrough: {}
C_NamePlate.SetNamePlateEnemyPreferredClickInsets: {}
C_NamePlate.SetNamePlateEnemySize: {}
C_NamePlate.SetNamePlateFriendlyClickThrough: {}
C_NamePlate.SetNamePlateFriendlyPreferredClickInsets: {}
C_NamePlate.SetNamePlateFriendlySize: {}
C_NamePlate.SetNamePlateSelfClickThrough: {}
C_NamePlate.SetNamePlateSelfPreferredClickInsets: {}
C_NamePlate.SetNamePlateSelfSize: {}
C_NamePlate.SetTargetClampingInsets: {}
C_Navigation.GetDistance:
  inputs: {}
  outputs:
  - name: distance
    type: number
C_Navigation.GetFrame:
  inputs: {}
  outputs:
  - name: frame
    nilable: true
    type: table
C_Navigation.GetTargetState:
  inputs: {}
  outputs:
  - name: state
    type:
      enum: NavigationState
C_Navigation.HasValidScreenPosition:
  inputs: {}
  outputs:
  - name: hasValidScreenPosition
    type: boolean
C_Navigation.WasClampedToScreen:
  inputs: {}
  outputs:
  - name: wasClamped
    type: boolean
C_NewItems.ClearAll:
  inputs: {}
  outputs: {}
C_NewItems.IsNewItem:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: isNew
    type: boolean
C_NewItems.RemoveNewItem:
  inputs:
  - name: containerIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs: {}
C_PaperDollInfo.CanAutoEquipCursorItem:
  inputs: {}
  outputs:
  - name: canAutoEquip
    type: boolean
C_PaperDollInfo.CanCursorCanGoInSlot:
  inputs:
  - name: slotIndex
    type: number
  outputs:
  - name: canOccupySlot
    type: boolean
C_PaperDollInfo.GetArmorEffectiveness:
  inputs:
  - name: armor
    type: number
  - name: attackerLevel
    type: number
  outputs:
  - name: effectiveness
    type: number
C_PaperDollInfo.GetArmorEffectivenessAgainstTarget:
  inputs:
  - name: armor
    type: number
  outputs:
  - name: effectiveness
    nilable: true
    type: number
C_PaperDollInfo.GetInspectAzeriteItemEmpoweredChoices:
  inputs:
  - name: unit
    type: unit
  - name: equipmentSlotIndex
    type: number
  outputs:
  - name: azeritePowerIDs
    type:
      arrayof: number
C_PaperDollInfo.GetInspectItemLevel:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: equippedItemLevel
    type: number
C_PaperDollInfo.GetInspectRatedSoloShuffleData:
  inputs: {}
  outputs:
  - name: ratedSoloShuffleData
    type:
      structure: C_PaperDollInfo.InspectPVPData
C_PaperDollInfo.GetMinItemLevel:
  inputs: {}
  outputs:
  - name: minItemLevel
    nilable: true
    type: number
C_PaperDollInfo.GetStaggerPercentage:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: stagger
    type: number
  - name: staggerAgainstTarget
    nilable: true
    type: number
C_PaperDollInfo.OffhandHasShield:
  inputs: {}
  outputs:
  - name: offhandHasShield
    type: boolean
C_PaperDollInfo.OffhandHasWeapon:
  inputs: {}
  outputs:
  - name: offhandHasWeapon
    type: boolean
C_PartyInfo.AllowedToDoPartyConversion:
  inputs:
  - name: toRaid
    type: boolean
  outputs:
  - name: allowed
    type: boolean
C_PartyInfo.CanFormCrossFactionParties:
  inputs: {}
  outputs:
  - name: canFormCrossFactionParties
    type: boolean
C_PartyInfo.CanInvite:
  inputs: {}
  outputs:
  - name: allowedToInvite
    type: boolean
C_PartyInfo.ConfirmConvertToRaid:
  inputs: {}
  outputs: {}
C_PartyInfo.ConfirmInviteTravelPass:
  inputs:
  - name: targetName
    type: string
  - name: targetGUID
    type: string
  outputs: {}
C_PartyInfo.ConfirmInviteUnit:
  inputs:
  - name: targetName
    type: string
  outputs: {}
C_PartyInfo.ConfirmLeaveParty:
  inputs:
  - name: category
    nilable: true
    type: number
  outputs: {}
C_PartyInfo.ConfirmRequestInviteFromUnit:
  inputs:
  - name: targetName
    type: string
  - name: tank
    nilable: true
    type: boolean
  - name: healer
    nilable: true
    type: boolean
  - name: dps
    nilable: true
    type: boolean
  outputs: {}
C_PartyInfo.ConvertToParty:
  inputs: {}
  outputs: {}
C_PartyInfo.ConvertToRaid:
  inputs: {}
  outputs: {}
C_PartyInfo.DoCountdown:
  inputs:
  - name: seconds
    type: number
  outputs: {}
C_PartyInfo.GetActiveCategories:
  inputs: {}
  outputs:
  - name: categories
    type:
      arrayof: number
C_PartyInfo.GetInviteConfirmationInvalidQueues:
  inputs:
  - name: inviteGUID
    type: string
  outputs:
  - name: invalidQueues
    type:
      arrayof:
        structure: QueueSpecificInfo
C_PartyInfo.GetInviteReferralInfo:
  inputs:
  - name: inviteGUID
    type: string
  outputs:
  - name: outReferredByGuid
    type: string
  - name: outReferredByName
    type: string
  - name: outRelationType
    type:
      enum: PartyRequestJoinRelation
  - name: outIsQuickJoin
    type: boolean
  - name: outClubId
    type: string
C_PartyInfo.GetMinItemLevel:
  inputs:
  - name: avgItemLevelCategory
    type:
      enum: AvgItemLevelCategories
  outputs:
  - name: minItemLevel
    type: number
  - name: playerNameWithLowestItemLevel
    type: string
C_PartyInfo.GetMinLevel:
  inputs:
  - name: category
    nilable: true
    type: number
  outputs:
  - name: minLevel
    type: number
C_PartyInfo.GetRestrictPings:
  inputs: {}
  outputs:
  - name: restrictToAssistants
    type: boolean
C_PartyInfo.InviteUnit:
  inputs:
  - name: targetName
    type: string
  outputs: {}
C_PartyInfo.IsCrossFactionParty:
  inputs:
  - name: category
    nilable: true
    type: number
  outputs:
  - name: isCrossFactionParty
    type: boolean
C_PartyInfo.IsPartyFull:
  inputs:
  - name: category
    nilable: true
    type: number
  outputs:
  - name: isFull
    type: boolean
C_PartyInfo.IsPartyInJailersTower:
  inputs: {}
  outputs:
  - name: isPartyInJailersTower
    type: boolean
C_PartyInfo.LeaveParty:
  inputs:
  - name: category
    nilable: true
    type: number
  outputs: {}
C_PartyInfo.RequestInviteFromUnit:
  inputs:
  - name: targetName
    type: string
  - name: tank
    nilable: true
    type: boolean
  - name: healer
    nilable: true
    type: boolean
  - name: dps
    nilable: true
    type: boolean
  outputs: {}
C_PartyInfo.SetRestrictPings:
  inputs:
  - name: restrictToAssistants
    type: boolean
  outputs: {}
C_PartyPose.ExtraAction:
  inputs:
  - name: partyPoseID
    type: number
  outputs: {}
C_PartyPose.GetPartyPoseInfoByID:
  inputs:
  - name: mapID
    type: number
  outputs:
  - name: info
    type:
      structure: C_PartyPose.PartyPoseInfo
C_PartyPose.GetPartyPoseInfoByMapID:
  inputs:
  - name: mapID
    type: number
  outputs:
  - name: info
    type:
      structure: C_PartyPose.PartyPoseInfo
C_PartyPose.HasExtraAction:
  inputs:
  - name: partyPoseID
    type: number
  outputs:
  - name: hasExtraAction
    type: boolean
C_PerksActivities.AddTrackedPerksActivity:
  inputs:
  - name: perksActivityID
    type: number
  outputs: {}
C_PerksActivities.ClearPerksActivitiesPendingCompletion:
  inputs: {}
  outputs: {}
C_PerksActivities.GetAllPerksActivityTags:
  inputs: {}
  outputs:
  - name: tags
    type:
      structure: C_PerksActivities.PerksActivityTags
C_PerksActivities.GetPerksActivitiesInfo:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: C_PerksActivities.PerksActivitiesInfo
C_PerksActivities.GetPerksActivitiesPendingCompletion:
  inputs: {}
  outputs:
  - name: pending
    type:
      structure: C_PerksActivities.PerksActivitiesPending
C_PerksActivities.GetPerksActivityChatLink:
  inputs:
  - name: perksActivityID
    type: number
  outputs:
  - name: link
    type: string
C_PerksActivities.GetPerksActivityInfo:
  inputs:
  - name: perksActivityID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_PerksActivities.PerksActivityInfo
C_PerksActivities.GetPerksUIThemePrefix:
  inputs: {}
  outputs:
  - name: kitPrefix
    type: string
C_PerksActivities.GetTrackedPerksActivities:
  inputs: {}
  outputs:
  - name: trackedPerksActivities
    type:
      structure: C_PerksActivities.PerksActivitiesTracked
C_PerksActivities.RemoveTrackedPerksActivity:
  inputs:
  - name: perksActivityID
    type: number
  outputs: {}
C_PerksProgram.ClearFrozenPerksVendorItem:
  inputs: {}
  outputs: {}
C_PerksProgram.CloseInteraction:
  inputs: {}
  outputs: {}
C_PerksProgram.GetAvailableCategoryIDs:
  inputs: {}
  outputs:
  - name: categoryIDs
    type:
      arrayof: number
C_PerksProgram.GetAvailableVendorItemIDs:
  inputs: {}
  outputs:
  - name: vendorItemIDs
    type:
      arrayof: number
C_PerksProgram.GetCategoryInfo:
  inputs:
  - name: categoryID
    type: number
  outputs:
  - name: categoryInfo
    type:
      structure: C_PerksProgram.PerksVendorCategoryInfo
C_PerksProgram.GetCurrencyAmount:
  inputs: {}
  outputs:
  - name: currencyAmount
    type: number
C_PerksProgram.GetDraggedPerksVendorItem:
  inputs: {}
  outputs:
  - name: perksVendorItemID
    type: number
C_PerksProgram.GetFrozenPerksVendorItemInfo:
  inputs: {}
  outputs:
  - name: vendorItemInfo
    type:
      structure: C_PerksProgram.PerksVendorItemInfo
C_PerksProgram.GetPendingChestRewards:
  inputs: {}
  outputs:
  - name: pendingRewards
    type:
      arrayof:
        structure: C_PerksProgram.PerksProgramPendingChestRewards
C_PerksProgram.GetPerksProgramItemDisplayInfo:
  inputs:
  - name: id
    type: number
  outputs:
  - name: item
    type:
      structure: C_PerksProgram.PerksProgramItemDisplayInfo
C_PerksProgram.GetTimeRemaining:
  inputs:
  - name: vendorItemID
    type: number
  outputs:
  - name: timeRemaining
    type: number
C_PerksProgram.GetVendorItemInfo:
  inputs:
  - name: vendorItemID
    type: number
  outputs:
  - name: vendorItemInfo
    type:
      structure: C_PerksProgram.PerksVendorItemInfo
C_PerksProgram.GetVendorItemInfoRefundTimeLeft:
  inputs:
  - name: vendorItemID
    type: number
  outputs:
  - name: refundTimeRemaining
    type: number
C_PerksProgram.IsFrozenPerksVendorItem:
  inputs:
  - name: perksVendorItemID
    type: number
  outputs:
  - name: isFrozen
    type: boolean
C_PerksProgram.ItemSelectedTelemetry:
  inputs:
  - name: perksVendorItemID
    type: number
  outputs: {}
C_PerksProgram.PickupPerksVendorItem:
  inputs:
  - name: perksVendorItemID
    type: number
  outputs: {}
C_PerksProgram.RequestPendingChestRewards:
  inputs: {}
  outputs: {}
C_PerksProgram.RequestPurchase:
  inputs:
  - name: perksVendorItemID
    type: number
  outputs: {}
C_PerksProgram.RequestRefund:
  inputs:
  - name: perksVendorItemID
    type: number
  outputs: {}
C_PerksProgram.ResetHeldItemDragAndDrop:
  inputs: {}
  outputs: {}
C_PerksProgram.SetFrozenPerksVendorItem:
  inputs: {}
  outputs: {}
C_PetBattles.AcceptPVPDuel: {}
C_PetBattles.AcceptQueuedPVPMatch: {}
C_PetBattles.CanAcceptQueuedPVPMatch: {}
C_PetBattles.CanActivePetSwapOut: {}
C_PetBattles.CancelPVPDuel: {}
C_PetBattles.CanPetSwapIn: {}
C_PetBattles.ChangePet: {}
C_PetBattles.DeclineQueuedPVPMatch: {}
C_PetBattles.ForfeitGame: {}
C_PetBattles.GetAbilityEffectInfo: {}
C_PetBattles.GetAbilityInfo: {}
C_PetBattles.GetAbilityInfoByID: {}
C_PetBattles.GetAbilityProcTurnIndex: {}
C_PetBattles.GetAbilityState: {}
C_PetBattles.GetAbilityStateModification: {}
C_PetBattles.GetActivePet:
  inputs:
  - name: petOwner
    type: number
  outputs:
  - name: petIndex
    type: number
C_PetBattles.GetAllEffectNames: {}
C_PetBattles.GetAllStates: {}
C_PetBattles.GetAttackModifier: {}
C_PetBattles.GetAuraInfo:
  inputs:
  - name: petOwner
    type: number
  - name: petIndex
    type: number
  - name: auraIndex
    type: number
  outputs:
  - name: auraID
    type: number
  - name: instanceID
    type: number
  - name: turnsRemaining
    type: number
  - name: isBuff
    type: boolean
C_PetBattles.GetBattleState: {}
C_PetBattles.GetBreedQuality:
  inputs:
  - name: petOwner
    type: number
  - name: slot
    type: number
  outputs:
  - name: quality
    type: number
C_PetBattles.GetDisplayID:
  outputs:
  - type: number
C_PetBattles.GetForfeitPenalty: {}
C_PetBattles.GetHealth:
  outputs:
  - type: number
C_PetBattles.GetIcon:
  inputs:
  - name: petOwner
    type: number
  - name: slot
    type: number
  outputs:
  - name: iconFileID
    type: number
C_PetBattles.GetLevel:
  outputs:
  - type: number
C_PetBattles.GetMaxHealth:
  outputs:
  - type: number
C_PetBattles.GetName:
  inputs:
  - name: petOwner
    type: number
  - name: slot
    type: number
  outputs:
  - name: customName
    type: string
  - name: speciesName
    type: string
C_PetBattles.GetNumAuras:
  inputs:
  - name: petOwner
    type: number
  - name: petIndex
    type: number
  outputs:
  - name: numAuras
    type: number
C_PetBattles.GetNumPets:
  outputs:
  - type: number
C_PetBattles.GetPetSpeciesID:
  inputs:
  - name: petOwner
    type: number
  - name: petIndex
    type: number
  outputs:
  - name: speciesID
    type: number
C_PetBattles.GetPetType:
  inputs:
  - name: petOwner
    type: number
  - name: petIndex
    type: number
  outputs:
  - name: currentPetType
    type: number
C_PetBattles.GetPlayerTrapAbility:
  inputs: {}
  outputs:
  - name: trapAbilityID
    type: number
C_PetBattles.GetPower: {}
C_PetBattles.GetPVPMatchmakingInfo: {}
C_PetBattles.GetSelectedAction: {}
C_PetBattles.GetSpeed:
  inputs:
  - name: petOwner
    type: number
  - name: petIndex
    type: number
  outputs:
  - name: speed
    type: number
C_PetBattles.GetStateValue: {}
C_PetBattles.GetTurnTimeInfo:
  inputs: {}
  outputs:
  - name: timeRemaining
    type: number
  - name: turnTime
    type: number
C_PetBattles.GetXP:
  inputs:
  - name: petOwner
    type: number
  - name: petIndex
    type: number
  outputs:
  - name: xp
    type: number
  - name: maxXp
    type: number
C_PetBattles.IsInBattle: {}
C_PetBattles.IsPlayerNPC:
  inputs: {}
  outputs:
  - name: isPlayerNPC
    type: boolean
C_PetBattles.IsSkipAvailable: {}
C_PetBattles.IsTrapAvailable: {}
C_PetBattles.IsWaitingOnOpponent: {}
C_PetBattles.IsWildBattle:
  inputs: {}
  outputs:
  - name: isWildBattle
    type: boolean
C_PetBattles.SetPendingReportBattlePetTarget: {}
C_PetBattles.SetPendingReportTargetFromUnit: {}
C_PetBattles.ShouldShowPetSelect: {}
C_PetBattles.SkipTurn: {}
C_PetBattles.StartPVPDuel: {}
C_PetBattles.StartPVPMatchmaking: {}
C_PetBattles.StopPVPMatchmaking: {}
C_PetBattles.UseAbility: {}
C_PetBattles.UseTrap: {}
C_PetInfo.GetPetTamersForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: petTamers
    type:
      arrayof:
        structure: C_PetInfo.PetTamerMapInfo
C_PetInfo.GetSpellForPetAction:
  inputs:
  - name: actionID
    type: number
  outputs:
  - name: spellID
    nilable: true
    type: number
C_PetJournal.CagePetByID: {}
C_PetJournal.ClearFanfare: {}
C_PetJournal.ClearRecentFanfares:
  inputs: {}
  outputs: {}
C_PetJournal.ClearSearchFilter: {}
C_PetJournal.FindPetIDByName: {}
C_PetJournal.GetBattlePetLink: {}
C_PetJournal.GetDisplayIDByIndex:
  inputs:
  - name: speciesID
    type: number
  - name: index
    type: number
  outputs:
  - name: displayID
    nilable: true
    type: number
C_PetJournal.GetDisplayProbabilityByIndex:
  inputs:
  - name: speciesID
    type: number
  - name: index
    type: number
  outputs:
  - name: displayProbability
    nilable: true
    type: number
C_PetJournal.GetNumCollectedInfo: {}
C_PetJournal.GetNumDisplays:
  inputs:
  - name: speciesID
    type: number
  outputs:
  - name: numDisplays
    nilable: true
    type: number
C_PetJournal.GetNumPets:
  inputs: {}
  outputs:
  - name: numPets
    type: number
  - name: numOwned
    type: number
C_PetJournal.GetNumPetsInJournal:
  inputs:
  - name: creatureID
    type: number
  outputs:
  - name: maxAllowed
    type: number
  - name: numPets
    type: number
C_PetJournal.GetNumPetsNeedingFanfare:
  outputs:
  - type: number
C_PetJournal.GetNumPetSources:
  outputs:
  - type: number
C_PetJournal.GetNumPetTypes: {}
C_PetJournal.GetOwnedBattlePetString: {}
C_PetJournal.GetPetAbilityInfo:
  inputs:
  - name: abilityID
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: petType
    type: number
C_PetJournal.GetPetAbilityList: {}
C_PetJournal.GetPetAbilityListTable:
  inputs:
  - name: speciesID
    type: number
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_PetJournal.PetAbilityLevelInfo
C_PetJournal.GetPetCooldownByGUID: {}
C_PetJournal.GetPetInfoByIndex: {}
C_PetJournal.GetPetInfoByItemID: {}
C_PetJournal.GetPetInfoByPetID: {}
C_PetJournal.GetPetInfoBySpeciesID:
  inputs:
  - type: number
  outputs:
  - type: string
  - type: string
  - type: number
  - type: number
  - type: string
  - type: string
  - type: boolean
  - type: boolean
  - type: boolean
  - type: boolean
  - type: boolean
  - type: number
C_PetJournal.GetPetInfoTableByPetID:
  inputs:
  - name: petID
    type: string
  outputs:
  - name: info
    type:
      structure: C_PetJournal.PetJournalPetInfo
C_PetJournal.GetPetLoadOutInfo:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: petID
    nilable: true
    type: string
  - name: ability1ID
    type: number
  - name: ability2ID
    type: number
  - name: ability3ID
    type: number
  - name: locked
    type: boolean
C_PetJournal.GetPetModelSceneInfoBySpeciesID: {}
C_PetJournal.GetPetSortParameter: {}
C_PetJournal.GetPetStats: {}
C_PetJournal.GetPetSummonInfo:
  inputs:
  - name: battlePetGUID
    type: string
  outputs:
  - name: isSummonable
    type: boolean
  - name: error
    type:
      enum: PetJournalError
  - name: errorText
    type: string
C_PetJournal.GetPetTeamAverageLevel: {}
C_PetJournal.GetSummonBattlePetCooldown:
  inputs: {}
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
C_PetJournal.GetSummonedPetGUID: {}
C_PetJournal.GetSummonRandomFavoritePetGUID: {}
C_PetJournal.HasFavoritePets:
  inputs: {}
  outputs:
  - name: hasFavorites
    type: boolean
C_PetJournal.IsFilterChecked: {}
C_PetJournal.IsFindBattleEnabled:
  inputs: {}
  outputs:
  - name: value
    type: boolean
C_PetJournal.IsJournalReadOnly: {}
C_PetJournal.IsJournalUnlocked: {}
C_PetJournal.IsPetSourceChecked: {}
C_PetJournal.IsPetTypeChecked: {}
C_PetJournal.IsUsingDefaultFilters:
  inputs: {}
  outputs:
  - name: isUsingDefaultFilters
    type: boolean
C_PetJournal.PetCanBeReleased: {}
C_PetJournal.PetIsCapturable: {}
C_PetJournal.PetIsFavorite: {}
C_PetJournal.PetIsHurt: {}
C_PetJournal.PetIsLockedForConvert: {}
C_PetJournal.PetIsRevoked: {}
C_PetJournal.PetIsSlotted: {}
C_PetJournal.PetIsSummonable:
  inputs:
  - name: battlePetGUID
    type: string
  outputs:
  - name: isSummonable
    type: boolean
C_PetJournal.PetIsTradable: {}
C_PetJournal.PetIsUsable: {}
C_PetJournal.PetNeedsFanfare: {}
C_PetJournal.PetUsesRandomDisplay:
  inputs:
  - name: speciesID
    type: number
  outputs:
  - name: usesRandomDisplay
    nilable: true
    type: boolean
C_PetJournal.PickupPet: {}
C_PetJournal.PickupSummonRandomPet: {}
C_PetJournal.ReleasePetByID: {}
C_PetJournal.SetAbility: {}
C_PetJournal.SetAllPetSourcesChecked: {}
C_PetJournal.SetAllPetTypesChecked: {}
C_PetJournal.SetCustomName: {}
C_PetJournal.SetDefaultFilters:
  inputs: {}
  outputs: {}
C_PetJournal.SetFavorite: {}
C_PetJournal.SetFilterChecked: {}
C_PetJournal.SetPetLoadOutInfo: {}
C_PetJournal.SetPetSortParameter: {}
C_PetJournal.SetPetSourceChecked: {}
C_PetJournal.SetPetTypeFilter: {}
C_PetJournal.SetSearchFilter: {}
C_PetJournal.SpellTargetBattlePet:
  inputs:
  - name: battlePetGUID
    type: string
  outputs: {}
C_PetJournal.SummonPetByGUID: {}
C_PetJournal.SummonRandomPet:
  inputs:
  - name: onlyFavorites
    type: boolean
  outputs: {}
C_Ping.GetContextualPingTypeForUnit:
  inputs:
  - name: targetUnit
    nilable: true
    type: string
  outputs:
  - name: type
    type:
      enum: PingSubjectType
C_Ping.SendMacroPing:
  inputs:
  - name: type
    nilable: true
    type:
      enum: PingSubjectType
  - name: targetToken
    nilable: true
    type: string
  outputs: {}
C_Ping.TogglePingListener:
  inputs:
  - name: down
    type: boolean
  outputs: {}
C_PingSecure.ClearPendingPingInfo:
  inputs: {}
  outputs: {}
C_PingSecure.CreateFrame:
  inputs: {}
  outputs: {}
C_PingSecure.DisplayError:
  inputs:
  - name: error
    type: string
  outputs: {}
C_PingSecure.GetCooldownInfo:
  inputs: {}
  outputs:
  - name: cooldownInfo
    type:
      structure: PingCooldownInfo
C_PingSecure.GetDefaultPingOptions:
  inputs: {}
  outputs:
  - name: pingTypes
    type:
      arrayof:
        structure: PingTypeInfo
C_PingSecure.GetTargetPingReceiver:
  inputs:
  - name: mousePosX
    type: number
  - name: mousePosY
    type: number
  outputs:
  - name: frame
    type: table
C_PingSecure.GetTargetWorldPing:
  inputs:
  - name: mousePosX
    type: number
  - name: mousePosY
    type: number
  outputs:
  - name: foundTarget
    type: boolean
C_PingSecure.GetTargetWorldPingAndSend:
  inputs: {}
  outputs:
  - name: result
    type:
      structure: ContextualWorldPingResult
C_PingSecure.GetTextureKitForType:
  inputs:
  - name: type
    type:
      enum: PingSubjectType
  outputs:
  - name: uiTextureKitID
    type: string
C_PingSecure.SendPing:
  inputs:
  - name: type
    type:
      enum: PingSubjectType
  - name: target
    nilable: true
    type: string
  outputs:
  - name: result
    type:
      enum: PingResult
C_PingSecure.SetPendingPingOffScreenCallback:
  inputs:
  - name: cb
    type: function
  outputs: {}
C_PingSecure.SetPingCooldownStartedCallback:
  inputs:
  - name: cb
    type: function
  outputs: {}
C_PingSecure.SetPingPinFrameAddedCallback:
  inputs:
  - name: cb
    type: function
  outputs: {}
C_PingSecure.SetPingPinFrameRemovedCallback:
  inputs:
  - name: cb
    type: function
  outputs: {}
C_PingSecure.SetPingPinFrameScreenClampStateUpdatedCallback:
  inputs:
  - name: cb
    type: function
  outputs: {}
C_PingSecure.SetPingRadialWheelCreatedCallback:
  inputs:
  - name: cb
    type: function
  outputs: {}
C_PingSecure.SetSendMacroPingCallback:
  inputs:
  - name: cb
    type: function
  outputs: {}
C_PingSecure.SetTogglePingListenerCallback:
  inputs:
  - name: cb
    type: function
  outputs: {}
C_PlayerChoice.GetCurrentPlayerChoiceInfo:
  inputs: {}
  outputs:
  - name: choiceInfo
    type:
      structure: C_PlayerChoice.PlayerChoiceInfo
C_PlayerChoice.GetNumRerolls:
  inputs: {}
  outputs:
  - name: numRerolls
    type: number
C_PlayerChoice.GetRemainingTime:
  inputs: {}
  outputs:
  - name: remainingTime
    nilable: true
    type: number
C_PlayerChoice.IsWaitingForPlayerChoiceResponse:
  inputs: {}
  outputs:
  - name: isWaitingForResponse
    type: boolean
C_PlayerChoice.OnUIClosed:
  inputs: {}
  outputs: {}
C_PlayerChoice.RequestRerollPlayerChoice:
  inputs: {}
  outputs: {}
C_PlayerChoice.SendPlayerChoiceResponse:
  inputs:
  - name: responseID
    type: number
  outputs: {}
C_PlayerInfo.CanPlayerEnterChromieTime:
  inputs: {}
  outputs:
  - name: canEnter
    type: boolean
C_PlayerInfo.CanPlayerUseAreaLoot:
  inputs: {}
  outputs:
  - name: canUseAreaLoot
    type: boolean
C_PlayerInfo.CanPlayerUseMountEquipment:
  inputs: {}
  outputs:
  - name: canUseMountEquipment
    type: boolean
  - name: failureReason
    type: string
C_PlayerInfo.CanUseItem:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: isUseable
    type: boolean
C_PlayerInfo.GetAlternateFormInfo:
  inputs: {}
  outputs:
  - name: hasAlternateForm
    type: boolean
  - name: inAlternateForm
    type: boolean
C_PlayerInfo.GetClass:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: className
    nilable: true
    type: string
  - name: classFilename
    nilable: true
    type: string
  - name: classID
    nilable: true
    type: number
C_PlayerInfo.GetContentDifficultyCreatureForPlayer:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: difficulty
    type:
      enum: RelativeContentDifficulty
C_PlayerInfo.GetContentDifficultyQuestForPlayer:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: difficulty
    type:
      enum: RelativeContentDifficulty
C_PlayerInfo.GetDisplayID:
  inputs: {}
  outputs:
  - name: displayID
    type: number
C_PlayerInfo.GetGlidingInfo:
  inputs: {}
  outputs:
  - name: isGliding
    type: boolean
  - name: canGlide
    type: boolean
  - name: forwardSpeed
    type: number
C_PlayerInfo.GetInstancesUnlockedAtLevel:
  inputs:
  - name: level
    type: number
  - name: isRaid
    type: boolean
  outputs:
  - name: dungeonID
    type:
      arrayof: number
C_PlayerInfo.GetName:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: name
    nilable: true
    type: string
C_PlayerInfo.GetNativeDisplayID:
  inputs: {}
  outputs:
  - name: nativeDisplayID
    type: number
C_PlayerInfo.GetPetStableCreatureDisplayInfoID:
  inputs:
  - name: index
    type: number
  outputs:
  - name: creatureDisplayInfoID
    type: number
C_PlayerInfo.GetPlayerCharacterData:
  inputs: {}
  outputs:
  - name: characterData
    type:
      structure: PlayerInfoCharacterData
C_PlayerInfo.GetPlayerMythicPlusRatingSummary:
  inputs:
  - name: playerToken
    type: unit
  outputs:
  - name: ratingSummary
    type:
      structure: C_PlayerInfo.MythicPlusRatingSummary
C_PlayerInfo.GetRace:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: raceID
    nilable: true
    type: number
C_PlayerInfo.GetSex:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: sex
    nilable: true
    type: number
C_PlayerInfo.GUIDIsPlayer:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: isPlayer
    type: boolean
C_PlayerInfo.HasVisibleInvSlot:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: isVisible
    type: boolean
C_PlayerInfo.IsConnected:
  inputs:
  - name: playerLocation
    nilable: true
    type:
      structure: PlayerLocation
  outputs:
  - name: isConnected
    nilable: true
    type: boolean
C_PlayerInfo.IsDisplayRaceNative:
  inputs: {}
  outputs:
  - name: isDisplayRaceNative
    type: boolean
C_PlayerInfo.IsExpansionLandingPageUnlockedForPlayer:
  inputs:
  - name: expansionID
    type: number
  outputs:
  - name: isUnlocked
    type: boolean
C_PlayerInfo.IsMirrorImage:
  inputs: {}
  outputs:
  - name: isMirrorImage
    type: boolean
C_PlayerInfo.IsPlayerEligibleForNPE:
  inputs: {}
  outputs:
  - name: isEligible
    type: boolean
  - name: failureReason
    type: string
C_PlayerInfo.IsPlayerEligibleForNPEv2:
  inputs: {}
  outputs:
  - name: isEligible
    type: boolean
  - name: failureReason
    type: string
C_PlayerInfo.IsPlayerInChromieTime:
  inputs: {}
  outputs:
  - name: inChromieTime
    type: boolean
C_PlayerInfo.IsPlayerNPERestricted:
  inputs: {}
  outputs:
  - name: isRestricted
    type: boolean
C_PlayerInfo.IsTradingPostAvailable:
  inputs: {}
  outputs:
  - name: isAvailable
    type: boolean
C_PlayerInfo.IsTravelersLogAvailable:
  inputs: {}
  outputs:
  - name: isAvailable
    type: boolean
C_PlayerInfo.UnitIsSameServer:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: unitIsSameServer
    type: boolean
C_PlayerInteractionManager.ClearInteraction:
  inputs:
  - name: type
    nilable: true
    type:
      enum: PlayerInteractionType
  outputs: {}
C_PlayerInteractionManager.ConfirmationInteraction:
  inputs:
  - name: type
    nilable: true
    type:
      enum: PlayerInteractionType
  outputs: {}
C_PlayerInteractionManager.InteractUnit:
  inputs:
  - name: unit
    type: string
  - default: false
    name: exactMatch
    type: boolean
  - default: true
    name: looseTargeting
    type: boolean
  outputs:
  - name: success
    type: boolean
C_PlayerInteractionManager.IsInteractingWithNpcOfType:
  inputs:
  - name: type
    type:
      enum: PlayerInteractionType
  outputs:
  - name: interacting
    type: boolean
C_PlayerInteractionManager.IsReplacingUnit:
  inputs: {}
  outputs:
  - name: replacing
    type: boolean
C_PlayerInteractionManager.IsValidNPCInteraction:
  inputs:
  - name: type
    type:
      enum: PlayerInteractionType
  outputs:
  - name: isValidInteraction
    type: boolean
C_PlayerInteractionManager.ReopenInteraction:
  inputs: {}
  outputs: {}
C_PlayerMentorship.GetMentorLevelRequirement:
  inputs: {}
  outputs:
  - name: level
    nilable: true
    type: number
C_PlayerMentorship.GetMentorRequirements:
  inputs: {}
  outputs:
  - name: achievementIDs
    type:
      arrayof: number
  - name: optionalAchievementIDs
    type:
      arrayof: number
  - name: optionalCompleteAtLeastCount
    type: number
C_PlayerMentorship.GetMentorshipStatus:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: status
    type:
      enum: PlayerMentorshipStatus
C_PlayerMentorship.IsActivePlayerConsideredNewcomer:
  inputs: {}
  outputs:
  - name: isConsideredNewcomer
    type: boolean
C_PlayerMentorship.IsMentorRestricted:
  inputs: {}
  outputs:
  - name: isRestricted
    type: boolean
C_ProfSpecs.CanRefundPath:
  inputs:
  - name: pathID
    type: number
  - name: configID
    type: number
  outputs:
  - name: canRefund
    type: boolean
C_ProfSpecs.CanUnlockTab:
  inputs:
  - name: tabTreeID
    type: number
  - name: configID
    type: number
  outputs:
  - name: canUnlock
    type: boolean
C_ProfSpecs.GetChildrenForPath:
  inputs:
  - name: pathID
    type: number
  outputs:
  - name: childIDs
    type:
      arrayof: number
C_ProfSpecs.GetConfigIDForSkillLine:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: configID
    type: number
C_ProfSpecs.GetCurrencyInfoForSkillLine:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: info
    type:
      structure: SpecializationCurrencyInfo
C_ProfSpecs.GetDefaultSpecSkillLine:
  inputs: {}
  outputs:
  - name: defaultSpecSkillLine
    nilable: true
    type: number
C_ProfSpecs.GetDescriptionForPath:
  inputs:
  - name: pathID
    type: number
  outputs:
  - name: description
    type: string
C_ProfSpecs.GetDescriptionForPerk:
  inputs:
  - name: perkID
    type: number
  outputs:
  - name: description
    type: string
C_ProfSpecs.GetEntryIDForPerk:
  inputs:
  - name: perkID
    type: number
  outputs:
  - name: entryID
    type: number
C_ProfSpecs.GetNewSpecReminderProfName:
  inputs: {}
  outputs:
  - name: profName
    nilable: true
    type: string
C_ProfSpecs.GetPerksForPath:
  inputs:
  - name: pathID
    type: number
  outputs:
  - name: perkInfos
    type:
      arrayof:
        structure: SpecPerkInfo
C_ProfSpecs.GetRootPathForTab:
  inputs:
  - name: tabTreeID
    type: number
  outputs:
  - name: rootPathID
    nilable: true
    type: number
C_ProfSpecs.GetSourceTextForPath:
  inputs:
  - name: pathID
    type: number
  - name: configID
    type: number
  outputs:
  - name: sourceText
    type: string
C_ProfSpecs.GetSpecTabIDsForSkillLine:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: specTabIDs
    type:
      arrayof: number
C_ProfSpecs.GetSpecTabInfo:
  inputs: {}
  outputs:
  - name: specTabInfo
    type:
      structure: SpecializationTabInfo
C_ProfSpecs.GetSpendCurrencyForPath:
  inputs:
  - name: pathID
    type: number
  outputs:
  - name: currencyID
    nilable: true
    type: number
C_ProfSpecs.GetSpendEntryForPath:
  inputs:
  - name: pathID
    type: number
  outputs:
  - name: entryID
    type: number
C_ProfSpecs.GetStateForPath:
  inputs:
  - name: pathID
    type: number
  - name: configID
    type: number
  outputs:
  - name: state
    type:
      enum: ProfessionsSpecPathState
C_ProfSpecs.GetStateForPerk:
  inputs:
  - name: perkID
    type: number
  - name: configID
    type: number
  outputs:
  - name: state
    type:
      enum: ProfessionsSpecPerkState
C_ProfSpecs.GetStateForTab:
  inputs:
  - name: tabTreeID
    type: number
  - name: configID
    type: number
  outputs:
  - name: tabInfo
    type:
      enum: ProfessionsSpecTabState
C_ProfSpecs.GetTabInfo:
  inputs:
  - name: tabTreeID
    type: number
  outputs:
  - name: tabInfo
    nilable: true
    type:
      structure: ProfTabInfo
C_ProfSpecs.GetUnlockEntryForPath:
  inputs:
  - name: pathID
    type: number
  outputs:
  - name: entryID
    type: number
C_ProfSpecs.GetUnlockRankForPerk:
  inputs:
  - name: perkID
    type: number
  outputs:
  - name: unlockRank
    nilable: true
    type: number
C_ProfSpecs.ShouldShowPointsReminder:
  inputs: {}
  outputs:
  - name: showReminder
    type: boolean
C_ProfSpecs.ShouldShowPointsReminderForSkillLine:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: showReminder
    type: boolean
C_ProfSpecs.ShouldShowSpecTab:
  inputs: {}
  outputs:
  - name: showSpecTab
    type: boolean
C_ProfSpecs.SkillLineHasSpecialization:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: hasSpecialization
    type: boolean
C_PvP.ArePvpTalentsUnlocked:
  inputs: {}
  outputs:
  - name: arePvpTalentsUnlocked
    type: boolean
C_PvP.CanDisplayDamage:
  inputs: {}
  outputs:
  - name: canDisplay
    type: boolean
C_PvP.CanDisplayDeaths:
  inputs: {}
  outputs:
  - name: canDisplay
    type: boolean
C_PvP.CanDisplayHealing:
  inputs: {}
  outputs:
  - name: canDisplay
    type: boolean
C_PvP.CanDisplayHonorableKills:
  inputs: {}
  outputs:
  - name: canDisplay
    type: boolean
C_PvP.CanDisplayKillingBlows:
  inputs: {}
  outputs:
  - name: canDisplay
    type: boolean
C_PvP.CanPlayerUseRatedPVPUI:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_PvP.CanToggleWarMode:
  inputs:
  - name: toggle
    type: boolean
  outputs:
  - name: canTogglePvP
    type: boolean
C_PvP.CanToggleWarModeInArea:
  inputs: {}
  outputs:
  - name: canTogglePvPInArea
    type: boolean
C_PvP.DoesMatchOutcomeAffectRating:
  inputs: {}
  outputs:
  - name: doesAffect
    type: boolean
C_PvP.GetActiveBrawlInfo:
  inputs: {}
  outputs:
  - name: brawlInfo
    nilable: true
    type:
      structure: C_PvP.PvpBrawlInfo
C_PvP.GetActiveMatchBracket:
  inputs: {}
  outputs:
  - name: bracket
    type: number
C_PvP.GetActiveMatchDuration:
  inputs: {}
  outputs:
  - name: seconds
    type: number
C_PvP.GetActiveMatchState:
  inputs: {}
  outputs:
  - name: state
    type:
      enum: PvPMatchState
C_PvP.GetActiveMatchWinner:
  inputs: {}
  outputs:
  - name: winner
    type: number
C_PvP.GetArenaCrowdControlInfo:
  inputs:
  - name: playerToken
    type: unit
  outputs:
  - name: spellID
    type: number
  - name: startTime
    type: number
  - name: duration
    type: number
C_PvP.GetArenaRewards:
  inputs:
  - name: teamSize
    type: number
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - name: itemRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldItemReward
  - name: currencyRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldCurrencyReward
  - name: roleShortageBonus
    nilable: true
    type:
      structure: C_PvP.RoleShortageReward
C_PvP.GetArenaSkirmishRewards:
  inputs: {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - name: itemRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldItemReward
  - name: currencyRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldCurrencyReward
  - name: roleShortageBonus
    nilable: true
    type:
      structure: C_PvP.RoleShortageReward
C_PvP.GetAssignedSpecForBattlefieldQueue:
  inputs:
  - name: queueID
    type: number
  outputs:
  - name: specializationID
    nilable: true
    type: number
C_PvP.GetAvailableBrawlInfo:
  inputs: {}
  outputs:
  - name: brawlInfo
    nilable: true
    type:
      structure: C_PvP.PvpBrawlInfo
C_PvP.GetBattlefieldFlagPosition:
  inputs:
  - name: flagIndex
    type: number
  - name: uiMapId
    type: number
  outputs:
  - name: uiPosx
    nilable: true
    type: number
  - name: uiPosy
    nilable: true
    type: number
  - name: flagTexture
    type: number
C_PvP.GetBattlefieldVehicleInfo:
  inputs:
  - name: vehicleIndex
    type: number
  - name: uiMapID
    type: number
  outputs:
  - name: info
    type:
      structure: C_PvP.BattlefieldVehicleInfo
C_PvP.GetBattlefieldVehicles:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: vehicles
    type:
      arrayof:
        structure: C_PvP.BattlefieldVehicleInfo
C_PvP.GetBrawlRewards:
  inputs:
  - name: brawlType
    type:
      enum: BrawlType
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - name: itemRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldItemReward
  - name: currencyRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldCurrencyReward
  - name: roleShortageBonus
    nilable: true
    type:
      structure: C_PvP.RoleShortageReward
  - name: hasWon
    type: boolean
C_PvP.GetCustomVictoryStatID:
  inputs: {}
  outputs:
  - name: statID
    type: number
C_PvP.GetGlobalPvpScalingInfoForSpecID:
  inputs:
  - name: specializationID
    type: number
  outputs:
  - name: pvpScalingData
    type:
      arrayof:
        structure: C_PvP.PvpScalingData
C_PvP.GetHonorRewardInfo:
  inputs:
  - name: honorLevel
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_PvP.HonorRewardInfo
C_PvP.GetLevelUpBattlegrounds:
  inputs:
  - name: level
    type: number
  outputs:
  - name: battlefields
    type:
      arrayof:
        structure: C_PvP.LevelUpBattlegroundInfo
C_PvP.GetMatchPVPStatColumn:
  inputs:
  - name: pvpStatID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_PvP.MatchPVPStatColumn
C_PvP.GetMatchPVPStatColumns:
  inputs: {}
  outputs:
  - name: columns
    type:
      arrayof:
        structure: C_PvP.MatchPVPStatColumn
C_PvP.GetNextHonorLevelForReward:
  inputs:
  - name: honorLevel
    type: number
  outputs:
  - name: nextHonorLevelWithReward
    nilable: true
    type: number
C_PvP.GetOutdoorPvPWaitTime:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: pvpWaitTime
    type: number
C_PvP.GetPersonalRatedSoloShuffleSpecStats:
  inputs: {}
  outputs:
  - name: specStats
    nilable: true
    type:
      structure: C_PvP.RatedSoloShuffleSpecStats
C_PvP.GetPostMatchCurrencyRewards:
  inputs: {}
  outputs:
  - name: rewards
    type:
      arrayof:
        structure: C_PvP.PVPPostMatchCurrencyReward
C_PvP.GetPostMatchItemRewards:
  inputs: {}
  outputs:
  - name: rewards
    type:
      arrayof:
        structure: C_PvP.PVPPostMatchItemReward
C_PvP.GetPVPActiveMatchPersonalRatedInfo:
  inputs: {}
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_PvP.PVPPersonalRatedInfo
C_PvP.GetPVPActiveRatedMatchDeserterPenalty:
  inputs: {}
  outputs:
  - name: deserterPenalty
    nilable: true
    type:
      structure: C_PvP.RatedMatchDeserterPenalty
C_PvP.GetPVPSeasonRewardAchievementID:
  inputs: {}
  outputs:
  - name: achievementID
    type: number
C_PvP.GetPvpTalentsUnlockedLevel:
  inputs: {}
  outputs:
  - name: unlockLevel
    type: number
C_PvP.GetPvpTierID:
  inputs:
  - name: tierEnum
    type: number
  - name: bracketEnum
    type: number
  outputs:
  - name: id
    nilable: true
    type: number
C_PvP.GetPvpTierInfo:
  inputs:
  - name: tierID
    type: number
  outputs:
  - name: pvpTierInfo
    nilable: true
    type:
      structure: C_PvP.PvpTierInfo
C_PvP.GetRandomBGInfo:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: C_PvP.RandomBGInfo
C_PvP.GetRandomBGRewards:
  inputs: {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - name: itemRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldItemReward
  - name: currencyRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldCurrencyReward
  - name: roleShortageBonus
    nilable: true
    type:
      structure: C_PvP.RoleShortageReward
C_PvP.GetRandomEpicBGInfo:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: C_PvP.RandomBGInfo
C_PvP.GetRandomEpicBGRewards:
  inputs: {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - name: itemRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldItemReward
  - name: currencyRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldCurrencyReward
  - name: roleShortageBonus
    nilable: true
    type:
      structure: C_PvP.RoleShortageReward
C_PvP.GetRatedBGRewards:
  inputs: {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - name: itemRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldItemReward
  - name: currencyRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldCurrencyReward
  - name: roleShortageBonus
    nilable: true
    type:
      structure: C_PvP.RoleShortageReward
C_PvP.GetRatedSoloShuffleMinItemLevel:
  inputs: {}
  outputs:
  - name: minItemLevel
    type: number
C_PvP.GetRatedSoloShuffleRewards:
  inputs: {}
  outputs:
  - name: honor
    type: number
  - name: experience
    type: number
  - name: itemRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldItemReward
  - name: currencyRewards
    nilable: true
    type:
      arrayof:
        structure: C_PvP.BattlefieldCurrencyReward
  - name: roleShortageBonus
    nilable: true
    type:
      structure: C_PvP.RoleShortageReward
C_PvP.GetRewardItemLevelsByTierEnum:
  inputs:
  - name: pvpTierEnum
    type: number
  outputs:
  - name: activityItemLevel
    type: number
  - name: weeklyItemLevel
    type: number
C_PvP.GetScoreInfo:
  inputs:
  - name: offsetIndex
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_PvP.PVPScoreInfo
C_PvP.GetScoreInfoByPlayerGuid:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_PvP.PVPScoreInfo
C_PvP.GetSeasonBestInfo:
  inputs: {}
  outputs:
  - name: tierID
    type: number
  - name: nextTierID
    nilable: true
    type: number
C_PvP.GetSkirmishInfo:
  inputs:
  - name: pvpBracket
    type: number
  outputs:
  - name: battlemasterListInfo
    type:
      structure: C_PvP.BattlemasterListInfo
C_PvP.GetSoloRBGMinItemLevel:
  inputs: {}
  outputs:
  - name: minItemLevel
    type: number
C_PvP.GetSpecialEventBrawlInfo:
  inputs: {}
  outputs:
  - name: brawlInfo
    nilable: true
    type:
      structure: C_PvP.PvpBrawlInfo
C_PvP.GetTeamInfo:
  inputs:
  - name: factionIndex
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_PvP.PVPTeamInfo
C_PvP.GetUIDisplaySeason:
  inputs: {}
  outputs:
  - name: uiDisplaySeason
    type: number
C_PvP.GetWarModeRewardBonus:
  inputs: {}
  outputs:
  - name: rewardBonus
    type: number
C_PvP.GetWarModeRewardBonusDefault:
  inputs: {}
  outputs:
  - name: defaultBonus
    type: number
C_PvP.GetWeeklyChestInfo:
  inputs: {}
  outputs:
  - name: rewardAchieved
    type: boolean
  - name: lastWeekRewardAchieved
    type: boolean
  - name: lastWeekRewardClaimed
    type: boolean
  - name: pvpTierMaxFromWins
    type: number
C_PvP.HasArenaSkirmishWinToday:
  inputs: {}
  outputs:
  - name: hasArenaSkirmishWinToday
    type: boolean
C_PvP.IsActiveBattlefield:
  inputs: {}
  outputs:
  - name: isActiveBattlefield
    type: boolean
C_PvP.IsActiveMatchRegistered:
  inputs: {}
  outputs:
  - name: registered
    type: boolean
C_PvP.IsArena:
  inputs: {}
  outputs:
  - name: isArena
    type: boolean
C_PvP.IsBattleground:
  inputs: {}
  outputs:
  - name: isBattleground
    type: boolean
C_PvP.IsBattlegroundEnlistmentBonusActive:
  inputs: {}
  outputs:
  - name: battlegroundActive
    type: boolean
  - name: brawlActive
    type: boolean
C_PvP.IsBrawlSoloRBG:
  inputs: {}
  outputs:
  - name: isBrawlSoloRBG
    type: boolean
C_PvP.IsBrawlSoloShuffle:
  inputs: {}
  outputs:
  - name: isBrawlSoloShuffle
    type: boolean
C_PvP.IsInBrawl:
  inputs: {}
  outputs:
  - name: isInBrawl
    type: boolean
C_PvP.IsInRatedMatchWithDeserterPenalty:
  inputs: {}
  outputs:
  - name: isInRatedMatchWithDeserterPenalty
    type: boolean
C_PvP.IsMatchActive:
  inputs: {}
  outputs:
  - name: isActive
    type: boolean
C_PvP.IsMatchComplete:
  inputs: {}
  outputs:
  - name: isComplete
    type: boolean
C_PvP.IsMatchConsideredArena:
  inputs: {}
  outputs:
  - name: asArena
    type: boolean
C_PvP.IsMatchFactional:
  inputs: {}
  outputs:
  - name: isFactional
    type: boolean
C_PvP.IsPVPMap:
  inputs: {}
  outputs:
  - name: isPVPMap
    type: boolean
C_PvP.IsRatedArena:
  inputs: {}
  outputs:
  - name: isRatedArena
    type: boolean
C_PvP.IsRatedBattleground:
  inputs: {}
  outputs:
  - name: isRatedBattleground
    type: boolean
C_PvP.IsRatedMap:
  inputs: {}
  outputs:
  - name: isRatedMap
    type: boolean
C_PvP.IsRatedSoloShuffle:
  inputs: {}
  outputs:
  - name: isRatedSoloShuffle
    type: boolean
C_PvP.IsSoloRBG:
  inputs: {}
  outputs:
  - name: isSoloRBG
    type: boolean
C_PvP.IsSoloShuffle:
  inputs: {}
  outputs:
  - name: isSoloShuffle
    type: boolean
C_PvP.IsWarModeActive:
  inputs: {}
  outputs:
  - name: warModeActive
    type: boolean
C_PvP.IsWarModeDesired:
  inputs: {}
  outputs:
  - name: warModeDesired
    type: boolean
C_PvP.IsWarModeFeatureEnabled:
  inputs: {}
  outputs:
  - name: warModeEnabled
    type: boolean
C_PvP.JoinBrawl:
  inputs:
  - default: false
    name: isSpecialBrawl
    type: boolean
  outputs: {}
C_PvP.RequestCrowdControlSpell:
  inputs:
  - name: playerToken
    type: unit
  outputs: {}
C_PvP.SetWarModeDesired:
  inputs:
  - name: warModeDesired
    type: boolean
  outputs: {}
C_PvP.ToggleWarMode:
  inputs: {}
  outputs: {}
C_QuestInfoSystem.GetQuestRewardSpellInfo:
  inputs:
  - name: questID
    nilable: true
    type: number
  - name: spellID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_QuestInfoSystem.QuestRewardSpellInfo
C_QuestInfoSystem.GetQuestRewardSpells:
  inputs:
  - name: questID
    nilable: true
    type: number
  outputs:
  - name: spellIDs
    type:
      arrayof: number
C_QuestInfoSystem.GetQuestShouldToastCompletion:
  inputs:
  - name: questID
    nilable: true
    type: number
  outputs:
  - name: shouldToast
    type: boolean
C_QuestInfoSystem.HasQuestRewardSpells:
  inputs:
  - name: questID
    nilable: true
    type: number
  outputs:
  - name: hasRewardSpells
    type: boolean
C_QuestItemUse.CanUseQuestItemOnObject:
  inputs:
  - name: item
    type:
      structure: ItemLocation
  - name: unit
    type: unit
  - name: checkRange
    nilable: true
    type: boolean
  outputs:
  - name: canUse
    type: boolean
C_QuestLine.GetAvailableQuestLines:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: questLines
    type:
      arrayof:
        structure: C_QuestLine.QuestLineInfo
C_QuestLine.GetForceVisibleQuests:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: questIDs
    type:
      arrayof: number
C_QuestLine.GetQuestLineInfo:
  inputs:
  - name: questID
    type: number
  - name: uiMapID
    type: number
  outputs:
  - name: questLineInfo
    nilable: true
    type:
      structure: C_QuestLine.QuestLineInfo
C_QuestLine.GetQuestLineQuests:
  inputs:
  - name: questLineID
    type: number
  outputs:
  - name: questIDs
    type:
      arrayof: number
C_QuestLine.IsComplete:
  inputs:
  - name: questLineID
    type: number
  outputs:
  - name: isComplete
    type: boolean
C_QuestLine.RequestQuestLinesForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs: {}
C_QuestLog.AbandonQuest:
  inputs: {}
  outputs: {}
C_QuestLog.AddQuestWatch:
  inputs:
  - name: questID
    type: number
  - name: watchType
    nilable: true
    type:
      enum: QuestWatchType
  outputs:
  - name: wasWatched
    type: boolean
C_QuestLog.AddWorldQuestWatch:
  inputs:
  - name: questID
    type: number
  - name: watchType
    nilable: true
    type:
      enum: QuestWatchType
  outputs:
  - name: wasWatched
    type: boolean
C_QuestLog.CanAbandonQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: canAbandon
    type: boolean
C_QuestLog.DoesQuestAwardReputationWithFaction:
  inputs:
  - name: questID
    type: number
  - name: factionID
    type: number
  outputs:
  - name: awardsReputation
    type: boolean
C_QuestLog.GetAbandonQuest:
  inputs: {}
  outputs:
  - name: questID
    type: number
C_QuestLog.GetAbandonQuestItems:
  inputs: {}
  outputs:
  - name: itemIDs
    type:
      arrayof: number
C_QuestLog.GetActiveThreatMaps:
  inputs: {}
  outputs:
  - name: uiMapIDs
    type:
      arrayof: number
C_QuestLog.GetAllCompletedQuestIDs:
  inputs: {}
  outputs:
  - name: quests
    type:
      arrayof: number
C_QuestLog.GetBountiesForMapID:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: bounties
    nilable: true
    type:
      arrayof:
        structure: BountyInfo
C_QuestLog.GetBountySetInfoForMapID:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: displayLocation
    type:
      enum: MapOverlayDisplayLocation
  - name: lockQuestID
    type: number
  - name: bountySetID
    type: number
  - name: isActivitySet
    type: boolean
C_QuestLog.GetDistanceSqToQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: distanceSq
    type: number
  - name: onContinent
    type: boolean
C_QuestLog.GetInfo:
  inputs:
  - name: questLogIndex
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_QuestLog.QuestInfo
C_QuestLog.GetLogIndexForQuestID:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: questLogIndex
    nilable: true
    type: number
C_QuestLog.GetMapForQuestPOIs:
  inputs: {}
  outputs:
  - name: uiMapID
    type: number
C_QuestLog.GetMaxNumQuests:
  inputs: {}
  outputs:
  - name: maxNumQuests
    type: number
C_QuestLog.GetMaxNumQuestsCanAccept:
  inputs: {}
  outputs:
  - name: maxNumQuestsCanAccept
    type: number
C_QuestLog.GetNextWaypoint:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: mapID
    type: number
  - name: x
    type: number
  - name: y
    type: number
C_QuestLog.GetNextWaypointForMap:
  inputs:
  - name: questID
    type: number
  - name: uiMapID
    type: number
  outputs:
  - name: x
    type: number
  - name: y
    type: number
C_QuestLog.GetNextWaypointText:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: waypointText
    type: string
C_QuestLog.GetNumQuestLogEntries:
  inputs: {}
  outputs:
  - name: numShownEntries
    type: number
  - name: numQuests
    type: number
C_QuestLog.GetNumQuestObjectives:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: leaderboardCount
    type: number
C_QuestLog.GetNumQuestWatches:
  inputs: {}
  outputs:
  - name: numQuestWatches
    type: number
C_QuestLog.GetNumWorldQuestWatches:
  inputs: {}
  outputs:
  - name: numQuestWatches
    type: number
C_QuestLog.GetQuestAdditionalHighlights:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: uiMapID
    type: number
  - name: worldQuests
    type: boolean
  - name: worldQuestsElite
    type: boolean
  - name: dungeons
    type: boolean
  - name: treasures
    type: boolean
C_QuestLog.GetQuestDetailsTheme:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: theme
    nilable: true
    type:
      structure: C_QuestLog.QuestTheme
C_QuestLog.GetQuestDifficultyLevel:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: level
    type: number
C_QuestLog.GetQuestIDForLogIndex:
  inputs:
  - name: questLogIndex
    type: number
  outputs:
  - name: questID
    nilable: true
    type: number
C_QuestLog.GetQuestIDForQuestWatchIndex:
  inputs:
  - name: questWatchIndex
    type: number
  outputs:
  - name: questID
    nilable: true
    type: number
C_QuestLog.GetQuestIDForWorldQuestWatchIndex:
  inputs:
  - name: questWatchIndex
    type: number
  outputs:
  - name: questID
    nilable: true
    type: number
C_QuestLog.GetQuestLogMajorFactionReputationRewards:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: reputationRewards
    type:
      arrayof:
        structure: QuestReputationRewardInfo
C_QuestLog.GetQuestLogPortraitGiver:
  inputs:
  - name: questLogIndex
    nilable: true
    type: number
  outputs:
  - name: portraitGiver
    type: number
  - name: portraitGiverText
    type: string
  - name: portraitGiverName
    type: string
  - name: portraitGiverMount
    type: number
  - name: portraitGiverModelSceneID
    nilable: true
    type: number
C_QuestLog.GetQuestObjectives:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: objectives
    type:
      arrayof:
        structure: C_QuestLog.QuestObjectiveInfo
C_QuestLog.GetQuestsOnMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: quests
    type:
      arrayof:
        structure: C_QuestLog.QuestOnMapInfo
C_QuestLog.GetQuestTagInfo:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: C_QuestLog.QuestTagInfo
C_QuestLog.GetQuestType:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: questType
    nilable: true
    type: number
C_QuestLog.GetQuestWatchType:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: watchType
    nilable: true
    type:
      enum: QuestWatchType
C_QuestLog.GetRequiredMoney:
  inputs:
  - name: questID
    nilable: true
    type: number
  outputs:
  - name: requiredMoney
    type: number
C_QuestLog.GetSelectedQuest:
  inputs: {}
  outputs:
  - name: questID
    type: number
C_QuestLog.GetSuggestedGroupSize:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: suggestedGroupSize
    type: number
C_QuestLog.GetTimeAllowed:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: totalTime
    type: number
  - name: elapsedTime
    type: number
C_QuestLog.GetTitleForLogIndex:
  inputs:
  - name: questLogIndex
    type: number
  outputs:
  - name: title
    nilable: true
    type: string
C_QuestLog.GetTitleForQuestID:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: title
    nilable: true
    type: string
C_QuestLog.GetZoneStoryInfo:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: achievementID
    type: number
  - name: storyMapID
    type: number
C_QuestLog.HasActiveThreats:
  inputs: {}
  outputs:
  - name: hasActiveThreats
    type: boolean
C_QuestLog.IsAccountQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isAccountQuest
    type: boolean
C_QuestLog.IsComplete:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isComplete
    type: boolean
C_QuestLog.IsFailed:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isFailed
    type: boolean
C_QuestLog.IsImportantQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isImportant
    type: boolean
C_QuestLog.IsLegendaryQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isLegendaryQuest
    type: boolean
C_QuestLog.IsOnMap:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: onMap
    type: boolean
  - name: hasLocalPOI
    type: boolean
C_QuestLog.IsOnQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isOnQuest
    type: boolean
C_QuestLog.IsPushableQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isPushable
    type: boolean
C_QuestLog.IsQuestBounty:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isBounty
    type: boolean
C_QuestLog.IsQuestCalling:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isCalling
    type: boolean
C_QuestLog.IsQuestCriteriaForBounty:
  inputs:
  - name: questID
    type: number
  - name: bountyQuestID
    type: number
  outputs:
  - name: isCriteriaForBounty
    type: boolean
C_QuestLog.IsQuestDisabledForSession:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isDisabled
    type: boolean
C_QuestLog.IsQuestFlaggedCompleted:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isCompleted
    type: boolean
C_QuestLog.IsQuestInvasion:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isInvasion
    type: boolean
C_QuestLog.IsQuestReplayable:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isReplayable
    type: boolean
C_QuestLog.IsQuestReplayedRecently:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: recentlyReplayed
    type: boolean
C_QuestLog.IsQuestTask:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isTask
    type: boolean
C_QuestLog.IsQuestTrivial:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isTrivial
    type: boolean
C_QuestLog.IsRepeatableQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isRepeatable
    type: boolean
C_QuestLog.IsThreatQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isThreat
    type: boolean
C_QuestLog.IsUnitOnQuest:
  inputs:
  - name: unit
    type: unit
  - name: questID
    type: number
  outputs:
  - name: isOnQuest
    type: boolean
C_QuestLog.IsWorldQuest:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: isWorldQuest
    type: boolean
C_QuestLog.QuestCanHaveWarModeBonus:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: hasBonus
    type: boolean
C_QuestLog.QuestHasQuestSessionBonus:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: hasBonus
    type: boolean
C_QuestLog.QuestHasWarModeBonus:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: hasBonus
    type: boolean
C_QuestLog.ReadyForTurnIn:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: readyForTurnIn
    nilable: true
    type: boolean
C_QuestLog.RemoveQuestWatch:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: wasRemoved
    type: boolean
C_QuestLog.RemoveWorldQuestWatch:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: wasRemoved
    type: boolean
C_QuestLog.RequestLoadQuestByID:
  inputs:
  - name: questID
    type: number
  outputs: {}
C_QuestLog.SetAbandonQuest:
  inputs: {}
  outputs: {}
C_QuestLog.SetMapForQuestPOIs:
  inputs:
  - name: uiMapID
    type: number
  outputs: {}
C_QuestLog.SetSelectedQuest:
  inputs:
  - name: questID
    type: number
  outputs: {}
C_QuestLog.ShouldDisplayTimeRemaining:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: displayTimeRemaining
    type: boolean
C_QuestLog.ShouldShowQuestRewards:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: shouldShow
    type: boolean
C_QuestLog.SortQuestWatches:
  inputs: {}
  outputs: {}
C_QuestLog.UnitIsRelatedToActiveQuest:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: isRelatedToActiveQuest
    type: boolean
C_QuestOffer.GetHideRequiredItems:
  inputs: {}
  outputs:
  - name: hideRequiredItems
    type: boolean
C_QuestOffer.GetQuestOfferMajorFactionReputationRewards:
  inputs: {}
  outputs:
  - name: reputationRewards
    stub: {}
    type:
      arrayof:
        structure: QuestReputationRewardInfo
C_QuestSession.CanStart:
  inputs: {}
  outputs:
  - name: allowed
    type: boolean
C_QuestSession.CanStop:
  inputs: {}
  outputs:
  - name: allowed
    type: boolean
C_QuestSession.Exists:
  inputs: {}
  outputs:
  - name: exists
    type: boolean
C_QuestSession.GetAvailableSessionCommand:
  inputs: {}
  outputs:
  - name: command
    type:
      enum: QuestSessionCommand
C_QuestSession.GetPendingCommand:
  inputs: {}
  outputs:
  - name: command
    type:
      enum: QuestSessionCommand
C_QuestSession.GetProposedMaxLevelForSession:
  inputs: {}
  outputs:
  - name: proposedMaxLevel
    type: number
C_QuestSession.GetSessionBeginDetails:
  inputs: {}
  outputs:
  - name: details
    nilable: true
    type:
      structure: C_QuestSession.QuestSessionPlayerDetails
C_QuestSession.GetSuperTrackedQuest:
  inputs: {}
  outputs:
  - name: questID
    nilable: true
    type: number
C_QuestSession.HasJoined:
  inputs: {}
  outputs:
  - name: hasJoined
    type: boolean
C_QuestSession.HasPendingCommand:
  inputs: {}
  outputs:
  - name: hasPendingCommand
    type: boolean
C_QuestSession.RequestSessionStart:
  inputs: {}
  outputs: {}
C_QuestSession.RequestSessionStop:
  inputs: {}
  outputs: {}
C_QuestSession.SendSessionBeginResponse:
  inputs:
  - name: beginSession
    type: boolean
  outputs: {}
C_QuestSession.SetQuestIsSuperTracked:
  inputs:
  - name: questID
    type: number
  - name: superTrack
    type: boolean
  outputs: {}
C_RaidLocks.IsEncounterComplete:
  inputs:
  - name: mapID
    type: number
  - name: encounterID
    type: number
  - name: difficultyID
    nilable: true
    type: number
  outputs:
  - name: encounterIsComplete
    type: boolean
C_RecruitAFriend.ClaimActivityReward:
  inputs:
  - name: activityID
    type: number
  - name: acceptanceID
    type: string
  outputs:
  - name: success
    type: boolean
C_RecruitAFriend.ClaimNextReward:
  inputs:
  - name: rafVersion
    nilable: true
    type:
      enum: RecruitAFriendRewardsVersion
  outputs:
  - name: success
    type: boolean
C_RecruitAFriend.GenerateRecruitmentLink:
  inputs: {}
  outputs:
  - name: success
    type: boolean
C_RecruitAFriend.GetRAFInfo:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: C_RecruitAFriend.RafInfo
C_RecruitAFriend.GetRAFSystemInfo:
  inputs: {}
  outputs:
  - name: systemInfo
    type:
      structure: C_RecruitAFriend.RafSystemInfo
C_RecruitAFriend.GetRecruitActivityRequirementsText:
  inputs:
  - name: activityID
    type: number
  - name: acceptanceID
    type: string
  outputs:
  - name: requirementsText
    type:
      arrayof: string
C_RecruitAFriend.GetRecruitInfo:
  inputs: {}
  outputs:
  - name: active
    type: boolean
  - name: faction
    type: number
C_RecruitAFriend.IsEnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_RecruitAFriend.IsRecruitingEnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_RecruitAFriend.RemoveRAFRecruit:
  inputs:
  - name: wowAccountGUID
    type: string
  outputs:
  - name: success
    type: boolean
C_RecruitAFriend.RequestUpdatedRecruitmentInfo:
  inputs: {}
  outputs:
  - name: success
    type: boolean
C_ReportSystem.CanReportPlayer:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: canReport
    type: boolean
C_ReportSystem.CanReportPlayerForLanguage:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: canReport
    type: boolean
C_ReportSystem.GetMajorCategoriesForReportType:
  inputs:
  - name: reportType
    type:
      enum: ReportType
  outputs:
  - name: majorCategories
    type:
      arrayof:
        enum: ReportMajorCategory
C_ReportSystem.GetMajorCategoryString:
  inputs:
  - name: majorCategory
    type:
      enum: ReportMajorCategory
  outputs:
  - name: majorCategoryString
    type: string
C_ReportSystem.GetMinorCategoriesForReportTypeAndMajorCategory:
  inputs:
  - name: reportType
    type:
      enum: ReportType
  - name: majorCategory
    type:
      enum: ReportMajorCategory
  outputs:
  - name: minorCategories
    type:
      arrayof:
        enum: ReportMinorCategory
C_ReportSystem.GetMinorCategoryString:
  inputs:
  - name: minorCategory
    type:
      enum: ReportMinorCategory
  outputs:
  - name: minorCategoryString
    type: string
C_ReportSystem.ReportServerLag:
  inputs: {}
  outputs: {}
C_ReportSystem.ReportStuckInCombat:
  inputs: {}
  outputs: {}
C_ReportSystem.SendReport:
  inputs:
  - name: reportInfo
    type:
      structure: ReportInfo
  - name: playerLocation
    nilable: true
    type:
      structure: PlayerLocation
  outputs: {}
C_Reputation.GetFactionParagonInfo:
  inputs:
  - name: factionID
    type: number
  outputs:
  - name: currentValue
    type: number
  - name: threshold
    type: number
  - name: rewardQuestID
    type: number
  - name: hasRewardPending
    type: boolean
  - name: tooLowLevelForParagon
    type: boolean
C_Reputation.IsFactionParagon:
  inputs:
  - name: factionID
    type: number
  outputs:
  - name: hasParagon
    type: boolean
C_Reputation.IsMajorFaction:
  inputs:
  - name: factionID
    type: number
  outputs:
  - name: isMajorFaction
    type: boolean
C_Reputation.RequestFactionParagonPreloadRewardData:
  inputs:
  - name: factionID
    type: number
  outputs: {}
C_Reputation.SetWatchedFaction:
  inputs:
  - name: factionID
    type: number
  outputs: {}
C_ResearchInfo.GetDigSitesForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: digSites
    type:
      arrayof:
        structure: C_ResearchInfo.DigSiteMapInfo
C_ReturningPlayerUI.AcceptPrompt:
  inputs: {}
  outputs: {}
C_ReturningPlayerUI.DeclinePrompt:
  inputs: {}
  outputs: {}
C_Scenario.GetBonusStepRewardQuestID: {}
C_Scenario.GetBonusSteps: {}
C_Scenario.GetCriteriaInfo: {}
C_Scenario.GetCriteriaInfoByStep: {}
C_Scenario.GetInfo: {}
C_Scenario.GetProvingGroundsInfo: {}
C_Scenario.GetScenarioIconInfo: {}
C_Scenario.GetStepInfo: {}
C_Scenario.GetSupersededObjectives: {}
C_Scenario.IsInScenario: {}
C_Scenario.ShouldShowCriteria: {}
C_Scenario.TreatScenarioAsDungeon: {}
C_ScenarioInfo.GetJailersTowerTypeString:
  inputs:
  - name: runType
    type:
      enum: JailersTowerType
  outputs:
  - name: typeString
    nilable: true
    type: string
C_ScenarioInfo.GetScenarioInfo:
  inputs: {}
  outputs:
  - name: scenarioInfo
    type:
      structure: C_ScenarioInfo.ScenarioInformation
C_ScenarioInfo.GetScenarioStepInfo:
  inputs:
  - name: scenarioStepID
    nilable: true
    type: number
  outputs:
  - name: scenarioStepInfo
    type:
      structure: C_ScenarioInfo.ScenarioStepInfo
C_ScrappingMachineUI.CloseScrappingMachine:
  inputs: {}
  outputs: {}
C_ScrappingMachineUI.DropPendingScrapItemFromCursor:
  inputs:
  - name: index
    type: number
  outputs: {}
C_ScrappingMachineUI.GetCurrentPendingScrapItemLocationByIndex:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemLoc
    type:
      structure: ItemLocation
C_ScrappingMachineUI.GetScrappingMachineName:
  inputs: {}
  outputs:
  - name: name
    type: string
C_ScrappingMachineUI.GetScrapSpellID:
  inputs: {}
  outputs:
  - name: spellID
    type: number
C_ScrappingMachineUI.HasScrappableItems:
  inputs: {}
  outputs:
  - name: hasScrappableItems
    type: boolean
C_ScrappingMachineUI.RemoveAllScrapItems:
  inputs: {}
  outputs: {}
C_ScrappingMachineUI.RemoveCurrentScrappingItem:
  inputs: {}
  outputs: {}
C_ScrappingMachineUI.RemoveItemToScrap:
  inputs:
  - name: index
    type: number
  outputs: {}
C_ScrappingMachineUI.ScrapItems:
  inputs: {}
  outputs: {}
C_ScrappingMachineUI.ValidateScrappingList:
  inputs: {}
  outputs: {}
C_ScriptedAnimations.GetAllScriptedAnimationEffects:
  impl: C_ScriptedAnimations.GetAllScriptedAnimationEffects
  inputs: {}
  outputs:
  - name: scriptedAnimationEffects
    type:
      arrayof:
        structure: C_ScriptedAnimations.ScriptedAnimationEffect
C_SharedCharacterServices.GetLastSeenCharacterUpgradePopup: {}
C_SharedCharacterServices.GetLastSeenExpansionTrialPopup: {}
C_SharedCharacterServices.GetUpgradeDistributions: {}
C_SharedCharacterServices.HasFreePromotionalUpgrade:
  inputs: {}
  outputs:
  - type: boolean
C_SharedCharacterServices.HasSeenFreePromotionalUpgradePopup: {}
C_SharedCharacterServices.IsPurchaseIDPendingUpgrade: {}
C_SharedCharacterServices.QueryClassTrialBoostResult: {}
C_SharedCharacterServices.SetCharacterUpgradePopupSeen: {}
C_SharedCharacterServices.SetExpansionTrialPopupSeen: {}
C_SharedCharacterServices.SetPromotionalPopupSeen: {}
C_SocialQueue.GetAllGroups:
  inputs:
  - default: false
    name: allowNonJoinable
    type: boolean
  - default: false
    name: allowNonQueuedGroups
    type: boolean
  outputs:
  - name: groupGUIDs
    type:
      arrayof: string
C_SocialQueue.GetConfig:
  inputs: {}
  outputs:
  - name: config
    type:
      structure: C_SocialQueue.SocialQueueConfig
C_SocialQueue.GetGroupForPlayer:
  inputs:
  - name: playerGUID
    type: string
  outputs:
  - name: groupGUID
    type: string
  - name: isSoloQueueParty
    type: boolean
C_SocialQueue.GetGroupInfo:
  inputs:
  - name: groupGUID
    type: string
  outputs:
  - name: canJoin
    type: boolean
  - name: numQueues
    type: number
  - name: needTank
    type: boolean
  - name: needHealer
    type: boolean
  - name: needDamage
    type: boolean
  - name: isSoloQueueParty
    type: boolean
  - name: questSessionActive
    type: boolean
  - name: leaderGUID
    type: string
C_SocialQueue.GetGroupMembers:
  inputs:
  - name: groupGUID
    type: string
  outputs:
  - name: groupMembers
    type:
      arrayof:
        structure: C_SocialQueue.SocialQueuePlayerInfo
C_SocialQueue.GetGroupQueues:
  inputs:
  - name: groupGUID
    type: string
  outputs:
  - name: queues
    type:
      arrayof:
        structure: C_SocialQueue.SocialQueueGroupQueueInfo
C_SocialQueue.RequestToJoin:
  inputs:
  - name: groupGUID
    type: string
  - default: false
    name: applyAsTank
    type: boolean
  - default: false
    name: applyAsHealer
    type: boolean
  - default: false
    name: applyAsDamage
    type: boolean
  outputs:
  - name: requestSuccessful
    type: boolean
C_SocialQueue.SignalToastDisplayed:
  inputs:
  - name: groupGUID
    type: string
  - name: priority
    type: number
  outputs: {}
C_SocialRestrictions.AcknowledgeRegionalChatDisabled:
  inputs: {}
  outputs: {}
C_SocialRestrictions.IsChatDisabled:
  inputs: {}
  outputs:
  - name: disabled
    type: boolean
C_SocialRestrictions.IsMuted:
  inputs: {}
  outputs:
  - name: isMuted
    type: boolean
C_SocialRestrictions.IsSilenced:
  inputs: {}
  outputs:
  - name: isSilenced
    type: boolean
C_SocialRestrictions.IsSquelched:
  inputs: {}
  outputs:
  - name: isSquelched
    type: boolean
C_SocialRestrictions.SetChatDisabled:
  inputs:
  - name: disabled
    type: boolean
  outputs: {}
C_Soulbinds.ActivateSoulbind:
  inputs:
  - name: soulbindID
    type: number
  outputs: {}
C_Soulbinds.CanActivateSoulbind:
  inputs:
  - name: soulbindID
    type: number
  outputs:
  - name: result
    type: boolean
  - name: errorDescription
    nilable: true
    type: string
C_Soulbinds.CanModifySoulbind:
  inputs: {}
  outputs:
  - name: result
    type: boolean
C_Soulbinds.CanResetConduitsInSoulbind:
  inputs:
  - name: soulbindID
    type: number
  outputs:
  - name: result
    type: boolean
  - name: errorDescription
    nilable: true
    type: string
C_Soulbinds.CanSwitchActiveSoulbindTreeBranch:
  inputs: {}
  outputs:
  - name: result
    type: boolean
C_Soulbinds.CloseUI:
  inputs: {}
  outputs: {}
C_Soulbinds.CommitPendingConduitsInSoulbind:
  inputs:
  - name: soulbindID
    type: number
  outputs: {}
C_Soulbinds.FindNodeIDActuallyInstalled:
  inputs:
  - name: soulbindID
    type: number
  - name: conduitID
    type: number
  outputs:
  - name: nodeID
    type: number
C_Soulbinds.FindNodeIDAppearingInstalled:
  inputs:
  - name: soulbindID
    type: number
  - name: conduitID
    type: number
  outputs:
  - name: nodeID
    type: number
C_Soulbinds.FindNodeIDPendingInstall:
  inputs:
  - name: soulbindID
    type: number
  - name: conduitID
    type: number
  outputs:
  - name: nodeID
    type: number
C_Soulbinds.FindNodeIDPendingUninstall:
  inputs:
  - name: soulbindID
    type: number
  - name: conduitID
    type: number
  outputs:
  - name: nodeID
    type: number
C_Soulbinds.GetActiveSoulbindID:
  inputs: {}
  outputs:
  - name: soulbindID
    type: number
C_Soulbinds.GetConduitCollection:
  inputs:
  - name: conduitType
    type:
      enum: SoulbindConduitType
  outputs:
  - name: collectionData
    type:
      arrayof:
        structure: C_Soulbinds.ConduitCollectionData
C_Soulbinds.GetConduitCollectionCount:
  inputs: {}
  outputs:
  - name: count
    type: number
C_Soulbinds.GetConduitCollectionData:
  inputs:
  - name: conduitID
    type: number
  outputs:
  - name: collectionData
    nilable: true
    type:
      structure: C_Soulbinds.ConduitCollectionData
C_Soulbinds.GetConduitCollectionDataAtCursor:
  inputs: {}
  outputs:
  - name: collectionData
    nilable: true
    type:
      structure: C_Soulbinds.ConduitCollectionData
C_Soulbinds.GetConduitCollectionDataByVirtualID:
  inputs:
  - name: virtualID
    type: number
  outputs:
  - name: collectionData
    nilable: true
    type:
      structure: C_Soulbinds.ConduitCollectionData
C_Soulbinds.GetConduitDisplayed:
  inputs:
  - name: nodeID
    type: number
  outputs:
  - name: conduitID
    type: number
C_Soulbinds.GetConduitHyperlink:
  inputs:
  - name: conduitID
    type: number
  - name: rank
    type: number
  outputs:
  - name: link
    type: string
C_Soulbinds.GetConduitIDPendingInstall:
  inputs:
  - name: nodeID
    type: number
  outputs:
  - name: conduitID
    type: number
C_Soulbinds.GetConduitQuality:
  inputs:
  - name: conduitID
    type: number
  - name: rank
    type: number
  outputs:
  - name: quality
    type: number
C_Soulbinds.GetConduitRank:
  inputs:
  - name: conduitID
    type: number
  outputs:
  - name: conduitRank
    type: number
C_Soulbinds.GetConduitSpellID:
  inputs:
  - name: conduitID
    type: number
  - name: conduitRank
    type: number
  outputs:
  - name: spellID
    type: number
C_Soulbinds.GetInstalledConduitID:
  inputs:
  - name: nodeID
    type: number
  outputs:
  - name: conduitID
    type: number
C_Soulbinds.GetNode:
  inputs:
  - name: nodeID
    type: number
  outputs:
  - name: node
    type:
      structure: C_Soulbinds.SoulbindNode
C_Soulbinds.GetSoulbindData:
  inputs:
  - name: soulbindID
    type: number
  outputs:
  - name: data
    type:
      structure: C_Soulbinds.SoulbindData
C_Soulbinds.GetSpecsAssignedToSoulbind:
  inputs:
  - name: soulbindID
    type: number
  outputs:
  - name: specIDs
    type:
      arrayof: number
C_Soulbinds.GetTree:
  inputs:
  - name: treeID
    type: number
  outputs:
  - name: tree
    type:
      structure: C_Soulbinds.SoulbindTree
C_Soulbinds.HasAnyInstalledConduitInSoulbind:
  inputs:
  - name: soulbindID
    type: number
  outputs:
  - name: result
    type: boolean
C_Soulbinds.HasAnyPendingConduits:
  inputs: {}
  outputs:
  - name: result
    type: boolean
C_Soulbinds.HasPendingConduitsInSoulbind:
  inputs:
  - name: soulbindID
    type: number
  outputs:
  - name: result
    type: boolean
C_Soulbinds.IsConduitInstalled:
  inputs:
  - name: nodeID
    type: number
  outputs:
  - name: result
    type: boolean
C_Soulbinds.IsConduitInstalledInSoulbind:
  inputs:
  - name: soulbindID
    type: number
  - name: conduitID
    type: number
  outputs:
  - name: result
    type: boolean
C_Soulbinds.IsItemConduitByItemInfo:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: result
    type: boolean
C_Soulbinds.IsNodePendingModify:
  inputs:
  - name: nodeID
    type: number
  outputs:
  - name: result
    type: boolean
C_Soulbinds.IsUnselectedConduitPendingInSoulbind:
  inputs:
  - name: soulbindID
    type: number
  outputs:
  - name: result
    type: boolean
C_Soulbinds.ModifyNode:
  inputs:
  - name: nodeID
    type: number
  - name: conduitID
    type: number
  - name: type
    type:
      enum: SoulbindConduitTransactionType
  outputs: {}
C_Soulbinds.SelectNode:
  inputs:
  - name: nodeID
    type: number
  outputs: {}
C_Soulbinds.UnmodifyNode:
  inputs:
  - name: nodeID
    type: number
  outputs: {}
C_Sound.GetSoundScaledVolume:
  inputs:
  - name: soundHandle
    type: number
  outputs:
  - name: scaledVolume
    type: number
C_Sound.IsPlaying:
  inputs:
  - name: soundHandle
    type: number
  outputs:
  - name: isPlaying
    type: boolean
C_Sound.PlayItemSound:
  inputs:
  - name: soundType
    type:
      enum: ItemSoundType
  - name: itemLocation
    type:
      structure: ItemLocation
  outputs: {}
C_SpecializationInfo.CanPlayerUsePVPTalentUI:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_SpecializationInfo.CanPlayerUseTalentSpecUI:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_SpecializationInfo.CanPlayerUseTalentUI:
  inputs: {}
  outputs:
  - name: canUse
    type: boolean
  - name: failureReason
    type: string
C_SpecializationInfo.GetAllSelectedPvpTalentIDs:
  inputs: {}
  outputs:
  - name: selectedPvpTalentIDs
    type:
      arrayof: number
C_SpecializationInfo.GetClassIDFromSpecID:
  inputs:
  - name: specID
    type: number
  outputs:
  - name: classID
    nilable: true
    type: number
C_SpecializationInfo.GetInspectSelectedPvpTalent:
  inputs:
  - name: inspectedUnit
    type: unit
  - name: talentIndex
    type: number
  outputs:
  - name: selectedTalentID
    nilable: true
    type: number
C_SpecializationInfo.GetPvpTalentAlertStatus:
  inputs: {}
  outputs:
  - name: hasUnspentSlot
    type: boolean
  - name: hasNewTalent
    type: boolean
C_SpecializationInfo.GetPvpTalentInfo:
  inputs:
  - name: talentID
    type: number
  outputs:
  - name: talentInfo
    nilable: true
    type:
      structure: C_SpecializationInfo.PvpTalentInfo
C_SpecializationInfo.GetPvpTalentSlotInfo:
  inputs:
  - name: talentIndex
    type: number
  outputs:
  - name: slotInfo
    nilable: true
    type:
      structure: C_SpecializationInfo.PvpTalentSlotInfo
C_SpecializationInfo.GetPvpTalentSlotUnlockLevel:
  inputs:
  - name: talentIndex
    type: number
  outputs:
  - name: requiredLevel
    nilable: true
    type: number
C_SpecializationInfo.GetPvpTalentUnlockLevel:
  inputs:
  - name: talentID
    type: number
  outputs:
  - name: requiredLevel
    nilable: true
    type: number
C_SpecializationInfo.GetSpecIDs:
  impl: C_SpecializationInfo.GetSpecIDs
  inputs:
  - name: specSetID
    type: number
  outputs:
  - name: specIDs
    type:
      arrayof: number
C_SpecializationInfo.GetSpellsDisplay:
  inputs:
  - name: specializationID
    type: number
  outputs:
  - name: spellID
    type:
      arrayof: number
C_SpecializationInfo.IsInitialized:
  inputs: {}
  outputs:
  - name: isSpecializationDataInitialized
    type: boolean
C_SpecializationInfo.IsPvpTalentLocked:
  inputs:
  - name: talentID
    type: number
  outputs:
  - name: locked
    type: boolean
C_SpecializationInfo.MatchesCurrentSpecSet:
  inputs:
  - name: specSetID
    type: number
  outputs:
  - name: matches
    type: boolean
C_SpecializationInfo.SetPvpTalentLocked:
  inputs:
  - name: talentID
    type: number
  - name: locked
    type: boolean
  outputs: {}
C_Spell.DoesSpellExist:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: spellExists
    stub: true
    type: boolean
C_Spell.GetMawPowerBorderAtlasBySpellID:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: rarityBorderAtlas
    type: string
C_Spell.IsSpellDataCached:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: isCached
    type: boolean
C_Spell.RequestLoadSpellData:
  inputs:
  - name: spellID
    type: number
  outputs: {}
C_Spell.TargetSpellJumpsUpgradeTrack:
  inputs: {}
  outputs:
  - name: jumpsUpgradeTrack
    type: boolean
C_SpellBook.ContainsAnyDisenchantSpell:
  inputs: {}
  outputs:
  - name: contains
    type: boolean
C_SpellBook.GetCurrentLevelSpells:
  inputs:
  - name: level
    type: number
  outputs:
  - name: spellIDs
    type:
      arrayof: number
C_SpellBook.GetDeadlyDebuffInfo:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: deadlyDebuffInfo
    type:
      structure: C_SpellBook.DeadlyDebuffInfo
C_SpellBook.GetOverrideSpell:
  inputs:
  - name: spellID
    type: number
  - default: 0
    name: spec
    type: number
  - default: true
    name: onlyKnown
    type: boolean
  - default: 0
    name: ignoreOverrideSpellID
    type: number
  outputs:
  - name: overrideSpellID
    type: number
C_SpellBook.GetSkillLineIndexByID:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: skillIndex
    nilable: true
    type: number
C_SpellBook.GetSpellInfo:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: spellInfo
    type:
      structure: C_SpellBook.SpellInfo
C_SpellBook.GetSpellLinkFromSpellID:
  inputs:
  - name: spellID
    type: number
  - name: glyphID
    nilable: true
    type: number
  outputs:
  - name: spellLink
    type: string
C_SpellBook.GetTrackedNameplateCooldownSpells:
  inputs: {}
  outputs:
  - name: spellIDs
    type:
      arrayof: number
C_SpellBook.IsSpellDisabled:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: disabled
    type: boolean
C_SplashScreen.AcknowledgeSplash:
  inputs: {}
  outputs: {}
C_SplashScreen.CanViewSplashScreen:
  inputs: {}
  outputs:
  - name: canView
    type: boolean
C_SplashScreen.RequestLatestSplashScreen:
  inputs:
  - name: fromGameMenu
    type: boolean
  outputs: {}
C_StableInfo.GetNumActivePets:
  inputs: {}
  outputs:
  - name: numActivePets
    type: number
C_StableInfo.GetNumStablePets:
  inputs: {}
  outputs:
  - name: numStablePets
    type: number
C_StorePublic.DoesGroupHavePurchaseableProducts:
  inputs:
  - name: groupID
    type: number
  outputs:
  - name: hasPurchaseableProducts
    type: boolean
C_StorePublic.IsDisabledByParentalControls:
  inputs: {}
  outputs:
  - name: disabled
    type: boolean
C_StorePublic.IsEnabled:
  inputs: {}
  outputs:
  - name: enabled
    type: boolean
C_StoreSecure.AckFailure: {}
C_StoreSecure.ClearPreGeneratedExternalTransactionID: {}
C_StoreSecure.GetBnetTransferInfo: {}
C_StoreSecure.GetCharacterInfoByGUID: {}
C_StoreSecure.GetCharactersForRealm:
  outputs:
  - name: characters
    stub:
    - level: 42
    type: table
C_StoreSecure.GetConfirmationInfo: {}
C_StoreSecure.GetCurrencyID: {}
C_StoreSecure.GetEligibleRacesForVASService: {}
C_StoreSecure.GetEntryInfo: {}
C_StoreSecure.GetFailureInfo: {}
C_StoreSecure.GetLastProductListResponseError: {}
C_StoreSecure.GetProductGroupInfo: {}
C_StoreSecure.GetProductGroups:
  outputs:
  - type: table
C_StoreSecure.GetProductInfo: {}
C_StoreSecure.GetProductList:
  inputs: {}
  outputs: {}
C_StoreSecure.GetProducts: {}
C_StoreSecure.GetPurchaseList: {}
C_StoreSecure.GetRealmList: {}
C_StoreSecure.GetUnrevokedBoostInfo: {}
C_StoreSecure.GetVASCompletionInfo: {}
C_StoreSecure.GetVASErrors: {}
C_StoreSecure.GetVASGuildFollowInfoForCharacterByGUID: {}
C_StoreSecure.GetVASGuildMasterInfoForCharacterByGUID: {}
C_StoreSecure.GetVASRealmList: {}
C_StoreSecure.GetWoWAccountGUIDFromName: {}
C_StoreSecure.HasDistributionList: {}
C_StoreSecure.HasDynamicPriceData: {}
C_StoreSecure.HasProductList: {}
C_StoreSecure.HasProductType: {}
C_StoreSecure.HasPurchaseInProgress: {}
C_StoreSecure.HasPurchaseList: {}
C_StoreSecure.IsAvailable: {}
C_StoreSecure.IsDynamicBundle: {}
C_StoreSecure.IsRegionLocked: {}
C_StoreSecure.IsVASEligibleCharacterGUID: {}
C_StoreSecure.OpenNydusLink: {}
C_StoreSecure.PurchaseProduct: {}
C_StoreSecure.PurchaseProductConfirm: {}
C_StoreSecure.PurchaseVASProduct: {}
C_StoreSecure.RequestAllDynamicPriceInfo: {}
C_StoreSecure.RequestCharacterGuildFollowInfo: {}
C_StoreSecure.RequestRealmGuildMasterInfo: {}
C_StoreSecure.SetDisconnectOnLogout: {}
C_StoreSecure.SetVASProductReady: {}
C_StoreSecure.ValidateBnetTransfer: {}
C_SummonInfo.CancelSummon:
  inputs: {}
  outputs: {}
C_SummonInfo.ConfirmSummon:
  inputs: {}
  outputs: {}
C_SummonInfo.GetSummonConfirmAreaName:
  inputs: {}
  outputs:
  - name: areaName
    type: string
C_SummonInfo.GetSummonConfirmSummoner:
  inputs: {}
  outputs:
  - name: summoner
    nilable: true
    type: string
C_SummonInfo.GetSummonConfirmTimeLeft:
  inputs: {}
  outputs:
  - name: timeLeft
    type: number
C_SummonInfo.GetSummonReason:
  inputs: {}
  outputs:
  - name: summonReason
    type: number
C_SummonInfo.IsSummonSkippingStartExperience:
  inputs: {}
  outputs:
  - name: isSummonSkippingStartExperience
    type: boolean
C_SuperTrack.ClearSuperTrackedContent:
  inputs: {}
  outputs: {}
C_SuperTrack.GetHighestPrioritySuperTrackingType:
  inputs: {}
  outputs:
  - name: type
    nilable: true
    type:
      enum: SuperTrackingType
C_SuperTrack.GetSuperTrackedContent:
  inputs: {}
  outputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  - name: trackableID
    type: number
C_SuperTrack.GetSuperTrackedQuestID:
  inputs: {}
  outputs:
  - name: questID
    nilable: true
    stub: 22
    type: number
C_SuperTrack.IsSuperTrackingAnything:
  inputs: {}
  outputs:
  - name: isSuperTracking
    type: boolean
C_SuperTrack.IsSuperTrackingContent:
  inputs: {}
  outputs:
  - name: isSuperTracking
    type: boolean
C_SuperTrack.IsSuperTrackingCorpse:
  inputs: {}
  outputs:
  - name: isSuperTracking
    type: boolean
C_SuperTrack.IsSuperTrackingQuest:
  inputs: {}
  outputs:
  - name: isSuperTracking
    type: boolean
C_SuperTrack.IsSuperTrackingUserWaypoint:
  inputs: {}
  outputs:
  - name: isSuperTracking
    type: boolean
C_SuperTrack.SetSuperTrackedContent:
  inputs:
  - name: trackableType
    type:
      enum: ContentTrackingType
  - name: trackableID
    type: number
  outputs: {}
C_SuperTrack.SetSuperTrackedQuestID:
  inputs:
  - name: questID
    type: number
  outputs: {}
C_SuperTrack.SetSuperTrackedUserWaypoint:
  inputs:
  - name: superTracked
    type: boolean
  outputs: {}
C_System.GetFrameStack:
  inputs: {}
  outputs:
  - name: objects
    type:
      arrayof: table
C_SystemVisibilityManager.IsSystemVisible:
  inputs:
  - name: system
    type:
      enum: UISystemType
  outputs:
  - name: visible
    type: boolean
C_TalkingHead.GetConversationsDeferred: {}
C_TalkingHead.GetCurrentLineAnimationInfo: {}
C_TalkingHead.GetCurrentLineInfo:
  inputs: {}
  outputs:
  - name: displayInfo
    type: number
  - name: cameraID
    type: string
  - name: vo
    type: string
  - name: duration
    type: number
  - name: lineNumber
    type: number
  - name: numLines
    type: number
  - name: name
    type: string
  - name: text
    type: string
  - name: isNewTalkingHead
    type: boolean
  - name: textureKit
    stub: Normal
    type: string
C_TalkingHead.IgnoreCurrentTalkingHead: {}
C_TalkingHead.IsCurrentTalkingHeadIgnored: {}
C_TalkingHead.SetConversationsDeferred: {}
C_TaskQuest.DoesMapShowTaskQuestObjectives:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: showsTaskQuestObjectives
    type: boolean
C_TaskQuest.GetQuestInfoByQuestID:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: questTitle
    type: string
  - name: factionID
    nilable: true
    type: number
  - name: capped
    nilable: true
    type: boolean
  - name: displayAsObjective
    nilable: true
    type: boolean
C_TaskQuest.GetQuestLocation:
  inputs:
  - name: questID
    type: number
  - name: uiMapID
    type: number
  outputs:
  - name: locationX
    type: number
  - name: locationY
    type: number
C_TaskQuest.GetQuestProgressBarInfo:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: progress
    type: number
C_TaskQuest.GetQuestsForPlayerByMapID:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: taskPOIs
    type:
      arrayof:
        structure: C_TaskQuest.TaskPOIData
C_TaskQuest.GetQuestTimeLeftMinutes:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: minutesLeft
    type: number
C_TaskQuest.GetQuestTimeLeftSeconds:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: secondsLeft
    type: number
C_TaskQuest.GetQuestZoneID:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: uiMapID
    type: number
C_TaskQuest.GetThreatQuests:
  inputs: {}
  outputs:
  - name: quests
    type:
      arrayof: number
C_TaskQuest.GetUIWidgetSetIDFromQuestID:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: UiWidgetSetID
    type: number
C_TaskQuest.IsActive:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: active
    type: boolean
C_TaskQuest.RequestPreloadRewardData:
  inputs:
  - name: questID
    type: number
  outputs: {}
C_TaxiMap.GetAllTaxiNodes:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: taxiNodes
    type:
      arrayof:
        structure: C_TaxiMap.TaxiNodeInfo
C_TaxiMap.GetTaxiNodesForMap:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: mapTaxiNodes
    type:
      arrayof:
        structure: C_TaxiMap.MapTaxiNodeInfo
C_TaxiMap.ShouldMapShowTaxiNodes:
  inputs:
  - name: uiMapID
    type: number
  outputs:
  - name: shouldShowNodes
    type: boolean
C_Texture.ClearTitleIconTexture:
  inputs:
  - name: texture
    type: Texture
  outputs: {}
C_Texture.GetAtlasElementID:
  inputs:
  - name: atlas
    type: string
  outputs:
  - name: elementID
    type: number
C_Texture.GetAtlasID:
  inputs:
  - name: atlas
    type: string
  outputs:
  - name: atlasID
    type: number
C_Texture.GetAtlasInfo:
  impl: C_Texture.GetAtlasInfo_10_2
  inputs:
  - name: atlas
    type: string
  mayreturnnothing: true
  outputs:
  - name: info
    type:
      structure: C_Texture.AtlasInfo
C_Texture.GetCraftingReagentQualityChatIcon:
  inputs:
  - name: quality
    type: number
  outputs:
  - name: textureMarkup
    type: string
C_Texture.GetFilenameFromFileDataID:
  inputs:
  - name: fileDataID
    type: number
  outputs:
  - name: filename
    type: string
C_Texture.GetTitleIconTexture:
  inputs:
  - name: titleID
    type: string
  - name: version
    type:
      enum: TitleIconVersion
  - name: callback
    type: function
  outputs: {}
C_Texture.IsTitleIconTextureReady:
  inputs:
  - name: titleID
    type: string
  - name: version
    type:
      enum: TitleIconVersion
  outputs:
  - name: ready
    type: boolean
C_Texture.SetTitleIconTexture:
  inputs:
  - name: texture
    type: Texture
  - name: titleID
    type: string
  - name: version
    type:
      enum: TitleIconVersion
  outputs: {}
C_Timer.After:
  impl: C_Timer.After
  inputs:
  - name: seconds
    type: number
  - name: callback
    type: function
  outputs: {}
C_Timer.NewTicker:
  impl: C_Timer.NewTicker
  inputs:
  - name: seconds
    type: number
  - name: callback
    type: function
  - name: iterations
    nilable: true
    type: number
  outputs:
  - name: cbObject
    type: userdata
C_Timer.NewTimer:
  impl: C_Timer.NewTimer
  inputs:
  - name: seconds
    type: number
  - name: callback
    type: function
  outputs:
  - name: cbObject
    type: userdata
C_TooltipComparison.GetItemComparisonDelta:
  inputs:
  - name: comparisonItem
    type: table
  - name: equippedItem
    type: table
  - name: pairedItem
    nilable: true
    type: table
  - name: addPairedStats
    nilable: true
    type: boolean
  outputs:
  - name: lines
    type:
      arrayof: string
C_TooltipComparison.GetItemComparisonInfo:
  inputs:
  - name: comparisonItem
    type: table
  outputs:
  - name: info
    type:
      structure: C_TooltipComparison.TooltipItemComparisonInfo
C_TooltipInfo.GetAchievementByID:
  inputs:
  - name: achievementID
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetAction:
  inputs:
  - name: actionID
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetArtifactItem:
  inputs: {}
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetArtifactPowerByID:
  inputs:
  - name: powerID
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetAzeriteEssence:
  inputs:
  - name: essenceID
    type: number
  - name: rank
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetAzeriteEssenceSlot:
  inputs:
  - name: slot
    type:
      enum: AzeriteEssenceSlot
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetAzeritePower:
  inputs:
  - name: itemID
    type: number
  - name: itemLevel
    type: number
  - name: powerID
    type: number
  - name: owningItemLink
    nilable: true
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetBackpackToken:
  inputs:
  - name: index
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetBagItem:
  inputs:
  - name: bagIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetBagItemChild:
  inputs:
  - name: bagIndex
    type:
      enum: BagIndex
  - name: slotIndex
    type: number
  - name: equipSlotIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetBuybackItem:
  inputs:
  - name: index
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetCompanionPet:
  inputs:
  - name: petGUID
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetConduit:
  inputs:
  - name: conduitID
    type: number
  - name: conduitRank
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetCurrencyByID:
  inputs:
  - name: currencyID
    type: number
  - name: amount
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetCurrencyToken:
  inputs:
  - name: tokenIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetEnhancedConduit:
  inputs:
  - name: conduitID
    type: number
  - name: rank
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetEquipmentSet:
  inputs:
  - name: setID
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetExistingSocketGem:
  inputs:
  - name: index
    type: number
  - name: toDestroy
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetGuildBankItem:
  inputs:
  - name: tab
    type: number
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetHeirloomByItemID:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetHyperlink:
  inputs:
  - name: hyperlink
    type: string
  - name: optionalArg1
    nilable: true
    type: number
  - name: optionalArg2
    nilable: true
    type: number
  - name: hideVendorPrice
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetInboxItem:
  inputs:
  - name: messageIndex
    type: number
  - name: attachmentIndex
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetInstanceLockEncountersComplete:
  inputs:
  - name: index
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetInventoryItem:
  inputs:
  - name: unit
    type: unit
  - name: slot
    type: number
  - name: hideUselessStats
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetInventoryItemByID:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetItemByGUID:
  inputs:
  - name: guid
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetItemByID:
  inputs:
  - name: itemID
    type: number
  - name: quality
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetItemInteractionItem:
  inputs: {}
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetItemKey:
  inputs:
  - name: itemID
    type: number
  - name: itemLevel
    type: number
  - name: itemSuffix
    type: number
  - name: requiredLevel
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetLFGDungeonReward:
  inputs:
  - name: dungeonID
    type: number
  - name: lootIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetLFGDungeonShortageReward:
  inputs:
  - name: dungeonID
    type: number
  - name: shortageSeverity
    type: number
  - name: lootIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetLootCurrency:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetLootItem:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetLootRollItem:
  inputs:
  - name: id
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetMerchantCostItem:
  inputs:
  - name: slot
    type: number
  - name: costIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetMerchantItem:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetMinimapMouseover:
  inputs: {}
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetMountBySpellID:
  inputs:
  - name: spellID
    type: number
  - name: checkIndoors
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetOwnedItemByID:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetPetAction:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetPossession:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetPvpBrawl:
  inputs:
  - name: isSpecial
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetPvpTalent:
  inputs:
  - name: talentID
    type: number
  - name: isInspect
    nilable: true
    type: boolean
  - name: groupIndex
    nilable: true
    type: number
  - name: talentIndex
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetQuestCurrency:
  inputs:
  - name: type
    type: string
  - name: currencyIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetQuestItem:
  inputs:
  - name: type
    type: string
  - name: itemIndex
    type: number
  - name: allowCollectionText
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetQuestLogCurrency:
  inputs:
  - name: type
    type: string
  - name: currencyIndex
    type: number
  - name: questID
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetQuestLogItem:
  inputs:
  - name: type
    type: string
  - name: itemIndex
    type: number
  - name: questID
    nilable: true
    type: number
  - name: allowCollectionText
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetQuestLogSpecialItem:
  inputs:
  - name: questIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetQuestPartyProgress:
  inputs:
  - name: questID
    type: number
  - name: omitTitle
    nilable: true
    type: boolean
  - name: ignoreActivePlayer
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetRecipeRankInfo:
  inputs:
  - name: recipeID
    type: number
  - name: rank
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetRecipeReagentItem:
  inputs:
  - name: recipeSpellID
    type: number
  - name: dataSlotIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetRecipeResultItem:
  inputs:
  - name: recipeID
    type: number
  - name: craftingReagents
    nilable: true
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: recraftItemGUID
    nilable: true
    type: string
  - name: recipeLevel
    nilable: true
    type: number
  - name: overrideQualityID
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetRecipeResultItemForOrder:
  inputs:
  - name: recipeID
    type: number
  - name: craftingReagents
    nilable: true
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: orderID
    nilable: true
    type: number
  - name: recipeLevel
    nilable: true
    type: number
  - name: overrideQualityID
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetRuneforgeResultItem:
  inputs:
  - name: itemGUID
    type: string
  - name: itemLevel
    type: number
  - name: powerID
    nilable: true
    type: number
  - name: modifiers
    nilable: true
    type:
      arrayof: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetSendMailItem:
  inputs:
  - name: attachmentIndex
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetShapeshift:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetSlottedKeystone:
  inputs: {}
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetSocketedItem:
  inputs: {}
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetSocketedRelic:
  inputs:
  - name: slotIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetSocketGem:
  inputs:
  - name: index
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetSpellBookItem:
  inputs:
  - name: slot
    type: number
  - name: spellBookType
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetSpellByID:
  inputs:
  - name: spellID
    type: number
  - name: isPet
    nilable: true
    type: boolean
  - name: showSubtext
    nilable: true
    type: boolean
  - name: dontOverride
    nilable: true
    type: boolean
  - name: difficultyID
    nilable: true
    type: number
  - name: isLink
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetTalent:
  inputs:
  - name: talentID
    type: number
  - name: isInspect
    nilable: true
    type: boolean
  - name: groupIndex
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetTotem:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetToyByItemID:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetTradePlayerItem:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetTradeTargetItem:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetTrainerService:
  inputs:
  - name: serviceIndex
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetTraitEntry:
  inputs:
  - name: entryID
    type: number
  - name: rank
    nilable: true
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetTransmogrifyItem:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetUnit:
  inputs:
  - name: unit
    type: unit
  - name: hideStatus
    nilable: true
    type: boolean
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetUnitAura:
  inputs:
  - name: unitToken
    type: unit
  - name: index
    type: number
  - name: filter
    nilable: true
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetUnitBuff:
  inputs:
  - name: unitToken
    type: unit
  - name: index
    type: number
  - name: filter
    nilable: true
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetUnitBuffByAuraInstanceID:
  inputs:
  - name: unitTokenString
    type: string
  - name: auraInstanceID
    type: number
  - name: filter
    nilable: true
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetUnitDebuff:
  inputs:
  - name: unitToken
    type: unit
  - name: index
    type: number
  - name: filter
    nilable: true
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetUnitDebuffByAuraInstanceID:
  inputs:
  - name: unitTokenString
    type: string
  - name: auraInstanceID
    type: number
  - name: filter
    nilable: true
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetUpgradeItem:
  inputs: {}
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetVoidDepositItem:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetVoidItem:
  inputs:
  - name: tab
    type: number
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetVoidWithdrawalItem:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetWeeklyReward:
  inputs:
  - name: itemDBID
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetWorldCursor:
  inputs: {}
  outputs:
  - name: data
    type:
      structure: TooltipData
C_TooltipInfo.GetWorldLootObject:
  inputs:
  - name: unitTokenString
    type: string
  outputs:
  - name: data
    type:
      structure: TooltipData
C_ToyBox.ForceToyRefilter:
  inputs: {}
  outputs: {}
C_ToyBox.GetCollectedShown: {}
C_ToyBox.GetIsFavorite:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: isFavorite
    type: boolean
C_ToyBox.GetNumFilteredToys:
  outputs:
  - type: number
C_ToyBox.GetNumLearnedDisplayedToys:
  outputs:
  - type: number
C_ToyBox.GetNumTotalDisplayedToys:
  outputs:
  - type: number
C_ToyBox.GetNumToys: {}
C_ToyBox.GetToyFromIndex:
  inputs:
  - name: itemIndex
    type: number
  outputs:
  - name: itemID
    type: number
C_ToyBox.GetToyInfo:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: itemID
    type: number
  - name: toyName
    type: string
  - name: icon
    type: number
  - name: isFavorite
    type: boolean
  - name: hasFanfare
    type: boolean
  - name: itemQuality
    type: number
C_ToyBox.GetToyLink: {}
C_ToyBox.GetUncollectedShown: {}
C_ToyBox.GetUnusableShown: {}
C_ToyBox.HasFavorites:
  inputs: {}
  outputs:
  - name: value
    type: boolean
C_ToyBox.IsExpansionTypeFilterChecked: {}
C_ToyBox.IsSourceTypeFilterChecked: {}
C_ToyBox.IsToyUsable: {}
C_ToyBox.PickupToyBoxItem: {}
C_ToyBox.SetAllExpansionTypeFilters: {}
C_ToyBox.SetAllSourceTypeFilters: {}
C_ToyBox.SetCollectedShown: {}
C_ToyBox.SetExpansionTypeFilter: {}
C_ToyBox.SetFilterString: {}
C_ToyBox.SetIsFavorite: {}
C_ToyBox.SetSourceTypeFilter: {}
C_ToyBox.SetUncollectedShown: {}
C_ToyBox.SetUnusableShown: {}
C_ToyBoxInfo.ClearFanfare:
  inputs:
  - name: itemID
    type: number
  outputs: {}
C_ToyBoxInfo.IsToySourceValid:
  inputs:
  - name: source
    type: number
  outputs:
  - name: isToySourceValid
    type: boolean
C_ToyBoxInfo.IsUsingDefaultFilters:
  inputs: {}
  outputs:
  - name: isUsingDefaultFilters
    type: boolean
C_ToyBoxInfo.NeedsFanfare:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: needsFanfare
    type: boolean
C_ToyBoxInfo.SetDefaultFilters:
  inputs: {}
  outputs: {}
C_TradeSkillUI.AnyRecipeCategoriesFiltered: {}
C_TradeSkillUI.AreAnyInventorySlotsFiltered: {}
C_TradeSkillUI.CanObliterateCursorItem: {}
C_TradeSkillUI.CanStoreEnchantInItem:
  inputs:
  - name: itemGUID
    type: string
  outputs:
  - name: canStore
    type: boolean
C_TradeSkillUI.CanTradeSkillListLink: {}
C_TradeSkillUI.ClearInventorySlotFilter: {}
C_TradeSkillUI.ClearPendingObliterateItem: {}
C_TradeSkillUI.ClearRecipeCategoryFilter: {}
C_TradeSkillUI.ClearRecipeSourceTypeFilter: {}
C_TradeSkillUI.CloseObliterumForge:
  inputs: {}
  outputs: {}
C_TradeSkillUI.CloseTradeSkill:
  inputs: {}
  outputs: {}
C_TradeSkillUI.CraftEnchant:
  inputs:
  - name: recipeSpellID
    type: number
  - default: 1
    name: numCasts
    type: number
  - name: craftingReagents
    nilable: true
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: itemTarget
    nilable: true
    type:
      structure: ItemLocation
  outputs: {}
C_TradeSkillUI.CraftRecipe:
  inputs:
  - name: recipeSpellID
    type: number
  - default: 1
    name: numCasts
    type: number
  - name: craftingReagents
    nilable: true
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: recipeLevel
    nilable: true
    type: number
  - name: orderID
    nilable: true
    type: number
  outputs: {}
C_TradeSkillUI.CraftSalvage:
  inputs:
  - name: recipeSpellID
    type: number
  - default: 1
    name: numCasts
    type: number
  - name: itemTarget
    type:
      structure: ItemLocation
  outputs: {}
C_TradeSkillUI.DoesRecraftingRecipeAcceptItem:
  inputs:
  - name: itemLocation
    type:
      structure: ItemLocation
  - name: recipeID
    type: number
  outputs:
  - name: result
    type: boolean
C_TradeSkillUI.DropPendingObliterateItemFromCursor: {}
C_TradeSkillUI.GetAllFilterableInventorySlots: {}
C_TradeSkillUI.GetAllFilterableInventorySlotsCount: {}
C_TradeSkillUI.GetAllProfessionTradeSkillLines:
  inputs: {}
  outputs:
  - name: skillLineID
    type:
      arrayof: number
C_TradeSkillUI.GetAllRecipeIDs: {}
C_TradeSkillUI.GetBaseProfessionInfo:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: ProfessionInfo
C_TradeSkillUI.GetCategories:
  inputs: {}
  outputs: {}
C_TradeSkillUI.GetCategoryInfo: {}
C_TradeSkillUI.GetChildProfessionInfo:
  inputs: {}
  outputs:
  - name: info
    type:
      structure: ProfessionInfo
C_TradeSkillUI.GetChildProfessionInfos:
  inputs: {}
  outputs:
  - name: infos
    type:
      arrayof:
        structure: ProfessionInfo
C_TradeSkillUI.GetCraftableCount:
  inputs:
  - name: recipeSpellID
    type: number
  - name: recipeLevel
    nilable: true
    type: number
  outputs:
  - name: numAvailable
    type: number
C_TradeSkillUI.GetCraftingOperationInfo:
  inputs:
  - name: recipeID
    type: number
  - name: craftingReagents
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: allocationItemGUID
    nilable: true
    type: string
  outputs:
  - name: info
    nilable: true
    type:
      structure: CraftingOperationInfo
C_TradeSkillUI.GetCraftingOperationInfoForOrder:
  inputs:
  - name: recipeID
    type: number
  - name: craftingReagents
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: orderID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: CraftingOperationInfo
C_TradeSkillUI.GetCraftingReagentBonusText:
  inputs:
  - name: recipeSpellID
    type: number
  - name: craftingReagentIndex
    type: number
  - name: craftingReagents
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: allocationItemGUID
    nilable: true
    type: string
  outputs:
  - name: bonusText
    type:
      arrayof: string
C_TradeSkillUI.GetCraftingTargetItems:
  inputs:
  - name: itemIDs
    type:
      arrayof: number
  outputs:
  - name: items
    type:
      arrayof:
        structure: CraftingTargetItem
C_TradeSkillUI.GetEnchantItems:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: items
    type:
      arrayof: string
C_TradeSkillUI.GetFactionSpecificOutputItem:
  inputs:
  - name: recipeSpellID
    type: number
  outputs:
  - name: itemID
    nilable: true
    type: number
C_TradeSkillUI.GetFilterableInventorySlotName: {}
C_TradeSkillUI.GetFilterableInventorySlots: {}
C_TradeSkillUI.GetFilteredRecipeIDs:
  inputs: {}
  outputs:
  - name: recipeIDs
    stub: {}
    type:
      arrayof: number
C_TradeSkillUI.GetGatheringOperationInfo:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: GatheringOperationInfo
C_TradeSkillUI.GetHideUnownedFlags:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: cannotModifyHideUnowned
    type: boolean
  - name: alwaysShowUnowned
    type: boolean
C_TradeSkillUI.GetItemCraftedQualityByItemInfo:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: quality
    nilable: true
    type: number
C_TradeSkillUI.GetItemReagentQualityByItemInfo:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: quality
    nilable: true
    type: number
C_TradeSkillUI.GetItemSlotModifications:
  inputs:
  - name: itemGUID
    type: string
  outputs:
  - name: slotMods
    type:
      arrayof:
        structure: CraftingItemSlotModification
C_TradeSkillUI.GetItemSlotModificationsForOrder:
  inputs:
  - name: orderID
    type: number
  outputs:
  - name: slotMods
    type:
      arrayof:
        structure: CraftingItemSlotModification
C_TradeSkillUI.GetObliterateSpellID: {}
C_TradeSkillUI.GetOnlyShowFirstCraftRecipes: {}
C_TradeSkillUI.GetOnlyShowMakeableRecipes: {}
C_TradeSkillUI.GetOnlyShowSkillUpRecipes: {}
C_TradeSkillUI.GetOriginalCraftRecipeID:
  inputs:
  - name: itemGUID
    type: string
  outputs:
  - name: recipeID
    nilable: true
    type: number
  - name: skillLineAbilityID
    nilable: true
    type: number
C_TradeSkillUI.GetPendingObliterateItemID:
  inputs: {}
  outputs:
  - name: itemID
    nilable: true
    type: number
C_TradeSkillUI.GetPendingObliterateItemLink: {}
C_TradeSkillUI.GetProfessionByInventorySlot:
  inputs:
  - name: slot
    type: number
  outputs:
  - name: profession
    nilable: true
    type:
      enum: Profession
C_TradeSkillUI.GetProfessionChildSkillLineID:
  inputs: {}
  outputs:
  - name: skillLineID
    type: number
C_TradeSkillUI.GetProfessionForCursorItem:
  inputs: {}
  outputs:
  - name: profession
    nilable: true
    type:
      enum: Profession
C_TradeSkillUI.GetProfessionInfoByRecipeID:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: info
    type:
      structure: ProfessionInfo
C_TradeSkillUI.GetProfessionInfoBySkillLineID:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: info
    type:
      structure: ProfessionInfo
C_TradeSkillUI.GetProfessionInventorySlots:
  inputs: {}
  outputs:
  - name: invSlots
    type:
      arrayof: number
C_TradeSkillUI.GetProfessionNameForSkillLineAbility:
  inputs:
  - name: skillLineAbilityID
    type: number
  outputs:
  - name: professionNmae
    type: string
C_TradeSkillUI.GetProfessionSkillLineID:
  inputs:
  - name: profession
    type:
      enum: Profession
  outputs:
  - name: skillLineID
    type: number
C_TradeSkillUI.GetProfessionSlots:
  inputs:
  - name: profession
    type:
      enum: Profession
  outputs:
  - name: slots
    type:
      arrayof: number
C_TradeSkillUI.GetProfessionSpells:
  inputs:
  - name: professionID
    type: number
  - name: skillLineID
    nilable: true
    type: number
  outputs:
  - name: knownSpells
    type:
      arrayof: number
C_TradeSkillUI.GetQualitiesForRecipe:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: qualityIDs
    nilable: true
    type:
      arrayof: number
C_TradeSkillUI.GetReagentDifficultyText:
  inputs:
  - name: craftingReagentIndex
    type: number
  - name: craftingReagents
    type:
      arrayof:
        structure: CraftingReagentInfo
  outputs:
  - name: bonusText
    type: string
C_TradeSkillUI.GetReagentRequirementItemIDs:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: itemIDs
    type:
      arrayof: number
C_TradeSkillUI.GetReagentSlotStatus:
  inputs:
  - name: mcrSlotID
    type: number
  - name: recipeSpellID
    type: number
  - name: skillLineAbilityID
    type: number
  outputs:
  - name: locked
    type: boolean
  - name: lockedReason
    type: string
C_TradeSkillUI.GetRecipeCooldown: {}
C_TradeSkillUI.GetRecipeDescription:
  inputs:
  - name: recipeID
    type: number
  - name: craftingReagents
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: allocationItemGUID
    nilable: true
    type: string
  outputs:
  - name: description
    type: string
C_TradeSkillUI.GetRecipeFixedReagentItemLink:
  inputs:
  - name: recipeID
    type: number
  - name: dataSlotIndex
    type: number
  outputs:
  - name: link
    type: string
C_TradeSkillUI.GetRecipeInfo:
  inputs:
  - name: recipeSpellID
    type: number
  - name: recipeLevel
    nilable: true
    type: number
  outputs:
  - name: recipeInfo
    nilable: true
    type:
      structure: TradeSkillRecipeInfo
C_TradeSkillUI.GetRecipeInfoForSkillLineAbility:
  inputs:
  - name: skillLineAbilityID
    type: number
  - name: recipeLevel
    nilable: true
    type: number
  outputs:
  - name: recipeInfo
    nilable: true
    type:
      structure: TradeSkillRecipeInfo
C_TradeSkillUI.GetRecipeItemLevelFilter: {}
C_TradeSkillUI.GetRecipeItemLink: {}
C_TradeSkillUI.GetRecipeItemNameFilter:
  inputs: {}
  outputs:
  - name: filter
    type: string
C_TradeSkillUI.GetRecipeLink: {}
C_TradeSkillUI.GetRecipeOutputItemData:
  inputs:
  - name: recipeSpellID
    type: number
  - name: reagents
    nilable: true
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: allocationItemGUID
    nilable: true
    type: string
  - name: overrideQualityID
    nilable: true
    type: number
  - name: recraftOrderID
    nilable: true
    type: number
  outputs:
  - name: outputInfo
    type:
      structure: CraftingRecipeOutputInfo
C_TradeSkillUI.GetRecipeQualityItemIDs:
  inputs:
  - name: recipeSpellID
    type: number
  outputs:
  - name: qualityItemIDs
    nilable: true
    type:
      arrayof: number
C_TradeSkillUI.GetRecipeQualityReagentItemLink:
  inputs:
  - name: recipeID
    type: number
  - name: dataSlotIndex
    type: number
  - name: qualityIndex
    type: number
  outputs:
  - name: link
    type: string
C_TradeSkillUI.GetRecipeRequirements:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: requirements
    type:
      arrayof:
        structure: CraftingRecipeRequirement
C_TradeSkillUI.GetRecipeSchematic:
  inputs:
  - name: recipeSpellID
    type: number
  - name: isRecraft
    type: boolean
  - name: recipeLevel
    nilable: true
    type: number
  outputs:
  - name: schematic
    type:
      structure: CraftingRecipeSchematic
C_TradeSkillUI.GetRecipeSourceText: {}
C_TradeSkillUI.GetRecipesTracked:
  inputs:
  - name: isRecraft
    type: boolean
  outputs:
  - name: recipeIDs
    type:
      arrayof: number
C_TradeSkillUI.GetRecraftItems:
  inputs:
  - name: recipeID
    nilable: true
    type: number
  outputs:
  - name: items
    type:
      arrayof: string
C_TradeSkillUI.GetRecraftRemovalWarnings:
  inputs:
  - name: itemGUID
    type: string
  - name: replacedItemIDs
    type:
      arrayof: number
  outputs:
  - name: warnings
    type:
      arrayof: string
C_TradeSkillUI.GetRemainingRecasts:
  inputs: {}
  outputs:
  - name: remaining
    type: number
C_TradeSkillUI.GetSalvagableItemIDs:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: itemIDs
    type:
      arrayof: number
C_TradeSkillUI.GetShowLearned:
  inputs: {}
  outputs:
  - name: flag
    type: boolean
C_TradeSkillUI.GetShowUnlearned:
  inputs: {}
  outputs:
  - name: flag
    type: boolean
C_TradeSkillUI.GetSkillLineForGear:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: skillLineID
    nilable: true
    type: number
C_TradeSkillUI.GetSourceTypeFilter:
  inputs: {}
  outputs:
  - name: sourceTypeFilter
    type: number
C_TradeSkillUI.GetSubCategories: {}
C_TradeSkillUI.GetTradeSkillDisplayName:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: professionDisplayName
    type: string
C_TradeSkillUI.GetTradeSkillLineForRecipe: {}
C_TradeSkillUI.GetTradeSkillListLink: {}
C_TradeSkillUI.GetTradeSkillTexture: {}
C_TradeSkillUI.HasFavoriteOrderRecipes:
  inputs: {}
  outputs:
  - name: hasFavorites
    type: boolean
C_TradeSkillUI.IsAnyRecipeFromSource: {}
C_TradeSkillUI.IsDataSourceChanging: {}
C_TradeSkillUI.IsEnchantTargetValid:
  inputs:
  - name: recipeID
    type: number
  - name: itemGUID
    type: string
  - name: craftingReagents
    nilable: true
    type:
      arrayof:
        structure: CraftingReagentInfo
  outputs:
  - name: valid
    type: boolean
C_TradeSkillUI.IsInventorySlotFiltered: {}
C_TradeSkillUI.IsNearProfessionSpellFocus:
  inputs:
  - name: profession
    type:
      enum: Profession
  outputs:
  - name: nearFocus
    type: boolean
C_TradeSkillUI.IsNPCCrafting:
  inputs: {}
  outputs:
  - name: result
    type: boolean
C_TradeSkillUI.IsOriginalCraftRecipeLearned:
  inputs:
  - name: itemGUID
    type: string
  outputs:
  - name: learned
    type: boolean
C_TradeSkillUI.IsRecipeCategoryFiltered: {}
C_TradeSkillUI.IsRecipeFavorite: {}
C_TradeSkillUI.IsRecipeFirstCraft:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: result
    type: boolean
C_TradeSkillUI.IsRecipeInBaseSkillLine:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: result
    type: boolean
C_TradeSkillUI.IsRecipeInSkillLine:
  inputs:
  - name: recipeID
    type: number
  - name: skillLineID
    type: number
  outputs:
  - name: result
    type: boolean
C_TradeSkillUI.IsRecipeProfessionLearned:
  inputs:
  - name: recipeID
    type: number
  outputs:
  - name: recipeProfessionLearned
    type: boolean
C_TradeSkillUI.IsRecipeRepeating: {}
C_TradeSkillUI.IsRecipeSearchInProgress: {}
C_TradeSkillUI.IsRecipeSourceTypeFiltered: {}
C_TradeSkillUI.IsRecipeTracked:
  inputs:
  - name: recipeID
    type: number
  - name: isRecraft
    type: boolean
  outputs:
  - name: tracked
    type: boolean
C_TradeSkillUI.IsRecraftItemEquipped:
  inputs:
  - name: recraftItemGUID
    type: string
  outputs:
  - name: isEquipped
    type: boolean
C_TradeSkillUI.IsRecraftReagentValid:
  inputs:
  - name: itemGUID
    type: string
  - name: itemID
    type: number
  outputs:
  - name: valid
    type: boolean
C_TradeSkillUI.IsRuneforging:
  inputs: {}
  outputs:
  - name: result
    type: boolean
C_TradeSkillUI.IsTradeSkillGuild:
  inputs: {}
  outputs:
  - name: value
    type: boolean
C_TradeSkillUI.IsTradeSkillGuildMember: {}
C_TradeSkillUI.IsTradeSkillLinked: {}
C_TradeSkillUI.IsTradeSkillReady:
  inputs: {}
  outputs:
  - type: boolean
C_TradeSkillUI.ObliterateItem: {}
C_TradeSkillUI.OpenRecipe:
  inputs:
  - name: recipeID
    type: number
  outputs: {}
C_TradeSkillUI.OpenTradeSkill:
  inputs:
  - name: skillLineID
    type: number
  outputs:
  - name: opened
    type: boolean
C_TradeSkillUI.RecraftLimitCategoryValid:
  inputs:
  - name: reagentItemID
    type: number
  outputs:
  - name: recraftValid
    type: boolean
C_TradeSkillUI.RecraftRecipe:
  inputs:
  - name: itemGUID
    type: string
  - name: craftingReagents
    nilable: true
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: removedModifications
    nilable: true
    type:
      arrayof:
        structure: CraftingItemSlotModification
  outputs:
  - name: result
    type: boolean
C_TradeSkillUI.RecraftRecipeForOrder:
  inputs:
  - name: orderID
    type: number
  - name: itemGUID
    type: string
  - name: craftingReagents
    nilable: true
    type:
      arrayof:
        structure: CraftingReagentInfo
  - name: removedModifications
    nilable: true
    type:
      arrayof:
        structure: CraftingItemSlotModification
  outputs:
  - name: result
    type: boolean
C_TradeSkillUI.SetInventorySlotFilter: {}
C_TradeSkillUI.SetOnlyShowAvailableForOrders:
  inputs:
  - name: flag
    type: boolean
  outputs: {}
C_TradeSkillUI.SetOnlyShowFirstCraftRecipes: {}
C_TradeSkillUI.SetOnlyShowMakeableRecipes: {}
C_TradeSkillUI.SetOnlyShowSkillUpRecipes: {}
C_TradeSkillUI.SetProfessionChildSkillLineID:
  inputs:
  - name: skillLineID
    type: number
  outputs: {}
C_TradeSkillUI.SetRecipeCategoryFilter: {}
C_TradeSkillUI.SetRecipeFavorite: {}
C_TradeSkillUI.SetRecipeItemLevelFilter: {}
C_TradeSkillUI.SetRecipeItemNameFilter: {}
C_TradeSkillUI.SetRecipeSourceTypeFilter: {}
C_TradeSkillUI.SetRecipeTracked:
  inputs:
  - name: recipeID
    type: number
  - name: tracked
    type: boolean
  - name: isRecraft
    type: boolean
  outputs: {}
C_TradeSkillUI.SetShowLearned:
  inputs:
  - name: flag
    type: boolean
  outputs: {}
C_TradeSkillUI.SetShowUnlearned:
  inputs:
  - name: flag
    type: boolean
  outputs: {}
C_TradeSkillUI.SetSourceTypeFilter:
  inputs:
  - name: sourceTypeFilter
    type: number
  outputs: {}
C_TradeSkillUI.StopRecipeRepeat: {}
C_Traits.CanPurchaseRank:
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  - name: nodeEntryID
    type: number
  outputs:
  - name: canPurchase
    type: boolean
C_Traits.CanRefundRank:
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  outputs:
  - name: canRefund
    type: boolean
C_Traits.CascadeRepurchaseRanks:
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  - name: entryID
    nilable: true
    type: number
  outputs:
  - name: success
    type: boolean
C_Traits.ClearCascadeRepurchaseHistory:
  inputs:
  - name: configID
    type: number
  outputs: {}
C_Traits.CloseTraitSystemInteraction:
  inputs: {}
  outputs: {}
C_Traits.CommitConfig:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: success
    type: boolean
C_Traits.ConfigHasStagedChanges:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: hasChanges
    type: boolean
C_Traits.GenerateImportString:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: importString
    type: string
C_Traits.GenerateInspectImportString:
  inputs:
  - name: target
    type: string
  outputs:
  - name: importString
    type: string
C_Traits.GetConditionInfo:
  inputs:
  - name: configID
    type: number
  - name: condID
    type: number
  outputs:
  - name: condInfo
    type:
      structure: C_Traits.TraitCondInfo
C_Traits.GetConfigIDBySystemID:
  inputs:
  - name: systemID
    type: number
  outputs:
  - name: configID
    type: number
C_Traits.GetConfigIDByTreeID:
  inputs:
  - name: treeID
    type: number
  outputs:
  - name: configID
    type: number
C_Traits.GetConfigInfo:
  impl: C_Traits.GetConfigInfo
  inputs:
  - name: configID
    type: number
  mayreturnnothing: true
  outputs:
  - name: configInfo
    type:
      structure: C_Traits.TraitConfigInfo
C_Traits.GetConfigsByType:
  inputs:
  - name: configType
    type:
      enum: TraitConfigType
  outputs:
  - name: configIDs
    type:
      arrayof: number
C_Traits.GetDefinitionInfo:
  inputs:
  - name: definitionID
    type: number
  outputs:
  - name: definitionInfo
    type:
      structure: C_Traits.TraitDefinitionInfo
C_Traits.GetEntryInfo:
  inputs:
  - name: configID
    type: number
  - name: entryID
    type: number
  outputs:
  - name: entryInfo
    type:
      structure: C_Traits.TraitEntryInfo
C_Traits.GetLoadoutSerializationVersion:
  inputs: {}
  outputs:
  - name: serializationVersion
    type: number
C_Traits.GetNodeCost:
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  outputs:
  - name: costs
    type:
      arrayof:
        structure: C_Traits.TraitCurrencyCost
C_Traits.GetNodeInfo:
  impl: C_Traits.GetNodeInfo
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  outputs:
  - name: nodeInfo
    type:
      structure: C_Traits.TraitNodeInfo
C_Traits.GetStagedChangesCost:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: costs
    type:
      arrayof:
        structure: C_Traits.TraitCurrencyCost
C_Traits.GetStagedPurchases:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: nodeIDsWithPurchases
    type:
      arrayof: number
C_Traits.GetTraitCurrencyInfo:
  inputs:
  - name: traitCurrencyID
    type: number
  outputs:
  - name: flags
    type: number
  - name: type
    type: number
  - name: currencyTypesID
    nilable: true
    type: number
  - name: icon
    nilable: true
    type: number
C_Traits.GetTraitDescription:
  inputs:
  - name: entryID
    type: number
  - name: rank
    type: number
  outputs:
  - name: description
    type: string
C_Traits.GetTraitSystemFlags:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: flags
    type: number
C_Traits.GetTraitSystemWidgetSetID:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: uiWidgetSetID
    type: number
C_Traits.GetTreeCurrencyInfo:
  inputs:
  - name: configID
    type: number
  - name: treeID
    type: number
  - name: excludeStagedChanges
    type: boolean
  outputs:
  - name: treeCurrencyInfo
    type:
      arrayof:
        structure: C_Traits.TreeCurrencyInfo
C_Traits.GetTreeHash:
  inputs:
  - name: treeID
    type: number
  outputs:
  - name: result
    type:
      arrayof: number
C_Traits.GetTreeInfo:
  inputs:
  - name: configID
    type: number
  - name: treeID
    type: number
  outputs:
  - name: treeInfo
    type:
      structure: C_Traits.TraitTreeInfo
C_Traits.GetTreeNodes:
  impl: C_Traits.GetTreeNodes
  inputs:
  - name: treeID
    type: number
  outputs:
  - name: nodeIDs
    type:
      arrayof: number
C_Traits.HasValidInspectData:
  inputs: {}
  outputs:
  - name: hasValidInspectData
    type: boolean
C_Traits.IsReadyForCommit:
  inputs: {}
  outputs:
  - name: isReadyForCommit
    type: boolean
C_Traits.PurchaseRank:
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  outputs:
  - name: success
    type: boolean
C_Traits.RefundAllRanks:
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  outputs:
  - name: success
    type: boolean
C_Traits.RefundRank:
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  - name: clearEdges
    nilable: true
    type: boolean
  outputs:
  - name: success
    type: boolean
C_Traits.ResetTree:
  inputs:
  - name: configID
    type: number
  - name: treeID
    type: number
  outputs:
  - name: success
    type: boolean
C_Traits.ResetTreeByCurrency:
  inputs:
  - name: configID
    type: number
  - name: treeID
    type: number
  - name: traitCurrencyID
    type: number
  outputs:
  - name: success
    type: boolean
C_Traits.RollbackConfig:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: success
    type: boolean
C_Traits.SetSelection:
  inputs:
  - name: configID
    type: number
  - name: nodeID
    type: number
  - name: nodeEntryID
    nilable: true
    type: number
  - name: clearEdges
    nilable: true
    type: boolean
  outputs:
  - name: success
    type: boolean
C_Traits.StageConfig:
  inputs:
  - name: configID
    type: number
  outputs:
  - name: success
    type: boolean
C_Traits.TalentTestUnlearnSpells:
  inputs: {}
  outputs: {}
C_Transmog.ApplyAllPending:
  inputs:
  - default: false
    name: currentSpecOnly
    type: boolean
  outputs:
  - name: requestSent
    type: boolean
C_Transmog.CanHaveSecondaryAppearanceForSlotID:
  inputs:
  - name: slotID
    type: number
  outputs:
  - name: canHaveSecondaryAppearance
    type: boolean
C_Transmog.CanTransmogItem:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: canBeTransmogged
    type: boolean
  - name: selfFailureReason
    nilable: true
    type: string
  - name: canTransmogOthers
    type: boolean
  - name: othersFailureReason
    nilable: true
    type: string
C_Transmog.CanTransmogItemWithItem:
  inputs:
  - name: targetItemInfo
    type: string
  - name: sourceItemInfo
    type: string
  outputs:
  - name: canTransmog
    type: boolean
  - name: failureReason
    nilable: true
    type: string
C_Transmog.ClearAllPending:
  inputs: {}
  outputs: {}
C_Transmog.ClearPending:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  outputs: {}
C_Transmog.Close:
  inputs: {}
  outputs: {}
C_Transmog.ExtractTransmogIDList:
  inputs:
  - name: input
    type: string
  outputs:
  - name: transmogIDList
    type:
      arrayof: number
C_Transmog.GetApplyCost:
  inputs: {}
  outputs:
  - name: cost
    nilable: true
    type: number
C_Transmog.GetApplyWarnings:
  inputs: {}
  outputs:
  - name: warnings
    type:
      arrayof:
        structure: C_Transmog.TransmogApplyWarningInfo
C_Transmog.GetBaseCategory:
  inputs:
  - name: transmogID
    type: number
  outputs:
  - name: categoryID
    type:
      enum: TransmogCollectionType
C_Transmog.GetCreatureDisplayIDForSource:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: creatureDisplayID
    nilable: true
    type: number
C_Transmog.GetItemIDForSource:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: itemID
    nilable: true
    type: number
C_Transmog.GetPending:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  outputs:
  - name: pendingInfo
    type:
      structure: TransmogPendingInfo
C_Transmog.GetSlotEffectiveCategory:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  outputs:
  - name: categoryID
    type:
      enum: TransmogCollectionType
C_Transmog.GetSlotForInventoryType:
  inputs:
  - name: inventoryType
    type: number
  outputs:
  - name: slot
    type: number
C_Transmog.GetSlotInfo:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  outputs:
  - name: isTransmogrified
    type: boolean
  - name: hasPending
    type: boolean
  - name: isPendingCollected
    type: boolean
  - name: canTransmogrify
    type: boolean
  - name: cannotTransmogrifyReason
    type: number
  - name: hasUndo
    type: boolean
  - name: isHideVisual
    type: boolean
  - name: texture
    nilable: true
    type: number
C_Transmog.GetSlotUseError:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  outputs:
  - name: errorCode
    type: number
  - name: errorString
    type: string
C_Transmog.GetSlotVisualInfo:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  outputs:
  - name: baseSourceID
    type: number
  - name: baseVisualID
    type: number
  - name: appliedSourceID
    type: number
  - name: appliedVisualID
    type: number
  - name: pendingSourceID
    type: number
  - name: pendingVisualID
    type: number
  - name: hasUndo
    type: boolean
  - name: isHideVisual
    type: boolean
  - name: itemSubclass
    type: number
C_Transmog.IsAtTransmogNPC:
  inputs: {}
  outputs:
  - name: isAtNPC
    type: boolean
C_Transmog.IsSlotBeingCollapsed:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  outputs:
  - name: isBeingCollapsed
    type: boolean
C_Transmog.LoadOutfit:
  inputs:
  - name: outfitID
    type: number
  outputs: {}
C_Transmog.SetPending:
  inputs:
  - name: transmogLocation
    type:
      structure: TransmogLocation
  - name: pendingInfo
    type:
      structure: TransmogPendingInfo
  outputs: {}
C_TransmogCollection.AccountCanCollectSource:
  inputs:
  - name: sourceID
    type: number
  outputs:
  - name: hasItemData
    type: boolean
  - name: canCollect
    type: boolean
C_TransmogCollection.AreAllCollectionTypeFiltersChecked:
  inputs: {}
  outputs:
  - name: areAllCollectionTypeFiltersChecked
    type: boolean
C_TransmogCollection.AreAllSourceTypeFiltersChecked:
  inputs: {}
  outputs:
  - name: areAllSourceTypeFiltersChecked
    type: boolean
C_TransmogCollection.CanAppearanceHaveIllusion:
  inputs:
  - name: appearanceID
    type: number
  outputs:
  - name: canHaveIllusion
    type: boolean
C_TransmogCollection.ClearNewAppearance:
  inputs:
  - name: visualID
    type: number
  outputs: {}
C_TransmogCollection.ClearSearch:
  inputs:
  - name: searchType
    type:
      enum: TransmogSearchType
  outputs:
  - name: completed
    type: boolean
C_TransmogCollection.DeleteOutfit:
  inputs:
  - name: outfitID
    type: number
  outputs: {}
C_TransmogCollection.EndSearch:
  inputs: {}
  outputs: {}
C_TransmogCollection.GetAllAppearanceSources:
  inputs:
  - name: itemAppearanceID
    type: number
  outputs:
  - name: itemModifiedAppearanceIDs
    type:
      arrayof: number
C_TransmogCollection.GetAppearanceCameraID:
  inputs:
  - name: itemAppearanceID
    type: number
  - name: variation
    nilable: true
    type:
      enum: TransmogCameraVariation
  outputs:
  - name: cameraID
    type: number
C_TransmogCollection.GetAppearanceCameraIDBySource:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  - name: variation
    nilable: true
    type:
      enum: TransmogCameraVariation
  outputs:
  - name: cameraID
    type: number
C_TransmogCollection.GetAppearanceInfoBySource:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: info
    type:
      structure: C_TransmogCollection.TransmogAppearanceInfoBySourceData
C_TransmogCollection.GetAppearanceSourceDrops:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: encounterInfo
    type:
      arrayof:
        structure: C_TransmogCollection.TransmogAppearanceJournalEncounterInfo
C_TransmogCollection.GetAppearanceSourceInfo:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: category
    type:
      enum: TransmogCollectionType
  - name: itemAppearanceID
    type: number
  - name: canHaveIllusion
    type: boolean
  - name: icon
    type: number
  - name: isCollected
    type: boolean
  - name: itemLink
    type: string
  - name: transmoglink
    type: string
  - name: sourceType
    nilable: true
    type: number
  - name: itemSubClass
    type: number
C_TransmogCollection.GetAppearanceSources:
  inputs:
  - name: appearanceID
    type: number
  - name: categoryType
    nilable: true
    type:
      enum: TransmogCollectionType
  - name: transmogLocation
    nilable: true
    type:
      structure: TransmogLocation
  outputs:
  - name: sources
    type:
      arrayof:
        structure: AppearanceSourceInfo
C_TransmogCollection.GetArtifactAppearanceStrings:
  inputs:
  - name: appearanceID
    type: number
  outputs:
  - name: name
    type: string
  - name: hyperlink
    type: string
C_TransmogCollection.GetCategoryAppearances:
  inputs:
  - name: category
    type:
      enum: TransmogCollectionType
  - name: transmogLocation
    nilable: true
    type:
      structure: TransmogLocation
  outputs:
  - name: appearances
    type:
      arrayof:
        structure: C_TransmogCollection.TransmogCategoryAppearanceInfo
C_TransmogCollection.GetCategoryCollectedCount:
  inputs:
  - name: category
    type:
      enum: TransmogCollectionType
  outputs:
  - name: count
    type: number
C_TransmogCollection.GetCategoryForItem:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: collectionCategory
    type:
      enum: TransmogCollectionType
C_TransmogCollection.GetCategoryInfo:
  inputs:
  - name: category
    type:
      enum: TransmogCollectionType
  outputs:
  - name: name
    type: string
  - default: false
    name: isWeapon
    type: boolean
  - default: false
    name: canHaveIllusions
    type: boolean
  - default: false
    name: canMainHand
    type: boolean
  - default: false
    name: canOffHand
    type: boolean
C_TransmogCollection.GetCategoryTotal:
  inputs:
  - name: category
    type:
      enum: TransmogCollectionType
  outputs:
  - name: total
    type: number
C_TransmogCollection.GetCollectedShown:
  inputs: {}
  outputs:
  - name: shown
    type: boolean
C_TransmogCollection.GetFallbackWeaponAppearance:
  inputs: {}
  outputs:
  - name: appearanceID
    nilable: true
    type: number
C_TransmogCollection.GetIllusionInfo:
  inputs:
  - name: illusionID
    type: number
  outputs:
  - name: info
    type:
      structure: C_TransmogCollection.TransmogIllusionInfo
C_TransmogCollection.GetIllusions:
  inputs: {}
  outputs:
  - name: illusions
    type:
      arrayof:
        structure: C_TransmogCollection.TransmogIllusionInfo
C_TransmogCollection.GetIllusionStrings:
  inputs:
  - name: illusionID
    type: number
  outputs:
  - name: name
    type: string
  - name: hyperlink
    type: string
  - name: sourceText
    nilable: true
    type: string
C_TransmogCollection.GetInspectItemTransmogInfoList:
  inputs: {}
  outputs:
  - name: list
    type:
      arrayof:
        structure: ItemTransmogInfo
C_TransmogCollection.GetIsAppearanceFavorite:
  inputs:
  - name: itemAppearanceID
    type: number
  outputs:
  - name: isFavorite
    type: boolean
C_TransmogCollection.GetItemInfo:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: itemAppearanceID
    type: number
  - name: itemModifiedAppearanceID
    type: number
C_TransmogCollection.GetItemTransmogInfoListFromOutfitHyperlink:
  inputs:
  - name: hyperlink
    type: string
  outputs:
  - name: list
    type:
      arrayof:
        structure: ItemTransmogInfo
C_TransmogCollection.GetLatestAppearance:
  inputs: {}
  outputs:
  - name: visualID
    type: number
  - name: category
    stub: 1
    type:
      enum: TransmogCollectionType
C_TransmogCollection.GetNumMaxOutfits:
  inputs: {}
  outputs:
  - name: maxOutfits
    type: number
C_TransmogCollection.GetNumTransmogSources:
  inputs: {}
  outputs:
  - name: count
    type: number
C_TransmogCollection.GetOutfitHyperlinkFromItemTransmogInfoList:
  inputs:
  - name: itemTransmogInfoList
    type:
      arrayof:
        structure: ItemTransmogInfo
  outputs:
  - name: hyperlink
    type: string
C_TransmogCollection.GetOutfitInfo:
  inputs:
  - name: outfitID
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
C_TransmogCollection.GetOutfitItemTransmogInfoList:
  inputs:
  - name: outfitID
    type: number
  outputs:
  - name: list
    type:
      arrayof:
        structure: ItemTransmogInfo
C_TransmogCollection.GetOutfits:
  inputs: {}
  outputs:
  - name: outfitID
    type:
      arrayof: number
C_TransmogCollection.GetPairedArtifactAppearance:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: pairedItemModifiedAppearanceID
    type: number
C_TransmogCollection.GetSourceIcon:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: icon
    type: number
C_TransmogCollection.GetSourceInfo:
  inputs:
  - name: sourceID
    type: number
  outputs:
  - name: sourceInfo
    type:
      structure: AppearanceSourceInfo
C_TransmogCollection.GetSourceItemID:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: itemID
    type: number
C_TransmogCollection.GetSourceRequiredHoliday:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: holidayName
    type: string
C_TransmogCollection.GetUncollectedShown:
  inputs: {}
  outputs:
  - name: shown
    type: boolean
C_TransmogCollection.HasFavorites:
  inputs: {}
  outputs:
  - name: hasFavorites
    type: boolean
C_TransmogCollection.IsAppearanceHiddenVisual:
  inputs:
  - name: appearanceID
    type: number
  outputs:
  - name: isHiddenVisual
    type: boolean
C_TransmogCollection.IsCategoryValidForItem:
  inputs:
  - name: category
    type:
      enum: TransmogCollectionType
  - name: itemInfo
    type: string
  outputs:
  - name: isValid
    type: boolean
C_TransmogCollection.IsNewAppearance:
  inputs:
  - name: visualID
    type: number
  outputs:
  - name: isNew
    type: boolean
C_TransmogCollection.IsSearchDBLoading:
  inputs: {}
  outputs:
  - name: isLoading
    type: boolean
C_TransmogCollection.IsSearchInProgress:
  inputs:
  - name: searchType
    type:
      enum: TransmogSearchType
  outputs:
  - name: inProgress
    type: boolean
C_TransmogCollection.IsSourceTypeFilterChecked:
  inputs:
  - name: index
    type: number
  outputs:
  - name: checked
    type: boolean
C_TransmogCollection.IsUsingDefaultFilters:
  inputs: {}
  outputs:
  - name: isUsingDefaultFilters
    type: boolean
C_TransmogCollection.ModifyOutfit:
  inputs:
  - name: outfitID
    type: number
  - name: itemTransmogInfoList
    type:
      arrayof:
        structure: ItemTransmogInfo
  outputs: {}
C_TransmogCollection.NewOutfit:
  inputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: itemTransmogInfoList
    type:
      arrayof:
        structure: ItemTransmogInfo
  outputs:
  - name: outfitID
    nilable: true
    type: number
C_TransmogCollection.PlayerCanCollectSource:
  inputs:
  - name: sourceID
    type: number
  outputs:
  - name: hasItemData
    type: boolean
  - name: canCollect
    type: boolean
C_TransmogCollection.PlayerHasTransmog:
  inputs:
  - name: itemID
    type: number
  - default: 0
    name: itemAppearanceModID
    type: number
  outputs:
  - name: hasTransmog
    type: boolean
C_TransmogCollection.PlayerHasTransmogByItemInfo:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: hasTransmog
    type: boolean
C_TransmogCollection.PlayerHasTransmogItemModifiedAppearance:
  inputs:
  - name: itemModifiedAppearanceID
    type: number
  outputs:
  - name: hasTransmog
    type: boolean
C_TransmogCollection.PlayerKnowsSource:
  inputs:
  - name: sourceID
    type: number
  outputs:
  - name: isKnown
    type: boolean
C_TransmogCollection.RenameOutfit:
  inputs:
  - name: outfitID
    type: number
  - name: name
    type: string
  outputs: {}
C_TransmogCollection.SearchProgress:
  inputs:
  - name: searchType
    type:
      enum: TransmogSearchType
  outputs:
  - name: progress
    type: number
C_TransmogCollection.SearchSize:
  inputs:
  - name: searchType
    type:
      enum: TransmogSearchType
  outputs:
  - name: size
    type: number
C_TransmogCollection.SetAllCollectionTypeFilters:
  inputs:
  - name: checked
    type: boolean
  outputs: {}
C_TransmogCollection.SetAllSourceTypeFilters:
  inputs:
  - name: checked
    type: boolean
  outputs: {}
C_TransmogCollection.SetCollectedShown:
  inputs:
  - name: shown
    type: boolean
  outputs: {}
C_TransmogCollection.SetDefaultFilters:
  inputs: {}
  outputs: {}
C_TransmogCollection.SetIsAppearanceFavorite:
  inputs:
  - name: itemAppearanceID
    type: number
  - name: isFavorite
    type: boolean
  outputs: {}
C_TransmogCollection.SetSearch:
  inputs:
  - name: searchType
    type:
      enum: TransmogSearchType
  - name: searchText
    type: string
  outputs:
  - name: completed
    type: boolean
C_TransmogCollection.SetSearchAndFilterCategory:
  inputs:
  - name: category
    type:
      enum: TransmogCollectionType
  outputs: {}
C_TransmogCollection.SetSourceTypeFilter:
  inputs:
  - name: index
    type: number
  - name: checked
    type: boolean
  outputs: {}
C_TransmogCollection.SetUncollectedShown:
  inputs:
  - name: shown
    type: boolean
  outputs: {}
C_TransmogCollection.UpdateUsableAppearances:
  inputs: {}
  outputs: {}
C_TransmogSets.ClearLatestSource:
  inputs: {}
  outputs: {}
C_TransmogSets.ClearNewSource:
  inputs:
  - name: sourceID
    type: number
  outputs: {}
C_TransmogSets.ClearSetNewSourcesForSlot:
  inputs:
  - name: transmogSetID
    type: number
  - name: slot
    type: number
  outputs: {}
C_TransmogSets.GetAllSets:
  inputs: {}
  outputs:
  - name: sets
    type:
      arrayof:
        structure: C_TransmogSets.TransmogSetInfo
C_TransmogSets.GetAllSourceIDs:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: sources
    type:
      arrayof: number
C_TransmogSets.GetBaseSetID:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: baseTransmogSetID
    type: number
C_TransmogSets.GetBaseSets:
  inputs: {}
  outputs:
  - name: sets
    type:
      arrayof:
        structure: C_TransmogSets.TransmogSetInfo
C_TransmogSets.GetBaseSetsCounts:
  inputs: {}
  outputs:
  - name: numCollected
    type: number
  - name: numTotal
    type: number
C_TransmogSets.GetBaseSetsFilter:
  inputs:
  - name: index
    type: number
  outputs:
  - name: isChecked
    type: boolean
C_TransmogSets.GetCameraIDs:
  inputs: {}
  outputs:
  - name: detailsCameraID
    nilable: true
    type: number
  - name: vendorCameraID
    nilable: true
    type: number
C_TransmogSets.GetIsFavorite:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: isFavorite
    type: boolean
  - name: isGroupFavorite
    type: boolean
C_TransmogSets.GetLatestSource:
  inputs: {}
  outputs:
  - name: sourceID
    type: number
C_TransmogSets.GetSetInfo:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: set
    type:
      structure: C_TransmogSets.TransmogSetInfo
C_TransmogSets.GetSetNewSources:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: sourceIDs
    type:
      arrayof: number
C_TransmogSets.GetSetPrimaryAppearances:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: apppearances
    type:
      arrayof:
        structure: C_TransmogSets.TransmogSetPrimaryAppearanceInfo
C_TransmogSets.GetSetsContainingSourceID:
  inputs:
  - name: sourceID
    type: number
  outputs:
  - name: setIDs
    type:
      arrayof: number
C_TransmogSets.GetSourceIDsForSlot:
  inputs:
  - name: transmogSetID
    type: number
  - name: slot
    type: number
  outputs:
  - name: sources
    type:
      arrayof: number
C_TransmogSets.GetSourcesForSlot:
  inputs:
  - name: transmogSetID
    type: number
  - name: slot
    type: number
  outputs:
  - name: sources
    type:
      arrayof:
        structure: AppearanceSourceInfo
C_TransmogSets.GetUsableSets:
  inputs: {}
  outputs:
  - name: sets
    type:
      arrayof:
        structure: C_TransmogSets.TransmogSetInfo
C_TransmogSets.GetVariantSets:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: sets
    type:
      arrayof:
        structure: C_TransmogSets.TransmogSetInfo
C_TransmogSets.HasUsableSets:
  inputs: {}
  outputs:
  - name: hasUsableSets
    type: boolean
C_TransmogSets.IsBaseSetCollected:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: isCollected
    type: boolean
C_TransmogSets.IsNewSource:
  inputs:
  - name: sourceID
    type: number
  outputs:
  - name: isNew
    type: boolean
C_TransmogSets.IsSetVisible:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: isVisible
    type: boolean
C_TransmogSets.IsUsingDefaultBaseSetsFilters:
  inputs: {}
  outputs:
  - name: isUsingDefaultBaseSetsFilters
    type: boolean
C_TransmogSets.SetBaseSetsFilter:
  inputs:
  - name: index
    type: number
  - name: isChecked
    type: boolean
  outputs: {}
C_TransmogSets.SetDefaultBaseSetsFilters:
  inputs: {}
  outputs: {}
C_TransmogSets.SetHasNewSources:
  inputs:
  - name: transmogSetID
    type: number
  outputs:
  - name: hasNewSources
    type: boolean
C_TransmogSets.SetHasNewSourcesForSlot:
  inputs:
  - name: transmogSetID
    type: number
  - name: slot
    type: number
  outputs:
  - name: hasNewSources
    type: boolean
C_TransmogSets.SetIsFavorite:
  inputs:
  - name: transmogSetID
    type: number
  - name: isFavorite
    type: boolean
  outputs: {}
C_Trophy.MonumentChangeAppearanceToTrophyID: {}
C_Trophy.MonumentCloseMonumentUI: {}
C_Trophy.MonumentGetCount: {}
C_Trophy.MonumentGetSelectedTrophyID: {}
C_Trophy.MonumentGetTrophyInfoByIndex: {}
C_Trophy.MonumentLoadList:
  inputs: {}
  outputs: {}
C_Trophy.MonumentLoadSelectedTrophyID: {}
C_Trophy.MonumentRevertAppearanceToSaved: {}
C_Trophy.MonumentSaveSelection: {}
C_TTSSettings.GetChannelEnabled:
  inputs:
  - name: channelInfo
    type:
      structure: ChatChannelInfo
  outputs:
  - name: enabled
    type: boolean
C_TTSSettings.GetCharacterSettingsSaved:
  inputs: {}
  outputs:
  - name: settingsBeenSaved
    type: boolean
C_TTSSettings.GetChatTypeEnabled:
  inputs:
  - name: chatName
    type: string
  outputs:
  - name: enabled
    type: boolean
C_TTSSettings.GetSetting:
  inputs:
  - name: setting
    type:
      enum: TtsBoolSetting
  outputs:
  - name: enabled
    type: boolean
C_TTSSettings.GetSpeechRate:
  inputs: {}
  outputs:
  - name: rate
    type: number
C_TTSSettings.GetSpeechVolume:
  inputs: {}
  outputs:
  - name: volume
    type: number
C_TTSSettings.GetVoiceOptionID:
  inputs:
  - name: voiceType
    type:
      enum: TtsVoiceType
  outputs:
  - name: voiceID
    type: number
C_TTSSettings.GetVoiceOptionName:
  inputs:
  - name: voiceType
    type:
      enum: TtsVoiceType
  outputs:
  - name: voiceName
    type: string
C_TTSSettings.MarkCharacterSettingsSaved:
  inputs: {}
  outputs: {}
C_TTSSettings.SetChannelEnabled:
  inputs:
  - name: channelInfo
    type:
      structure: ChatChannelInfo
  - default: false
    name: newVal
    type: boolean
  outputs: {}
C_TTSSettings.SetChannelKeyEnabled:
  inputs:
  - name: channelKey
    type: string
  - default: false
    name: newVal
    type: boolean
  outputs: {}
C_TTSSettings.SetChatTypeEnabled:
  inputs:
  - name: chatName
    type: string
  - default: false
    name: newVal
    type: boolean
  outputs: {}
C_TTSSettings.SetDefaultSettings:
  inputs: {}
  outputs: {}
C_TTSSettings.SetSetting:
  inputs:
  - name: setting
    type:
      enum: TtsBoolSetting
  - default: false
    name: newVal
    type: boolean
  outputs: {}
C_TTSSettings.SetSpeechRate:
  inputs:
  - name: newVal
    type: number
  outputs: {}
C_TTSSettings.SetSpeechVolume:
  inputs:
  - name: newVal
    type: number
  outputs: {}
C_TTSSettings.SetVoiceOption:
  inputs:
  - name: voiceType
    type:
      enum: TtsVoiceType
  - name: voiceID
    type: number
  outputs: {}
C_TTSSettings.SetVoiceOptionName:
  inputs:
  - name: voiceType
    type:
      enum: TtsVoiceType
  - name: voiceName
    type: string
  outputs: {}
C_TTSSettings.ShouldOverrideMessage:
  inputs:
  - name: language
    type: number
  - name: messageText
    type: string
  outputs:
  - name: overrideMessage
    type: boolean
C_Tutorial.AbandonTutorialArea:
  inputs: {}
  outputs: {}
C_Tutorial.ReturnToTutorialArea:
  inputs: {}
  outputs: {}
C_UI.DoesAnyDisplayHaveNotch:
  inputs: {}
  outputs:
  - name: notchPresent
    type: boolean
C_UI.GetTopLeftNotchSafeRegion:
  inputs: {}
  outputs:
  - name: left
    type: number
  - name: right
    type: number
  - name: top
    type: number
  - name: bottom
    type: number
C_UI.GetTopRightNotchSafeRegion:
  inputs: {}
  outputs:
  - name: left
    type: number
  - name: right
    type: number
  - name: top
    type: number
  - name: bottom
    type: number
C_UI.GetUIParent:
  impl: C_UI.GetUIParent
  inputs: {}
  outputs:
  - name: uiParent
    type: Frame
C_UI.GetWorldFrame:
  impl: C_UI.GetWorldFrame
  inputs: {}
  outputs:
  - name: worldFrame
    type: Frame
C_UI.Reload:
  inputs: {}
  outputs: {}
C_UI.ShouldUIParentAvoidNotch:
  inputs: {}
  outputs:
  - name: willAvoidNotch
    type: boolean
C_UIColor.GetColors:
  impl: C_UIColor.GetColors
  inputs: {}
  outputs:
  - name: colors
    type:
      arrayof:
        structure: C_UIColor.DBColorExport
C_UIWidgetManager.GetAllWidgetsBySetID:
  inputs:
  - name: setID
    type: number
  outputs:
  - name: widgets
    type:
      arrayof:
        structure: C_UIWidgetManager.UIWidgetInfo
C_UIWidgetManager.GetBelowMinimapWidgetSetID:
  inputs: {}
  outputs:
  - name: setID
    type: number
C_UIWidgetManager.GetBulletTextListWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.BulletTextListWidgetVisualizationInfo
C_UIWidgetManager.GetCaptureBarWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.CaptureBarWidgetVisualizationInfo
C_UIWidgetManager.GetCaptureZoneVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.CaptureZoneVisualizationInfo
C_UIWidgetManager.GetDiscreteProgressStepsVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.DiscreteProgressStepsVisualizationInfo
C_UIWidgetManager.GetDoubleIconAndTextWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.DoubleIconAndTextWidgetVisualizationInfo
C_UIWidgetManager.GetDoubleStateIconRowVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.DoubleStateIconRowVisualizationInfo
C_UIWidgetManager.GetDoubleStatusBarWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.DoubleStatusBarWidgetVisualizationInfo
C_UIWidgetManager.GetFillUpFramesWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.FillUpFramesWidgetVisualizationInfo
C_UIWidgetManager.GetHorizontalCurrenciesWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.HorizontalCurrenciesWidgetVisualizationInfo
C_UIWidgetManager.GetIconAndTextWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.IconAndTextWidgetVisualizationInfo
C_UIWidgetManager.GetIconTextAndBackgroundWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.IconTextAndBackgroundWidgetVisualizationInfo
C_UIWidgetManager.GetIconTextAndCurrenciesWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.IconTextAndCurrenciesWidgetVisualizationInfo
C_UIWidgetManager.GetItemDisplayVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.ItemDisplayVisualizationInfo
C_UIWidgetManager.GetObjectiveTrackerWidgetSetID:
  inputs: {}
  outputs:
  - name: setID
    type: number
C_UIWidgetManager.GetPowerBarWidgetSetID:
  inputs: {}
  outputs:
  - name: setID
    type: number
C_UIWidgetManager.GetScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.ScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo
C_UIWidgetManager.GetScenarioHeaderTimerWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.ScenarioHeaderTimerWidgetVisualizationInfo
C_UIWidgetManager.GetSpacerVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.SpacerVisualizationInfo
C_UIWidgetManager.GetSpellDisplayVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.SpellDisplayVisualizationInfo
C_UIWidgetManager.GetStackedResourceTrackerWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.StackedResourceTrackerWidgetVisualizationInfo
C_UIWidgetManager.GetStatusBarWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.StatusBarWidgetVisualizationInfo
C_UIWidgetManager.GetTextColumnRowVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.TextColumnRowVisualizationInfo
C_UIWidgetManager.GetTextureAndTextRowVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.TextureAndTextRowVisualizationInfo
C_UIWidgetManager.GetTextureAndTextVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.TextureAndTextVisualizationInfo
C_UIWidgetManager.GetTextureWithAnimationVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.TextureWithAnimationVisualizationInfo
C_UIWidgetManager.GetTextWithStateWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.TextWithStateWidgetVisualizationInfo
C_UIWidgetManager.GetTextWithSubtextWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.TextWithSubtextWidgetVisualizationInfo
C_UIWidgetManager.GetTopCenterWidgetSetID:
  inputs: {}
  outputs:
  - name: setID
    type: number
C_UIWidgetManager.GetTugOfWarWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.TugOfWarWidgetVisualizationInfo
C_UIWidgetManager.GetUnitPowerBarWidgetVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.UnitPowerBarWidgetVisualizationInfo
C_UIWidgetManager.GetWidgetSetInfo:
  inputs:
  - name: widgetSetID
    type: number
  outputs:
  - name: widgetSetInfo
    type:
      structure: C_UIWidgetManager.UIWidgetSetInfo
C_UIWidgetManager.GetZoneControlVisualizationInfo:
  inputs:
  - name: widgetID
    type: number
  outputs:
  - name: widgetInfo
    nilable: true
    type:
      structure: C_UIWidgetManager.ZoneControlVisualizationInfo
C_UIWidgetManager.RegisterUnitForWidgetUpdates:
  inputs:
  - name: unitToken
    type: string
  - default: false
    name: isGuid
    type: boolean
  outputs: {}
C_UIWidgetManager.SetProcessingUnit:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs: {}
C_UIWidgetManager.SetProcessingUnitGuid:
  inputs:
  - name: unit
    nilable: true
    type: string
  outputs: {}
C_UIWidgetManager.UnregisterUnitForWidgetUpdates:
  inputs:
  - name: unitToken
    type: string
  - default: false
    name: isGuid
    type: boolean
  outputs: {}
C_UnitAuras.AddPrivateAuraAnchor:
  inputs:
  - name: args
    type:
      structure: AddPrivateAuraAnchorArgs
  outputs:
  - name: anchorID
    nilable: true
    type: number
C_UnitAuras.AddPrivateAuraAppliedSound:
  inputs:
  - name: sound
    type:
      structure: UnitPrivateAuraAppliedSoundInfo
  outputs:
  - name: privateAuraSoundID
    nilable: true
    type: number
C_UnitAuras.AuraIsPrivate:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: isPrivate
    type: boolean
C_UnitAuras.GetAuraDataByAuraInstanceID:
  inputs:
  - name: unitToken
    type: string
  - name: auraInstanceID
    type: number
  outputs:
  - name: aura
    nilable: true
    type:
      structure: AuraData
C_UnitAuras.GetAuraDataBySlot:
  inputs:
  - name: unitToken
    type: string
  - name: slot
    type: number
  outputs:
  - name: aura
    nilable: true
    type:
      structure: AuraData
C_UnitAuras.GetCooldownAuraBySpellID:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: cooldownSpellID
    nilable: true
    type: number
C_UnitAuras.GetPlayerAuraBySpellID:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: aura
    nilable: true
    type:
      structure: AuraData
C_UnitAuras.IsAuraFilteredOutByInstanceID:
  inputs:
  - name: unitToken
    type: string
  - name: auraInstanceID
    type: number
  - name: filterFlags
    type: string
  outputs:
  - name: isFiltered
    type: boolean
C_UnitAuras.RemovePrivateAuraAnchor:
  inputs:
  - name: anchorID
    type: number
  outputs: {}
C_UnitAuras.RemovePrivateAuraAppliedSound:
  inputs:
  - name: privateAuraSoundID
    type: number
  outputs: {}
C_UnitAuras.SetPrivateWarningTextAnchor:
  inputs:
  - name: parent
    type: Frame
  - name: anchor
    nilable: true
    type:
      structure: AnchorBinding
  outputs: {}
C_UnitAuras.WantsAlteredForm:
  inputs:
  - name: unitToken
    type: string
  outputs:
  - name: wantsAlteredForm
    type: boolean
C_UnitAurasPrivate.AddPrivateAuraUpdateCallback: {}
C_UnitAurasPrivate.AnchorPrivateAura: {}
C_UnitAurasPrivate.GetAllPrivateAuras:
  inputs: {}
  outputs:
  - name: auras
    type:
      arrayof:
        structure: AuraData
C_UnitAurasPrivate.GetAuraDataByAuraInstanceIDPrivate: {}
C_UnitAurasPrivate.GetPrivateAuraAnchors:
  inputs: {}
  outputs:
  - name: existingAnchors
    type:
      arrayof:
        structure: PrivateAuraAnchor
C_UnitAurasPrivate.SetPrivateAuraAnchorAddedCallback: {}
C_UnitAurasPrivate.SetPrivateAuraAnchorRemovedCallback: {}
C_UnitAurasPrivate.SetPrivateRaidBossMessageCallback: {}
C_UnitAurasPrivate.SetPrivateWarningTextFrame: {}
C_UserFeedback.SubmitBug:
  inputs:
  - name: bugInfo
    type: string
  - default: false
    name: suppressNotification
    type: boolean
  outputs:
  - name: success
    type: boolean
C_UserFeedback.SubmitSuggestion:
  inputs:
  - name: suggestion
    type: string
  outputs:
  - name: success
    type: boolean
C_VideoOptions.GetCurrentGameWindowSize:
  inputs: {}
  outputs:
  - name: size
    type:
      structure: vector2
C_VideoOptions.GetDefaultGameWindowSize:
  inputs:
  - name: monitor
    type: number
  outputs:
  - name: size
    type:
      structure: vector2
C_VideoOptions.GetGameWindowSizes:
  inputs:
  - name: monitor
    type: number
  - name: fullscreen
    type: boolean
  outputs:
  - name: sizes
    type:
      arrayof:
        structure: vector2
C_VideoOptions.GetGxAdapterInfo:
  inputs: {}
  outputs:
  - name: adapters
    type:
      arrayof:
        structure: C_VideoOptions.GxAdapterInfoDetails
C_VideoOptions.SetGameWindowSize:
  inputs:
  - name: x
    type: number
  - name: y
    type: number
  outputs: {}
C_VignetteInfo.FindBestUniqueVignette:
  inputs:
  - name: vignetteGUIDs
    type:
      arrayof: string
  outputs:
  - name: bestUniqueVignetteIndex
    nilable: true
    type: number
C_VignetteInfo.GetVignetteInfo:
  inputs:
  - name: vignetteGUID
    type: string
  outputs:
  - name: vignetteInfo
    nilable: true
    type:
      structure: C_VignetteInfo.VignetteInfo
C_VignetteInfo.GetVignettePosition:
  inputs:
  - name: vignetteGUID
    type: string
  - name: uiMapID
    type: number
  outputs:
  - name: vignettePosition
    type:
      structure: vector2
  - name: vignetteFacing
    nilable: true
    type: number
C_VignetteInfo.GetVignettes:
  inputs: {}
  outputs:
  - name: vignetteGUIDs
    type:
      arrayof: string
C_VoiceChat.ActivateChannel:
  inputs:
  - name: channelID
    type: number
  outputs: {}
C_VoiceChat.ActivateChannelTranscription:
  inputs:
  - name: channelID
    type: number
  outputs: {}
C_VoiceChat.BeginLocalCapture:
  inputs:
  - name: listenToLocalUser
    type: boolean
  outputs: {}
C_VoiceChat.CanPlayerUseVoiceChat:
  inputs: {}
  outputs:
  - name: canUseVoiceChat
    type: boolean
C_VoiceChat.CreateChannel:
  inputs:
  - name: channelDisplayName
    type: string
  outputs:
  - name: status
    type:
      enum: VoiceChatStatusCode
C_VoiceChat.DeactivateChannel:
  inputs:
  - name: channelID
    type: number
  outputs: {}
C_VoiceChat.DeactivateChannelTranscription:
  inputs:
  - name: channelID
    type: number
  outputs: {}
C_VoiceChat.EndLocalCapture:
  inputs: {}
  outputs: {}
C_VoiceChat.GetActiveChannelID:
  inputs: {}
  outputs:
  - name: channelID
    nilable: true
    type: number
C_VoiceChat.GetActiveChannelType:
  inputs: {}
  outputs:
  - name: channelType
    nilable: true
    type:
      enum: ChatChannelType
C_VoiceChat.GetAvailableInputDevices:
  inputs: {}
  outputs:
  - name: inputDevices
    nilable: true
    type:
      arrayof:
        structure: C_VoiceChat.VoiceAudioDevice
C_VoiceChat.GetAvailableOutputDevices:
  inputs: {}
  outputs:
  - name: outputDevices
    nilable: true
    type:
      arrayof:
        structure: C_VoiceChat.VoiceAudioDevice
C_VoiceChat.GetChannel:
  inputs:
  - name: channelID
    type: number
  outputs:
  - name: channel
    nilable: true
    type:
      structure: C_VoiceChat.VoiceChatChannel
C_VoiceChat.GetChannelForChannelType:
  inputs:
  - name: channelType
    type:
      enum: ChatChannelType
  outputs:
  - name: channel
    nilable: true
    type:
      structure: C_VoiceChat.VoiceChatChannel
C_VoiceChat.GetChannelForCommunityStream:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs:
  - name: channel
    nilable: true
    type:
      structure: C_VoiceChat.VoiceChatChannel
C_VoiceChat.GetCommunicationMode:
  inputs: {}
  outputs:
  - name: communicationMode
    nilable: true
    type:
      enum: CommunicationMode
C_VoiceChat.GetCurrentVoiceChatConnectionStatusCode:
  inputs: {}
  outputs:
  - name: statusCode
    nilable: true
    type:
      enum: VoiceChatStatusCode
C_VoiceChat.GetInputVolume:
  inputs: {}
  outputs:
  - name: volume
    nilable: true
    type: number
C_VoiceChat.GetJoinClubVoiceChannelError:
  inputs:
  - name: clubId
    type: string
  outputs:
  - name: errorReason
    nilable: true
    type:
      enum: VoiceChannelErrorReason
C_VoiceChat.GetLocalPlayerActiveChannelMemberInfo:
  inputs: {}
  outputs:
  - name: memberInfo
    nilable: true
    type:
      structure: C_VoiceChat.VoiceChatMember
C_VoiceChat.GetLocalPlayerMemberID:
  inputs:
  - name: channelID
    type: number
  outputs:
  - name: memberID
    nilable: true
    type: number
C_VoiceChat.GetMasterVolumeScale:
  inputs: {}
  outputs:
  - name: scale
    type: number
C_VoiceChat.GetMemberGUID:
  inputs:
  - name: memberID
    type: number
  - name: channelID
    type: number
  outputs:
  - name: memberGUID
    type: string
C_VoiceChat.GetMemberID:
  inputs:
  - name: channelID
    type: number
  - name: memberGUID
    type: string
  outputs:
  - name: memberID
    nilable: true
    type: number
C_VoiceChat.GetMemberInfo:
  inputs:
  - name: memberID
    type: number
  - name: channelID
    type: number
  outputs:
  - name: memberInfo
    nilable: true
    type:
      structure: C_VoiceChat.VoiceChatMember
C_VoiceChat.GetMemberName:
  inputs:
  - name: memberID
    type: number
  - name: channelID
    type: number
  outputs:
  - name: memberName
    nilable: true
    type: string
C_VoiceChat.GetMemberVolume:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: volume
    nilable: true
    type: number
C_VoiceChat.GetOutputVolume:
  inputs: {}
  outputs:
  - name: volume
    nilable: true
    type: number
C_VoiceChat.GetProcesses:
  inputs: {}
  outputs:
  - name: processes
    type:
      arrayof:
        structure: C_VoiceChat.VoiceChatProcess
C_VoiceChat.GetPTTButtonPressedState:
  inputs: {}
  outputs:
  - name: isPressed
    nilable: true
    type: boolean
C_VoiceChat.GetPushToTalkBinding:
  inputs: {}
  outputs:
  - name: keys
    nilable: true
    type:
      arrayof: string
C_VoiceChat.GetRemoteTtsVoices:
  inputs: {}
  outputs:
  - name: ttsVoices
    type:
      arrayof:
        structure: C_VoiceChat.VoiceTtsVoiceType
C_VoiceChat.GetTtsVoices:
  inputs: {}
  outputs:
  - name: ttsVoices
    type:
      arrayof:
        structure: C_VoiceChat.VoiceTtsVoiceType
C_VoiceChat.GetVADSensitivity:
  inputs: {}
  outputs:
  - name: sensitivity
    nilable: true
    type: number
C_VoiceChat.IsChannelJoinPending:
  inputs:
  - name: channelType
    type:
      enum: ChatChannelType
  - name: clubId
    nilable: true
    type: string
  - name: streamId
    nilable: true
    type: string
  outputs:
  - name: isPending
    type: boolean
C_VoiceChat.IsDeafened:
  inputs: {}
  outputs:
  - name: isDeafened
    nilable: true
    type: boolean
C_VoiceChat.IsEnabled:
  inputs: {}
  outputs:
  - name: isEnabled
    type: boolean
C_VoiceChat.IsLoggedIn:
  inputs: {}
  outputs:
  - name: isLoggedIn
    type: boolean
C_VoiceChat.IsMemberLocalPlayer:
  inputs:
  - name: memberID
    type: number
  - name: channelID
    type: number
  outputs:
  - name: isLocalPlayer
    type: boolean
C_VoiceChat.IsMemberMuted:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: mutedForMe
    nilable: true
    type: boolean
C_VoiceChat.IsMemberMutedForAll:
  inputs:
  - name: memberID
    type: number
  - name: channelID
    type: number
  outputs:
  - name: mutedForAll
    nilable: true
    type: boolean
C_VoiceChat.IsMemberSilenced:
  inputs:
  - name: memberID
    type: number
  - name: channelID
    type: number
  outputs:
  - name: silenced
    nilable: true
    type: boolean
C_VoiceChat.IsMuted:
  inputs: {}
  outputs:
  - name: isMuted
    nilable: true
    type: boolean
C_VoiceChat.IsParentalDisabled:
  inputs: {}
  outputs:
  - name: isParentalDisabled
    type: boolean
C_VoiceChat.IsParentalMuted:
  inputs: {}
  outputs:
  - name: isParentalMuted
    type: boolean
C_VoiceChat.IsPlayerUsingVoice:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs:
  - name: isUsingVoice
    type: boolean
C_VoiceChat.IsSilenced:
  inputs: {}
  outputs:
  - name: isSilenced
    nilable: true
    type: boolean
C_VoiceChat.IsSpeakForMeActive:
  inputs: {}
  outputs:
  - name: isActive
    type: boolean
C_VoiceChat.IsSpeakForMeAllowed:
  inputs: {}
  outputs:
  - name: isAllowed
    type: boolean
C_VoiceChat.IsTranscriptionAllowed:
  inputs: {}
  outputs:
  - name: isAllowed
    type: boolean
C_VoiceChat.IsVoiceChatConnected:
  inputs: {}
  outputs:
  - name: connected
    type: boolean
C_VoiceChat.LeaveChannel:
  inputs:
  - name: channelID
    type: number
  outputs: {}
C_VoiceChat.Login:
  inputs: {}
  outputs:
  - name: status
    type:
      enum: VoiceChatStatusCode
C_VoiceChat.Logout:
  inputs: {}
  outputs:
  - name: status
    type:
      enum: VoiceChatStatusCode
C_VoiceChat.MarkChannelsDiscovered:
  inputs: {}
  outputs: {}
C_VoiceChat.RequestJoinAndActivateCommunityStreamChannel:
  inputs:
  - name: clubId
    type: string
  - name: streamId
    type: string
  outputs: {}
C_VoiceChat.RequestJoinChannelByChannelType:
  inputs:
  - name: channelType
    type:
      enum: ChatChannelType
  - name: autoActivate
    nilable: true
    type: boolean
  outputs: {}
C_VoiceChat.SetCommunicationMode:
  inputs:
  - name: communicationMode
    type:
      enum: CommunicationMode
  outputs: {}
C_VoiceChat.SetDeafened:
  inputs:
  - name: isDeafened
    type: boolean
  outputs: {}
C_VoiceChat.SetInputDevice:
  inputs:
  - name: deviceID
    type: string
  outputs: {}
C_VoiceChat.SetInputVolume:
  inputs:
  - name: volume
    type: number
  outputs: {}
C_VoiceChat.SetMasterVolumeScale:
  inputs:
  - name: scale
    type: number
  outputs: {}
C_VoiceChat.SetMemberMuted:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  - name: muted
    type: boolean
  outputs: {}
C_VoiceChat.SetMemberVolume:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  - name: volume
    type: number
  outputs: {}
C_VoiceChat.SetMuted:
  inputs:
  - name: isMuted
    type: boolean
  outputs: {}
C_VoiceChat.SetOutputDevice:
  inputs:
  - name: deviceID
    type: string
  outputs: {}
C_VoiceChat.SetOutputVolume:
  inputs:
  - name: volume
    type: number
  outputs: {}
C_VoiceChat.SetPortraitTexture:
  inputs:
  - name: textureObject
    type: Texture
  - name: memberID
    type: number
  - name: channelID
    type: number
  outputs: {}
C_VoiceChat.SetPushToTalkBinding:
  inputs:
  - name: keys
    type:
      arrayof: string
  outputs: {}
C_VoiceChat.SetVADSensitivity:
  inputs:
  - name: sensitivity
    type: number
  outputs: {}
C_VoiceChat.ShouldDiscoverChannels:
  inputs: {}
  outputs:
  - name: shouldDiscoverChannels
    type: boolean
C_VoiceChat.SpeakRemoteTextSample:
  inputs:
  - name: text
    type: string
  outputs: {}
C_VoiceChat.SpeakText:
  inputs:
  - name: voiceID
    type: number
  - name: text
    type: string
  - name: destination
    type:
      enum: VoiceTtsDestination
  - name: rate
    type: number
  - name: volume
    type: number
  outputs: {}
C_VoiceChat.StopSpeakingText:
  inputs: {}
  outputs: {}
C_VoiceChat.ToggleDeafened:
  inputs: {}
  outputs: {}
C_VoiceChat.ToggleMemberMuted:
  inputs:
  - name: playerLocation
    type:
      structure: PlayerLocation
  outputs: {}
C_VoiceChat.ToggleMuted:
  inputs: {}
  outputs: {}
C_WeeklyRewards.AreRewardsForCurrentRewardPeriod:
  inputs: {}
  outputs:
  - name: isCurrentPeriod
    type: boolean
C_WeeklyRewards.CanClaimRewards:
  inputs: {}
  outputs:
  - name: canClaimRewards
    type: boolean
C_WeeklyRewards.ClaimReward:
  inputs:
  - name: id
    type: number
  outputs: {}
C_WeeklyRewards.CloseInteraction:
  inputs: {}
  outputs: {}
C_WeeklyRewards.GetActivities:
  inputs:
  - name: type
    nilable: true
    type:
      enum: WeeklyRewardChestThresholdType
  outputs:
  - name: activities
    type:
      arrayof:
        structure: C_WeeklyRewards.WeeklyRewardActivityInfo
C_WeeklyRewards.GetActivityEncounterInfo:
  inputs:
  - name: type
    type:
      enum: WeeklyRewardChestThresholdType
  - name: index
    type: number
  outputs:
  - name: info
    type:
      arrayof:
        structure: C_WeeklyRewards.WeeklyRewardActivityEncounterInfo
C_WeeklyRewards.GetConquestWeeklyProgress:
  inputs: {}
  outputs:
  - name: weeklyProgress
    type:
      structure: C_WeeklyRewards.ConquestWeeklyProgress
C_WeeklyRewards.GetDifficultyIDForActivityTier:
  inputs:
  - name: activityTierID
    type: number
  outputs:
  - name: difficultyID
    type: number
C_WeeklyRewards.GetExampleRewardItemHyperlinks:
  inputs:
  - name: id
    type: number
  outputs:
  - name: hyperlink
    type: string
  - name: upgradeHyperlink
    type: string
C_WeeklyRewards.GetItemHyperlink:
  inputs:
  - name: itemDBID
    type: string
  outputs:
  - name: hyperlink
    type: string
C_WeeklyRewards.GetNextActivitiesIncrease:
  inputs:
  - name: activityTierID
    type: number
  - name: level
    type: number
  outputs:
  - name: hasSeasonData
    type: boolean
  - name: nextActivityTierID
    nilable: true
    type: number
  - name: nextLevel
    nilable: true
    type: number
  - name: itemLevel
    nilable: true
    type: number
C_WeeklyRewards.GetNextMythicPlusIncrease:
  inputs:
  - name: mythicPlusLevel
    type: number
  outputs:
  - name: hasSeasonData
    type: boolean
  - name: nextMythicPlusLevel
    nilable: true
    type: number
  - name: itemLevel
    nilable: true
    type: number
C_WeeklyRewards.GetNumCompletedDungeonRuns:
  inputs: {}
  outputs:
  - name: numHeroic
    type: number
  - name: numMythic
    type: number
  - name: numMythicPlus
    type: number
C_WeeklyRewards.GetWeeklyRewardTextureKit:
  inputs: {}
  outputs:
  - name: uiTextureKit
    type: string
C_WeeklyRewards.HasAvailableRewards:
  inputs: {}
  outputs:
  - name: hasAvailableRewards
    type: boolean
C_WeeklyRewards.HasGeneratedRewards:
  inputs: {}
  outputs:
  - name: hasGeneratedRewards
    type: boolean
C_WeeklyRewards.HasInteraction:
  inputs: {}
  outputs:
  - name: isInteracting
    type: boolean
C_WeeklyRewards.IsWeeklyChestRetired:
  inputs: {}
  outputs:
  - name: isRetired
    type: boolean
C_WeeklyRewards.OnUIInteract:
  inputs: {}
  outputs: {}
C_WeeklyRewards.ShouldShowFinalRetirementMessage:
  inputs: {}
  outputs:
  - name: showRetirementMessage
    type: boolean
C_WeeklyRewards.ShouldShowRetirementMessage:
  inputs: {}
  outputs:
  - name: showRetirementMessage
    type: boolean
C_Widget.IsFrameWidget:
  inputs:
  - name: frame
    type: unknown
  outputs:
  - name: result
    stub: true
    type: boolean
C_Widget.IsRenderableWidget: {}
C_Widget.IsWidget:
  inputs:
  - name: object
    type: unknown
  outputs:
  - name: value
    type: boolean
C_WowTokenPublic.BuyToken: {}
C_WowTokenPublic.GetCommerceSystemStatus: {}
C_WowTokenPublic.GetCurrentMarketPrice:
  inputs: {}
  outputs:
  - type: number
C_WowTokenPublic.GetGuaranteedPrice:
  inputs: {}
  outputs:
  - name: price
    type: number
C_WowTokenPublic.GetListedAuctionableTokenInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemID
    type: number
  - name: buyoutPrice
    type: number
  - name: duration
    type: number
C_WowTokenPublic.GetNumListedAuctionableTokens:
  inputs: {}
  outputs:
  - name: tokenCount
    type: number
C_WowTokenPublic.IsAuctionableWowToken:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: value
    type: boolean
C_WowTokenPublic.IsConsumableWowToken: {}
C_WowTokenPublic.UpdateListedAuctionableTokens:
  inputs: {}
  outputs: {}
C_WowTokenPublic.UpdateMarketPrice:
  inputs: {}
  outputs: {}
C_WowTokenPublic.UpdateTokenCount: {}
C_WowTokenSecure.CancelRedeem: {}
C_WowTokenSecure.CanRedeemForBalance: {}
C_WowTokenSecure.ConfirmBuyToken: {}
C_WowTokenSecure.ConfirmSellToken:
  inputs:
  - name: sell
    type: boolean
  outputs: {}
C_WowTokenSecure.GetBalanceRedeemAmount: {}
C_WowTokenSecure.GetBalanceRedemptionInfo:
  inputs: {}
  outputs:
  - name: currentBalance
    type: number
  - name: addedBalance
    type: number
  - name: canRedeem
    type: boolean
  - name: cannotRedeemReason
    type: string
C_WowTokenSecure.GetGameTimeRedemptionInfo:
  inputs: {}
  outputs:
  - name: isSub
    type: boolean
  - name: remaining
    type: number
C_WowTokenSecure.GetPriceLockDuration:
  inputs: {}
  outputs:
  - name: value
    type: number
C_WowTokenSecure.GetRemainingGameTime: {}
C_WowTokenSecure.GetTokenCount: {}
C_WowTokenSecure.GetValidRedemptionTypes: {}
C_WowTokenSecure.IsRedemptionStillValid: {}
C_WowTokenSecure.RedeemToken: {}
C_WowTokenSecure.RedeemTokenConfirm: {}
C_WowTokenSecure.SetBalanceAmountString: {}
C_WowTokenSecure.WillKickFromWorld: {}
C_WowTokenUI.StartTokenSell:
  inputs:
  - name: tokenGUID
    type: string
  outputs: {}
C_XMLUtil.GetTemplateInfo:
  impl: C_XMLUtil.GetTemplateInfo_10_2
  inputs:
  - name: name
    type: string
  mayreturnnothing: true
  outputs:
  - name: info
    type:
      structure: C_XMLUtil.XMLTemplateInfo
C_XMLUtil.GetTemplates:
  inputs: {}
  outputs:
  - name: templates
    type:
      arrayof:
        structure: C_XMLUtil.XMLTemplateListInfo
C_ZoneAbility.GetActiveAbilities:
  inputs: {}
  outputs:
  - name: zoneAbilities
    type:
      arrayof:
        structure: C_ZoneAbility.ZoneAbilityInfo
CalculateStringEditDistance:
  inputs:
  - name: firstString
    type: string
  - name: secondString
    type: string
  outputs:
  - name: distance
    type: number
CallCompanion: {}
CameraOrSelectOrMoveStart:
  inputs: {}
  outputs: {}
CameraOrSelectOrMoveStop:
  inputs:
  - name: stickyFlag
    nilable: true
    type: boolean
  outputs: {}
CameraZoomIn:
  inputs:
  - name: increment
    nilable: true
    type: number
  outputs: {}
CameraZoomOut:
  inputs:
  - name: increment
    nilable: true
    type: number
  outputs: {}
CanAffordMerchantItem:
  inputs:
  - name: index
    type: number
  outputs:
  - name: value
    type: boolean
CanAutoSetGamePadCursorControl: {}
CanBeRaidTarget: {}
CanCancelScene: {}
CancelAreaSpiritHeal: {}
CancelDuel: {}
CancelEmote: {}
CancelItemTempEnchantment: {}
CancelLogout:
  inputs: {}
  outputs: {}
CancelMasterLootRoll: {}
CancelPendingEquip: {}
CancelPetPossess: {}
CancelPreloadingMovie:
  inputs:
  - name: movieId
    type: number
  outputs: {}
CancelScene: {}
CancelShapeshiftForm:
  inputs: {}
  outputs: {}
CancelSpellByName:
  inputs:
  - name: spell
    type: string
  outputs: {}
CancelTrade: {}
CancelTradeAccept: {}
CancelUnitBuff: {}
CanChangePlayerDifficulty: {}
CanComplainInboxItem: {}
CanDualWield: {}
CanEditGuildBankTabInfo: {}
CanEditGuildEvent: {}
CanEditGuildInfo:
  inputs: {}
  outputs:
  - name: value
    type: oneornil
CanEditGuildTabInfo: {}
CanEditMOTD:
  inputs: {}
  outputs:
  - name: canEdit
    type: boolean
CanEditPublicNote: {}
CanEjectPassengerFromSeat: {}
CanExitVehicle: {}
CanGamePadControlCursor: {}
CanGuildBankRepair:
  inputs: {}
  outputs:
  - name: value
    type: boolean
CanGuildDemote: {}
CanGuildInvite:
  inputs: {}
  outputs:
  - name: canInvite
    type: boolean
CanGuildPromote: {}
CanGuildRemove: {}
CanHearthAndResurrectFromArea: {}
CanInitiateWarGame: {}
CanInspect:
  inputs:
  - name: unit
    type: unit
  - name: showError
    nilable: true
    type: boolean
  outputs:
  - name: canInspect
    type: oneornil
CanItemBeSocketedToArtifact: {}
CanJoinBattlefieldAsGroup:
  inputs: {}
  outputs:
  - name: value
    type: boolean
CanLootUnit: {}
CanMapChangeDifficulty: {}
CanMerchantRepair:
  inputs: {}
  outputs:
  - name: value
    type: boolean
CannotBeResurrected:
  inputs: {}
  outputs:
  - type: boolean
CanPartyLFGBackfill: {}
CanReplaceGuildMaster: {}
CanResetTutorials: {}
CanScanResearchSite: {}
CanShowAchievementUI: {}
CanShowResetInstances: {}
CanSignPetition:
  inputs: {}
  outputs:
  - name: value
    type: boolean
CanSolveArtifact: {}
CanSummonFriend: {}
CanSurrenderArena: {}
CanSwitchVehicleSeat: {}
CanSwitchVehicleSeats: {}
CanUpgradeExpansion:
  inputs: {}
  outputs:
  - name: canUpgradeExpansion
    type: boolean
CanUseVoidStorage:
  inputs: {}
  outputs:
  - name: value
    type: boolean
CanViewGuildRecipes: {}
CanWithdrawGuildBankMoney:
  inputs: {}
  outputs:
  - name: value
    type: boolean
CaseAccentInsensitiveParse: {}
CastPetAction: {}
CastShapeshiftForm: {}
CastSpell: {}
CastSpellByID: {}
CastSpellByName:
  inputs:
  - type: string
  - nilable: true
    type: string
  outputs: {}
  protection: secure
ceil:
  alias: math.ceil
CenterCamera:
  inputs: {}
  outputs: {}
ChangeActionBarPage: {}
ChangeChatColor: {}
ChannelBan: {}
ChannelInvite: {}
ChannelKick: {}
ChannelModerator: {}
ChannelSetAllSilent: {}
ChannelSetPartyMemberSilent: {}
ChannelToggleAnnouncements: {}
ChannelUnban: {}
ChannelUnmoderator: {}
CheckInbox:
  inputs: {}
  outputs: {}
CheckInteractDistance: {}
ClearAchievementComparisonUnit: {}
ClearAchievementSearchString: {}
ClearAllLFGDungeons: {}
ClearAutoAcceptQuestSound: {}
ClearBattlemaster:
  inputs: {}
  outputs: {}
ClearCursor: {}
ClearFailedPVPTalentIDs: {}
ClearFailedTalentIDs: {}
ClearFocus:
  inputs: {}
  outputs: {}
ClearInspectPlayer: {}
ClearOverrideBindings: {}
ClearPartyAssignment:
  inputs:
  - name: role
    type: string
  - name: unit
    type: unit
  outputs: {}
ClearRaidMarker: {}
ClearSendMail: {}
ClearTarget:
  inputs: {}
  outputs:
  - type: boolean
ClearTutorials: {}
ClearVoidTransferDepositSlot: {}
ClickSendMailItemButton: {}
ClickSocketButton: {}
ClickTargetTradeButton: {}
ClickTradeButton: {}
ClickVoidStorageSlot: {}
ClickVoidTransferDepositSlot: {}
ClickVoidTransferWithdrawalSlot: {}
ClickWorldMapActionButton: {}
CloseBankFrame:
  inputs: {}
  outputs: {}
CloseGuildBankFrame:
  inputs: {}
  outputs: {}
CloseGuildRegistrar:
  inputs: {}
  outputs: {}
CloseGuildRoster: {}
CloseItemText:
  inputs: {}
  outputs: {}
CloseLoot: {}
CloseMail:
  inputs: {}
  outputs: {}
CloseMerchant:
  inputs: {}
  outputs: {}
ClosePetition:
  inputs: {}
  outputs: {}
ClosePetStables:
  inputs: {}
  outputs: {}
CloseQuest:
  inputs: {}
  outputs: {}
CloseResearch:
  inputs: {}
  outputs: {}
CloseSocketInfo:
  inputs: {}
  outputs: {}
ClosestGameObjectPosition: {}
ClosestUnitPosition: {}
CloseTabardCreation:
  inputs: {}
  outputs: {}
CloseTaxiMap: {}
CloseTrade:
  inputs: {}
  outputs: {}
CloseTrainer:
  inputs: {}
  outputs: {}
CollapseAllFactionHeaders: {}
CollapseFactionHeader: {}
CollapseGuildTradeSkillHeader: {}
CollapseQuestHeader: {}
CollapseWarGameHeader: {}
collectgarbage:
  stdlib: collectgarbage
CombatLog_Object_IsA: {}
CombatLogAddFilter: {}
CombatLogAdvanceEntry: {}
CombatLogClearEntries: {}
CombatLogGetCurrentEntry: {}
CombatLogGetCurrentEventInfo:
  inputs: {}
  outputs:
  - name: timestamp
    type: number
  - name: subevent
    type: string
  - name: hideCaster
    type: boolean
  - name: guid
    type: string
  - name: name
    type: string
  - name: flags
    type: number
  - name: raidFlags
    type: number
CombatLogGetNumEntries:
  outputs:
  - type: number
CombatLogGetRetentionTime: {}
CombatLogResetFilter: {}
CombatLogSetCurrentEntry: {}
CombatLogSetRetentionTime: {}
CombatLogShowCurrentEntry: {}
CombatTextSetActiveUnit: {}
CompleteLFGReadyCheck: {}
CompleteLFGRoleCheck: {}
CompleteQuest: {}
ConfirmAcceptQuest: {}
ConfirmBindOnUse: {}
ConfirmBNRequestInviteFriend: {}
ConfirmLootRoll: {}
ConfirmLootSlot: {}
ConfirmNoRefundOnUse: {}
ConfirmOnUse: {}
ConfirmReadyCheck: {}
ConfirmTalentWipe: {}
ConsoleAddMessage:
  inputs:
  - name: message
    type: string
  outputs: {}
ConsoleExec:
  inputs:
  - name: command
    type: string
  - default: false
    name: addToHistory
    type: boolean
  outputs:
  - name: result
    type: boolean
ConsoleGetAllCommands:
  impl: C_Console.GetAllCommands
  inputs: {}
  outputs:
  - name: commands
    type:
      arrayof:
        structure: ConsoleCommandInfo
ConsoleGetColorFromType:
  inputs:
  - name: colorType
    type:
      enum: ConsoleColorType
  outputs:
  - name: color
    type:
      structure: colorRGB
ConsoleGetFontHeight:
  inputs: {}
  outputs:
  - name: fontHeightInPixels
    type: number
ConsoleIsActive:
  inputs: {}
  outputs:
  - name: consoleIsActive
    type: boolean
ConsolePrintAllMatchingCommands:
  inputs:
  - name: partialCommandText
    type: string
  outputs: {}
ConsoleSetFontHeight:
  inputs:
  - name: fontHeightInPixels
    type: number
  outputs: {}
CopyToClipboard:
  inputs:
  - name: text
    type: string
  - default: false
    name: removeMarkup
    type: boolean
  outputs:
  - name: length
    type: number
coroutine.create:
  stdlib: coroutine.create
coroutine.resume:
  stdlib: coroutine.resume
coroutine.running:
  stdlib: coroutine.running
coroutine.status:
  stdlib: coroutine.status
coroutine.wrap:
  stdlib: coroutine.wrap
coroutine.yield:
  stdlib: coroutine.yield
cos:
  nowrap: true
  stdlib: cos
CreateFont:
  impl: CreateFont
  inputs:
  - name: name
    type: string
  outputs:
  - name: font
    type: Font
CreateForbiddenFrame:
  impl: CreateForbiddenFrame
  inputs:
  - name: frameType
    type: string
  - name: name
    nilable: true
    type: tostring
  - name: parent
    nilable: true
    type: Frame
  - name: template
    nilable: true
    type: string
  - name: id
    nilable: true
    type: number
  outputs:
  - name: frame
    type: Frame
CreateFrame:
  impl: CreateFrame
  inputs:
  - name: frameType
    type: string
  - name: name
    nilable: true
    type: tostring
  - name: parent
    nilable: true
    type: Frame
  - name: template
    nilable: true
    type: string
  - name: id
    nilable: true
    type: number
  outputs:
  - name: frame
    type: Frame
CreateMacro: {}
CreateNewRaidProfile: {}
CreateWindow:
  inputs:
  - default: true
    name: popupStyle
    type: boolean
  outputs:
  - name: window
    nilable: true
    type: table
CursorHasItem: {}
CursorHasMacro: {}
CursorHasMoney: {}
CursorHasSpell: {}
date:
  stdlib: date
DeathRecap_GetEvents: {}
DeathRecap_HasEvents:
  inputs: {}
  outputs:
  - type: boolean
debuglocals:
  stdlib: debuglocals
debugprofilestart:
  stdlib: debugprofilestart
debugprofilestop:
  stdlib: debugprofilestop
debugstack:
  stdlib: debugstack
DeclineChannelInvite: {}
DeclineGroup: {}
DeclineGuild: {}
DeclineName:
  inputs:
  - name: name
    type: string
  - name: gender
    nilable: true
    type: number
  - name: declensionSet
    type: number
  outputs:
  - name: declinedNames
    type: string
DeclineQuest: {}
DeclineResurrect: {}
DeclineSpellConfirmationPrompt: {}
deg:
  alias: math.deg
DeleteCursorItem: {}
DeleteGMTicket: {}
DeleteInboxItem: {}
DeleteMacro:
  outputs: {}
DeleteRaidProfile: {}
DemoteAssistant: {}
DepositGuildBankMoney: {}
DepositReagentBank: {}
DescendStop:
  inputs: {}
  outputs: {}
DestroyTotem: {}
DetectWowMouse: {}
difftime:
  stdlib: difftime
DisableSpellAutocast: {}
DismissCompanion: {}
Dismount:
  inputs: {}
  outputs: {}
DisplayChannelOwner: {}
DoEmote:
  impl: DoEmote
  inputs:
  - name: token
    type: string
  - name: unit
    nilable: true
    type: unit
  - name: hold
    nilable: true
    type: boolean
  outputs:
  - name: restricted
    type: boolean
DoesCurrentLocaleSellExpansionLevels:
  inputs: {}
  outputs:
  - name: regionSellsExpansions
    type: boolean
DoesItemContainSpec: {}
DoesSpellExist:
  inputs:
  - nilable: true
    type: string
  outputs:
  - type: boolean
DoesTemplateExist: {}
DoMasterLootRoll: {}
DoReadyCheck: {}
DropCursorMoney: {}
DropItemOnUnit: {}
DumpMovementCapture:
  inputs: {}
  outputs: {}
DungeonAppearsInRandomLFD: {}
EditMacro: {}
EJ_ClearSearch: {}
EJ_EndSearch: {}
EJ_GetContentTuningID: {}
EJ_GetCreatureInfo: {}
EJ_GetCurrentTier: {}
EJ_GetDifficulty: {}
EJ_GetEncounterInfo:
  outputs:
  - type: string
  - type: string
  - type: number
  - type: number
  - type: string
  - type: number
  - type: number
  - type: number
EJ_GetEncounterInfoByIndex: {}
EJ_GetInstanceByIndex: {}
EJ_GetInstanceForMap: {}
EJ_GetInstanceInfo: {}
EJ_GetInvTypeSortOrder: {}
EJ_GetLootFilter: {}
EJ_GetMapEncounter: {}
EJ_GetNumEncountersForLootByIndex: {}
EJ_GetNumLoot:
  outputs:
  - type: number
EJ_GetNumSearchResults: {}
EJ_GetNumTiers:
  inputs: {}
  outputs:
  - name: numTiers
    type: number
EJ_GetSearchProgress: {}
EJ_GetSearchResult: {}
EJ_GetSearchSize: {}
EJ_GetSectionPath: {}
EJ_GetTierInfo: {}
EJ_HandleLinkPath: {}
EJ_InstanceIsRaid: {}
EJ_IsLootListOutOfDate: {}
EJ_IsSearchFinished: {}
EJ_IsValidInstanceDifficulty: {}
EJ_ResetLootFilter: {}
EJ_SelectEncounter: {}
EJ_SelectInstance: {}
EJ_SelectTier:
  inputs:
  - name: tier
    type: number
  outputs: {}
EJ_SetDifficulty: {}
EJ_SetLootFilter: {}
EJ_SetSearch: {}
EjectPassengerFromSeat: {}
EnableSpellAutocast: {}
EndBoundTradeable: {}
EndRefund: {}
EnumerateFrames:
  impl: EnumerateFrames
  inputs:
  - name: frame
    nilable: true
    type: Frame
  outputs:
  - name: next
    nilable: true
    type: Frame
EnumerateServerChannels:
  inputs: {}
EquipCursorItem: {}
EquipItemByName:
  inputs:
  - name: item
    nilable: true
    type: string
  outputs: {}
EquipPendingItem: {}
error:
  stdlib: error
ExecuteVoidTransfer: {}
exp:
  alias: math.exp
ExpandAllFactionHeaders: {}
ExpandFactionHeader: {}
ExpandGuildTradeSkillHeader: {}
ExpandQuestHeader: {}
ExpandWarGameHeader: {}
FactionToggleAtWar: {}
fastrandom:
  stdlib: fastrandom
FillLocalizedClassList:
  impl: FillLocalizedClassList
  inputs:
  - name: classTable
    type: table
  - name: isFemale
    nilable: true
    type: boolean
  outputs:
  - name: classTable
    type: table
FindBaseSpellByID: {}
FindFlyoutSlotBySpellID: {}
FindSpellBookSlotBySpellID:
  inputs:
  - name: spellID
    type: number
  outputs:
  - name: slot
    type: number
FindSpellOverrideByID: {}
FlagTutorial: {}
FlashClientIcon: {}
FlipCameraYaw:
  inputs:
  - name: angle
    type: number
  outputs: {}
floor:
  alias: math.floor
FlyoutHasSpell: {}
FocusUnit:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs: {}
FollowUnit: {}
forceinsecure:
  stdlib: forceinsecure
ForceLogout: {}
ForceQuit: {}
ForfeitDuel: {}
format:
  alias: string.format
FrameXML_Debug: {}
frexp:
  alias: math.frexp
GameMovieFinished:
  inputs: {}
  outputs: {}
gcinfo:
  stdlib: gcinfo
GetAccountExpansionLevel:
  inputs: {}
  outputs:
  - name: expansionLevel
    type: number
GetAchievementCategory: {}
GetAchievementComparisonInfo: {}
GetAchievementCriteriaInfo:
  inputs:
  - name: achievementID
    type: number
  - name: criteriaIndex
    type: number
  outputs:
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
  - type: string
  - type: number
  - type: number
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
GetAchievementCriteriaInfoByID:
  inputs:
  - name: achievementID
    type: number
  - name: criteriaID
    type: number
  outputs:
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
  - type: string
  - type: number
  - type: number
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
GetAchievementGuildRep: {}
GetAchievementInfo:
  inputs:
  - type: number
  - nilable: true
    type: number
  outputs:
  - type: number
  - type: string
  - type: number
  - type: boolean
  - type: number
  - type: number
  - type: number
  - type: string
  - type: number
  - type: number
  - type: string
  - type: boolean
  - type: boolean
  - type: string
  - type: boolean
GetAchievementLink: {}
GetAchievementNumCriteria:
  inputs:
  - name: achievementID
    type: number
  outputs:
  - type: number
GetAchievementNumRewards: {}
GetAchievementReward: {}
GetAchievementSearchProgress: {}
GetAchievementSearchSize: {}
GetActionAutocast: {}
GetActionBarPage:
  inputs: {}
  outputs:
  - type: number
GetActionBarToggles:
  inputs: {}
  outputs:
  - name: bottomLeftState
    type: boolean
  - name: bottomRightState
    type: boolean
  - name: sideRightState
    type: boolean
  - name: sideRight2State
    type: boolean
  - name: extra1State
    type: boolean
  - name: extra2State
    type: boolean
  - name: extra3State
    type: boolean
GetActionCharges: {}
GetActionCooldown:
  inputs:
  - name: action
    type: number
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
  - name: enable
    type: number
  - name: modRate
    type: number
GetActionCount:
  outputs:
  - type: number
GetActionInfo: {}
GetActionLossOfControlCooldown:
  inputs:
  - type: number
  outputs:
  - type: number
  - type: number
GetActionText: {}
GetActionTexture: {}
GetActiveArtifactByRace: {}
GetActiveLevel: {}
GetActiveLootRollIDs:
  outputs:
  - type: table
GetActiveQuestID:
  inputs:
  - name: index
    type: number
  outputs:
  - name: activeQuestID
    type: number
GetActiveSpecGroup: {}
GetActiveTitle:
  inputs:
  - name: index
    type: number
  outputs:
  - name: title
    type: string
GetAddOnCPUUsage: {}
GetAddOnMemoryUsage:
  inputs:
  - name: addon
    type: uiAddon
  outputs:
  - name: memoryKb
    type: number
GetAllowLowLevelRaid: {}
GetAlternativeDefaultLanguage: {}
GetArchaeologyInfo: {}
GetArchaeologyRaceInfo:
  inputs:
  - name: raceIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: itemID
    type: number
  - name: currencyAmount
    type: number
  - name: projectAmount
    type: number
GetArchaeologyRaceInfoByID: {}
GetAreaSpiritHealerTime:
  inputs: {}
  outputs:
  - name: value
    type: number
GetAreaText:
  inputs: {}
  outputs:
  - name: value
    type: string
GetArenaOpponentSpec:
  inputs:
  - name: index
    nilable: true
    type: number
  outputs:
  - name: specID
    stub: 71
    type: number
  - name: gender
    type: number
GetArtifactInfoByRace: {}
GetArtifactProgress: {}
GetAttackPowerForStat:
  inputs:
  - type: number
  - type: number
  outputs:
  - type: number
GetAutoCompletePresenceID: {}
GetAutoCompleteRealms:
  inputs:
  - name: tableNames
    nilable: true
    type: table
  outputs:
  - name: tableNames
    type: table
GetAutoCompleteResults: {}
GetAutoDeclineGuildInvites:
  inputs: {}
  outputs:
  - name: value
    type: boolean
GetAutoQuestPopUp: {}
GetAvailableBandwidth:
  inputs: {}
  outputs:
  - type: number
GetAvailableLevel: {}
GetAvailableLocaleInfo:
  inputs:
  - default: false
    name: ignoreLocaleRestrictions
    type: boolean
  outputs:
  - name: localeInfos
    type:
      arrayof:
        structure: LocaleInfo
GetAvailableLocales:
  inputs:
  - default: false
    name: ignoreLocaleRestrictions
    type: boolean
  outputs:
  - name: unpackedPrimitiveType
    type: string
GetAvailableQuestInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: isTrivial
    type: boolean
  - name: frequency
    type: number
  - name: isRepeatable
    type: boolean
  - name: isLegendary
    type: boolean
  - name: questID
    type: number
GetAvailableTitle:
  inputs:
  - name: index
    type: number
  outputs:
  - name: title
    type: string
GetAverageItemLevel:
  outputs:
  - type: number
  - type: number
  - type: number
GetAvoidance:
  inputs: {}
  outputs:
  - name: value
    type: number
GetBackgroundLoadingStatus: {}
GetBankSlotCost:
  inputs:
  - name: numSlots
    nilable: true
    type: number
  outputs:
  - name: cost
    type: number
GetBattlefieldArenaFaction:
  inputs: {}
  outputs:
  - type: number
GetBattlefieldEstimatedWaitTime: {}
GetBattlefieldInstanceExpiration: {}
GetBattlefieldInstanceRunTime: {}
GetBattlefieldMapIconScale: {}
GetBattlefieldPortExpiration:
  inputs:
  - name: index
    type: number
  outputs:
  - name: expiration
    type: number
GetBattlefieldScore: {}
GetBattlefieldStatData: {}
GetBattlefieldStatus:
  inputs:
  - name: index
    type: number
  outputs:
  - name: queueStatus
    type: string
  - name: queueMapName
    type: string
  - name: queueInstanceID
    type: number
GetBattlefieldTeamInfo: {}
GetBattlefieldTimeWaited: {}
GetBattlefieldWinner: {}
GetBattlegroundInfo:
  inputs: {}
  outputs:
  - name: localizedName
    type: string
  - name: canEnter
    type: boolean
  - name: isHoliday
    type: boolean
  - name: isRandom
    type: boolean
  - name: battleGroundID
    type: number
  - name: mapDescription
    type: string
  - name: bgMapID
    type: number
  - name: maxPlayers
    type: number
  - name: gameType
    type: number
  - name: iconTexture
    type: number
  - name: shortDescription
    type: string
  - name: longDescription
    type: string
GetBattlegroundPoints: {}
GetBestFlexRaidChoice: {}
GetBestRFChoice:
  inputs: {}
  outputs:
  - name: raid
    type: number
GetBillingTimeRested: {}
GetBinding:
  comment: trailing string... with keybinding values
  inputs:
  - name: index
    type: number
  outputs:
  - name: command
    stub: MOVEFORWARD
    type: string
  - name: category
    stub: BINDING_HEADER_MOVEMENT
    type: string
GetBindingAction: {}
GetBindingByKey: {}
GetBindingKey: {}
GetBindingText:
  outputs:
  - type: string
GetBindLocation: {}
GetBlockChance: {}
GetBonusBarIndex: {}
GetBonusBarOffset: {}
GetBuildInfo:
  impl: GetBuildInfo_10_1
  inputs: {}
  outputs:
  - name: buildVersion
    type: string
  - name: buildNumber
    type: string
  - name: buildDate
    type: string
  - name: interfaceVersion
    type: number
  - name: localizedVersion
    type: string
  - name: buildInfo
    type: string
GetButtonMetatable:
  impl: GetButtonMetatable
  inputs: {}
GetBuybackItemInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: price
    type: number
  - name: quantity
    type: number
  - name: numAvailable
    type: number
  - name: isUsable
    type: boolean
GetBuybackItemLink:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemLink
    type: string
GetCallPetSpellInfo: {}
GetCameraZoom: {}
GetCategoryAchievementPoints:
  inputs:
  - name: categoryID
    type: number
  - name: includeSubCategories
    type: boolean
  outputs:
  - name: value
    type: number
GetCategoryInfo:
  inputs:
  - type: number
  outputs:
  - type: string
  - type: number
  - type: number
GetCategoryList:
  outputs:
  - type: table
GetCategoryNumAchievements: {}
GetCemeteryPreference: {}
GetChannelDisplayInfo:
  inputs:
  - name: id
    type: string
  outputs:
  - name: name
    type: string
  - name: header
    type: boolean
  - name: collapsed
    type: boolean
  - name: channelNumber
    type: number
  - name: count
    type: number
  - name: active
    type: boolean
  - name: category
    type: string
  - name: channelType
    type: string
GetChannelList: {}
GetChannelName: {}
GetChatTypeIndex:
  outputs:
  - type: number
GetChatWindowChannels: {}
GetChatWindowInfo:
  impl: GetChatWindowInfo
  inputs:
  - name: id
    type: number
  outputs:
  - name: name
    type: string
  - name: fontSize
    type: number
  - name: r
    type: number
  - name: g
    type: number
  - name: b
    type: number
  - name: alpha
    type: number
  - name: shown
    type: boolean
  - name: locked
    type: boolean
  - name: docked
    nilable: true
    type: number
  - name: uninteractable
    type: boolean
GetChatWindowMessages:
  impl: GetChatWindowMessages
  inputs:
  - name: index
    type: number
GetChatWindowSavedDimensions: {}
GetChatWindowSavedPosition: {}
GetClassInfo:
  impl: GetClassInfo
  inputs:
  - name: classIndex
    type: number
  mayreturnnothing: true
  outputs:
  - name: className
    type: string
  - name: classFile
    type: string
  - name: classID
    type: number
GetClickFrame:
  impl: GetClickFrame
  inputs:
  - name: name
    type: string
  outputs:
  - name: frame
    nilable: true
    type: Frame
GetClientDisplayExpansionLevel:
  inputs: {}
  outputs:
  - name: expansionLevel
    type: number
GetCoinIcon: {}
GetCoinText:
  inputs:
  - name: money
    type: number
  - name: separator
    nilable: true
    type: string
  outputs:
  - name: formattedAmount
    type: string
GetCoinTextureString:
  inputs:
  - name: amount
    type: number
  - name: fontHeight
    nilable: true
    type: number
  outputs:
  - name: formattedAmount
    type: string
GetCombatRating:
  inputs:
  - type: number
  outputs:
  - type: number
GetCombatRatingBonus:
  inputs:
  - type: number
  outputs:
  - type: number
GetCombatRatingBonusForCombatRatingValue: {}
GetComboPoints:
  outputs:
  - name: comboPoints
    stub: 0
    type: number
GetCompanionInfo: {}
GetComparisonAchievementPoints: {}
GetComparisonCategoryNumAchievements: {}
GetComparisonStatistic: {}
GetCorpseRecoveryDelay:
  inputs: {}
  outputs:
  - name: recoveryDelay
    type: number
GetCorruption:
  outputs:
  - type: number
GetCorruptionResistance: {}
GetCritChance:
  inputs: {}
  outputs:
  - type: number
GetCritChanceProvidesParryEffect:
  inputs: {}
  outputs:
  - name: value
    type: boolean
GetCriteriaSpell: {}
GetCurrentArenaSeason:
  inputs: {}
  outputs:
  - name: value
    type: number
GetCurrentBindingSet:
  inputs: {}
  outputs:
  - type: number
GetCurrentCombatTextEventInfo: {}
GetCurrentEventID: {}
GetCurrentGlyphNameForSpell: {}
GetCurrentGraphicsAPI: {}
GetCurrentGraphicsSetting: {}
GetCurrentGuildBankTab:
  outputs:
  - type: number
GetCurrentKeyBoardFocus: {}
GetCurrentLevelFeatures: {}
GetCurrentRegion:
  inputs: {}
  outputs:
  - name: region
    type: number
GetCurrentRegionName:
  inputs: {}
  outputs:
  - name: regionName
    type: string
GetCurrentScaledResolution:
  inputs: {}
  outputs:
  - name: width
    stub: 1024
    type: number
  - name: height
    stub: 768
    type: number
GetCurrentTitle: {}
GetCursorDelta:
  inputs: {}
  outputs:
  - name: deltaX
    type: number
  - name: deltaY
    type: number
GetCursorInfo: {}
GetCursorMoney:
  outputs:
  - type: number
GetCursorPosition:
  inputs: {}
  outputs:
  - name: posX
    type: number
  - name: posY
    type: number
GetDailyQuestsCompleted:
  outputs:
  - type: number
GetDeathRecapLink: {}
GetDefaultLanguage:
  inputs: {}
  outputs:
  - name: language
    stub: Common
    type: string
  - name: languageID
    stub: 7
    type: number
GetDefaultScale:
  inputs: {}
  outputs:
  - name: scale
    type: number
GetDemotionRank: {}
GetDetailedItemLevelInfo: {}
GetDifficultyInfo:
  inputs:
  - type: number
  outputs:
  - type: string
  - type: string
  - type: boolean
  - type: boolean
  - type: boolean
  - type: boolean
  - type: number
GetDodgeChance: {}
GetDodgeChanceFromAttribute: {}
GetDownloadedPercentage:
  inputs: {}
  outputs:
  - type: number
GetDungeonDifficultyID:
  inputs: {}
  outputs:
  - type: number
GetDungeonForRandomSlot: {}
GetEditBoxMetatable: {}
GetEquipmentNameFromSpell: {}
geterrorhandler:
  stdlib: geterrorhandler
GetEventTime: {}
GetExistingSocketInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: gemMatchesSocket
    type: boolean
GetExistingSocketLink: {}
GetExpansionDisplayInfo:
  inputs:
  - name: expansionLevel
    type: number
  outputs:
  - name: info
    nilable: true
    type:
      structure: ExpansionDisplayInfo
GetExpansionForLevel:
  inputs:
  - name: playerLevel
    type: number
  outputs:
  - name: expansionLevel
    type: number
GetExpansionLevel:
  inputs: {}
  outputs:
  - name: expansionLevel
    type: number
GetExpansionTrialInfo:
  inputs: {}
  outputs:
  - name: isExpansionTrialAccount
    type: boolean
  - name: expansionTrialRemainingSeconds
    nilable: true
    type: number
GetExpertise:
  inputs: {}
  outputs:
  - type: number
  - type: number
GetExtraBarIndex:
  outputs:
  - type: number
GetFactionInfo:
  inputs:
  - name: factionIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: description
    type: string
  - name: standingID
    type: number
  - name: barMin
    type: number
  - name: barMax
    type: number
  - name: barValue
    type: number
  - name: atWarWith
    type: boolean
  - name: canToggleAtWar
    type: boolean
  - name: isHeader
    type: boolean
  - name: isCollapsed
    type: boolean
  - name: hasRep
    type: boolean
  - name: isWatched
    type: boolean
  - name: isChild
    type: boolean
  - name: factionID
    type: number
  - name: hasBonusRepGain
    type: boolean
  - name: canSetInteractive
    type: boolean
GetFactionInfoByID:
  inputs:
  - type: number
  outputs:
  - name: name
    type: string
  - name: description
    type: string
  - name: standingID
    type: number
  - name: barMin
    type: number
  - name: barMax
    type: number
  - name: barValue
    type: number
  - name: atWarWith
    type: boolean
  - name: canToggleAtWar
    type: boolean
  - name: isHeader
    type: boolean
  - name: isCollapsed
    type: boolean
  - name: hasRep
    type: boolean
  - name: isWatched
    type: boolean
  - name: isChild
    type: boolean
  - name: factionID
    type: number
  - name: hasBonusRepGain
    type: boolean
  - name: canSetInteractive
    type: boolean
GetFailedPVPTalentIDs: {}
GetFailedTalentIDs: {}
getfenv:
  impl: getfenv
GetFileIDFromPath: {}
GetFileStreamingStatus:
  inputs: {}
  outputs:
  - name: status
    stub: 0
    type: number
GetFilteredAchievementID: {}
GetFlexRaidDungeonInfo: {}
GetFlyoutID: {}
GetFlyoutInfo:
  inputs:
  - name: flyoutID
    type: number
  outputs:
  - name: name
    type: string
  - name: description
    type: string
  - name: numSlots
    type: number
  - name: isKnown
    type: boolean
GetFlyoutSlotInfo: {}
GetFollowerTypeIDFromSpell: {}
GetFontInfo:
  inputs:
  - name: fontObject
    type: table
  outputs:
  - name: info
    nilable: true
    type:
      structure: FontScriptInfo
GetFonts:
  inputs: {}
  outputs:
  - name: fontNames
    type:
      arrayof: string
GetFontStringMetatable:
  impl: GetFontStringMetatable
  inputs: {}
GetFrameCPUUsage: {}
GetFrameMetatable:
  impl: GetFrameMetatable
  inputs: {}
GetFramerate:
  inputs: {}
  outputs:
  - type: number
GetFramesRegisteredForEvent: {}
GetGameMessageInfo: {}
GetGameTime:
  inputs: {}
  outputs:
  - name: hour
    type: number
  - name: minute
    type: number
GetGMStatus: {}
GetGMTicket: {}
GetGraphicsAPIs:
  comment: actually returns a string dotdotdot, not just a string
  inputs: {}
  outputs:
  - name: graphicsAPIs
    stub: opengl
    type: string
GetGraphicsCVarValueForQualityLevel: {}
GetGreetingText:
  inputs: {}
  outputs:
  - name: greetingText
    type: string
GetGroupMemberCounts:
  inputs: {}
  outputs:
  - name: data
    stub:
      DAMAGER: 3
      HEALER: 1
      NOROLE: 0
      TANK: 1
    type: table
GetGuildAchievementMemberInfo: {}
GetGuildAchievementMembers: {}
GetGuildAchievementNumMembers: {}
GetGuildBankBonusDepositMoney: {}
GetGuildBankItemInfo:
  inputs:
  - name: tab
    type: number
  - name: index
    type: number
  outputs:
  - name: texture
    type: number
  - name: itemCount
    type: number
  - name: locked
    type: boolean
  - name: isFiltered
    type: boolean
  - name: quality
    type: number
GetGuildBankItemLink:
  inputs:
  - name: tab
    type: number
  - name: index
    type: number
  outputs:
  - name: itemLink
    type: string
GetGuildBankMoney:
  inputs: {}
  outputs:
  - name: value
    type: number
GetGuildBankMoneyTransaction:
  inputs:
  - name: index
    type: number
  outputs:
  - name: type
    stub: deposit
    type: string
  - name: user
    type: string
  - name: amount
    type: number
  - name: years
    type: number
  - name: months
    type: number
  - name: days
    type: number
  - name: hours
    type: number
GetGuildBankTabCost: {}
GetGuildBankTabInfo: {}
GetGuildBankTabPermissions: {}
GetGuildBankText:
  inputs:
  - name: tabIndex
    type: number
  outputs:
  - name: text
    type: string
GetGuildBankTransaction: {}
GetGuildBankWithdrawGoldLimit: {}
GetGuildBankWithdrawMoney:
  inputs: {}
  outputs:
  - name: value
    type: number
GetGuildCategoryList: {}
GetGuildChallengeInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: index
    type: number
  - name: current
    type: number
  - name: max
    type: number
GetGuildCharterCost: {}
GetGuildEventInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: type
    type: number
  - name: player1
    type: string
  - name: player2
    type: string
  - name: rank
    type: number
  - name: year
    type: number
  - name: month
    type: number
  - name: day
    type: number
  - name: hour
    type: number
GetGuildExpirationTime: {}
GetGuildFactionGroup: {}
GetGuildFactionInfo:
  inputs: {}
  outputs:
  - name: name
    type: string
  - name: description
    type: string
  - name: standingID
    type: number
  - name: barMin
    type: number
  - name: barMax
    type: number
  - name: barValue
    type: number
GetGuildInfo:
  inputs:
  - name: unit
    type: string
  outputs:
  - name: guildName
    type: string
  - name: guildRankName
    type: string
  - name: guildRankIndex
    type: number
GetGuildInfoText:
  inputs: {}
  outputs:
  - name: text
    type: string
GetGuildLogoInfo: {}
GetGuildMemberRecipes: {}
GetGuildNewsFilters: {}
GetGuildNewsMemberName: {}
GetGuildNewsSort: {}
GetGuildPerkInfo:
  inputs:
  - name: index
    nilable: true
    type: number
  outputs:
  - name: name
    type: string
  - name: spellID
    type: number
  - name: iconTexture
    type: number
GetGuildRecipeInfoPostQuery: {}
GetGuildRecipeMember: {}
GetGuildRenameRequired: {}
GetGuildRewardInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: achievementID
    type: number
  - name: itemID
    type: number
  - name: itemName
    type: string
  - name: iconTexture
    type: number
  - name: repLevel
    type: number
  - name: moneyCost
    type: number
GetGuildRosterInfo:
  inputs:
  - name: guildIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: rank
    type: string
  - name: rankIndex
    stub: 0
    type: number
  - name: class
    type: string
  - name: zone
    type: string
  - name: officerNote
    type: string
  - name: isOnline
    type: boolean
  - name: isAway
    type: boolean
GetGuildRosterLargestAchievementPoints: {}
GetGuildRosterLastOnline: {}
GetGuildRosterMOTD:
  outputs:
  - type: string
GetGuildRosterSelection:
  inputs: {}
  outputs:
  - name: memberIndex
    type: number
GetGuildRosterShowOffline:
  inputs: {}
  outputs:
  - name: value
    type: boolean
GetGuildTabardFiles: {}
GetGuildTradeSkillInfo: {}
GetHaste:
  inputs: {}
  outputs:
  - name: value
    type: number
GetHitModifier: {}
GetHomePartyInfo: {}
GetInboxHeaderInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: packageIcon
    type: string
  - name: stationeryIcon
    type: string
  - name: sender
    type: string
  - name: subject
    type: string
  - name: money
    type: number
  - name: codAmount
    type: number
  - name: daysLeft
    type: number
  - name: hasItem
    nilable: true
    type: number
  - name: wasRead
    type: oneornil
  - name: wasReturned
    type: oneornil
  - name: textCreated
    type: oneornil
  - name: canReply
    type: oneornil
  - name: isGM
    type: oneornil
GetInboxInvoiceInfo: {}
GetInboxItem: {}
GetInboxItemLink:
  inputs:
  - name: index
    type: number
  - name: attachmentIndex
    type: number
  outputs:
  - name: itemLink
    type: string
GetInboxNumItems:
  inputs: {}
  outputs:
  - name: numItems
    type: number
  - name: totalItems
    type: number
GetInboxText: {}
GetInspectArenaData: {}
GetInspectGuildInfo: {}
GetInspectHonorData:
  inputs: {}
  outputs:
  - name: sessionHK
    type: number
  - name: sessionDK
    type: number
  - name: yesterdayHK
    type: number
  - name: yesterdayHonor
    type: number
  - name: thisweekHK
    type: number
  - name: thisweekHonor
    type: number
  - name: lastweekHK
    type: number
  - name: lastweekHonor
    type: number
  - name: lastweekStanding
    type: number
  - name: lifetimeHK
    type: number
  - name: lifetimeDK
    type: number
  - name: lifetimeRank
    type: number
GetInspectRatedBGData: {}
GetInspectSpecialization: {}
GetInspectTalent: {}
GetInstanceBootTimeRemaining: {}
GetInstanceInfo:
  inputs: {}
  outputs:
  - name: name
    type: string
  - name: instanceType
    type: string
  - name: difficultyID
    type: number
  - name: difficultyName
    type: string
  - name: maxPlayers
    type: number
  - name: dynamicDifficulty
    type: number
  - name: isDynamic
    type: boolean
  - name: instanceID
    type: number
  - name: instanceGroupSize
    type: number
  - name: lfgDungeonID
    nilable: true
    type: number
GetInstanceLockTimeRemaining:
  inputs: {}
  outputs:
  - name: lockTimeLeft
    type: number
  - name: isPreviousInstance
    type: boolean
  - name: encountersTotal
    type: number
  - name: encountersComplete
    type: number
GetInstanceLockTimeRemainingEncounter: {}
GetInventoryAlertStatus: {}
GetInventoryItemBroken: {}
GetInventoryItemCooldown:
  inputs:
  - name: unit
    type: string
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
  - name: enable
    type: number
GetInventoryItemCount:
  inputs:
  - type: string
  - type: number
  outputs:
  - type: number
GetInventoryItemDurability: {}
GetInventoryItemEquippedUnusable: {}
GetInventoryItemID: {}
GetInventoryItemLink: {}
GetInventoryItemQuality: {}
GetInventoryItemsForSlot: {}
GetInventoryItemTexture: {}
GetInventorySlotInfo:
  impl: GetInventorySlotInfo
  inputs:
  - name: slotName
    type: string
  outputs:
  - name: slotId
    type: number
  - name: texture
    type: number
GetInviteConfirmationInfo: {}
GetItemChildInfo: {}
GetItemClassInfo:
  inputs:
  - type: number
  outputs:
  - name: name
    type: string
GetItemCooldown:
  inputs:
  - type: number
  outputs:
  - type: number
  - type: number
  - type: number
GetItemCount:
  outputs:
  - type: number
GetItemCreationContext: {}
GetItemFamily: {}
GetItemGem: {}
GetItemIcon:
  inputs:
  - nilable: true
    type: number
  outputs:
  - type: number
GetItemInfo: {}
GetItemInfoInstant:
  inputs:
  - name: itemInfo
    type: string
  outputs:
  - name: itemID
    type: number
  - name: itemType
    type: string
  - name: itemSubType
    type: string
  - name: itemEquipLoc
    type: string
  - name: icon
    type: number
  - name: classID
    type: number
  - name: subclassID
    type: number
GetItemInventorySlotInfo:
  inputs:
  - name: inventoryType
    type: number
  outputs:
  - name: name
    stub: someNonEmptyString
    type: string
GetItemLevelColor: {}
GetItemQualityColor:
  impl: GetItemQualityColor
  inputs:
  - name: quality
    type: number
  outputs:
  - name: r
    type: number
  - name: g
    type: number
  - name: b
    type: number
  - name: hex
    type: string
GetItemSetInfo: {}
GetItemSpecInfo: {}
GetItemSpell: {}
GetItemStatDelta: {}
GetItemStats: {}
GetItemSubClassInfo:
  inputs:
  - name: classID
    type: number
  - name: subClassID
    type: number
  outputs:
  - name: name
    stub: someNonEmptyString
    type: string
  - name: isArmorType
    type: boolean
GetItemUniqueness: {}
GetJailersTowerLevel: {}
GetJournalInfoForSpellConfirmation: {}
GetLanguageByIndex: {}
GetLatestCompletedAchievements: {}
GetLatestCompletedComparisonAchievements: {}
GetLatestThreeSenders: {}
GetLatestUpdatedComparisonStats: {}
GetLatestUpdatedStats: {}
GetLegacyRaidDifficultyID:
  inputs: {}
  outputs:
  - type: number
GetLFDChoiceCollapseState:
  inputs:
  - name: LFGCollapseList
    nilable: true
    type: table
  outputs:
  - name: LFGCollapseList
    type: table
GetLFDChoiceEnabledState: {}
GetLFDChoiceOrder:
  inputs: {}
  outputs:
  - type: table
GetLFDLockInfo:
  inputs:
  - name: dungeonID
    type: number
  - name: index
    type: number
  outputs:
  - name: playerName
    type: string
  - name: lockedReason
    type: string
  - name: subReason1
    type: string
  - name: subReason2
    type: string
  - name: secondReasonID
    type: string
  - name: secondReasonString
    type: string
GetLFDLockPlayerCount:
  inputs: {}
  outputs:
  - name: count
    type: number
GetLFDRoleLockInfo: {}
GetLFDRoleRestrictions:
  inputs:
  - name: dungeonID
    type: number
  outputs:
  - name: tankLocked
    type: boolean
  - name: healerLocked
    type: boolean
  - name: dpsLocked
    type: boolean
GetLFGBootProposal:
  inputs: {}
  outputs:
  - name: voteInProgress
    type: boolean
  - name: didVote
    type: boolean
  - name: myVote
    type: number
  - name: targetName
    type: string
  - name: totalVotes
    type: number
  - name: bootVotes
    type: number
  - name: timeLeft
    type: number
  - name: reason
    type: string
GetLFGCategoryForID: {}
GetLFGCompletionReward:
  inputs: {}
  outputs:
  - name: name
    type: string
  - name: typeID
    type: number
  - name: subtypeID
    type: number
  - name: iconTextureFile
    type: number
  - name: moneyBase
    type: number
  - name: moneyVar
    type: number
  - name: experienceBase
    type: number
  - name: experienceVar
    type: number
  - name: numStrangers
    type: number
  - name: numRewards
    type: number
GetLFGCompletionRewardItem:
  inputs:
  - name: index
    type: number
  outputs:
  - name: texture
    type: number
  - name: quantity
    type: number
  - name: isBonus
    type: boolean
  - name: bonusQuantity
    type: number
  - name: name
    type: string
  - name: quality
    type: number
  - name: id
    type: number
  - name: objectType
    type: number
GetLFGCompletionRewardItemLink:
  inputs:
  - name: index
    type: number
  outputs:
  - name: rewardItemLink
    type: string
GetLFGDeserterExpiration:
  outputs:
  - type: number
GetLFGDungeonEncounterInfo: {}
GetLFGDungeonInfo:
  inputs:
  - name: dungeonID
    type: number
  outputs:
  - name: name
    type: string
  - name: typeID
    type: number
  - name: subtypeID
    type: number
  - name: minLevel
    type: number
  - name: maxLevel
    type: number
  - name: recLevel
    type: number
  - name: minRecLevel
    type: number
  - name: maxRecLevel
    type: number
  - name: expansionLevel
    type: number
  - name: groupID
    type: number
  - name: textureFilename
    type: number
  - name: difficulty
    type: number
  - name: maxPlayers
    type: number
  - name: description
    type: string
  - name: isHoliday
    type: boolean
  - name: bonusRepAmount
    type: number
  - name: minPlayers
    type: number
  - name: isRandomTimewalker
    type: boolean
  - name: mapName
    type: string
  - name: minGear
    type: number
  - name: isScalingDungeon
    type: boolean
GetLFGDungeonNumEncounters:
  inputs:
  - name: dungeonID
    type: number
  outputs:
  - name: numEncounters
    type: number
  - name: numCompleted
    type: number
GetLFGDungeonRewardCapBarInfo: {}
GetLFGDungeonRewardCapInfo:
  inputs:
  - name: dungeonID
    type: number
  outputs:
  - name: currencyID
    type: number
  - name: currencyQuantity
    type: number
  - name: specificQuantity
    type: number
  - name: specificLimit
    type: number
  - name: overallQuantity
    type: number
  - name: overallLimit
    type: number
  - name: periodPurseQuantity
    type: number
  - name: periodPurseLimit
    type: number
  - name: purseQuantity
    type: number
  - name: purseLimit
    type: number
  - name: isWeekly
    type: boolean
GetLFGDungeonRewardInfo:
  inputs:
  - name: dungeonID
    type: number
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: numItems
    type: number
  - name: isBonusReward
    type: boolean
  - name: rewardType
    type: number
  - name: rewardID
    type: number
  - name: quality
    type: number
GetLFGDungeonRewardLink: {}
GetLFGDungeonRewards:
  inputs:
  - name: dungeonID
    type: number
  outputs:
  - name: doneToday
    type: number
  - name: moneyAmount
    type: number
  - name: moneyVar
    type: number
  - name: experienceGained
    type: number
  - name: experienceVar
    type: number
  - name: numRewards
    type: number
  - name: spellID
    type: number
GetLFGDungeonShortageRewardInfo: {}
GetLFGDungeonShortageRewardLink: {}
GetLFGInfoServer: {}
GetLFGInviteRoleAvailability: {}
GetLFGInviteRoleRestrictions: {}
GetLFGProposal: {}
GetLFGProposalEncounter: {}
GetLFGProposalMember: {}
GetLFGQueuedList: {}
GetLFGQueueStats: {}
GetLFGRandomCooldownExpiration: {}
GetLFGRandomDungeonInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: id
    type: number
  - name: name
    type: string
GetLFGReadyCheckUpdate: {}
GetLFGReadyCheckUpdateBattlegroundInfo: {}
GetLFGRoles: {}
GetLFGRoleShortageRewards:
  inputs:
  - name: dungeonID
    type: number
  - name: shortageIndex
    type: number
  outputs:
  - name: eligible
    type: number
  - name: forTank
    type: number
  - name: forHealer
    type: number
  - name: forDamage
    type: number
  - name: itemCount
    type: number
  - name: money
    type: number
  - name: xp
    type: number
GetLFGRoleUpdate: {}
GetLFGRoleUpdateBattlegroundInfo: {}
GetLFGRoleUpdateMember: {}
GetLFGRoleUpdateSlot: {}
GetLFGSuspendedPlayers: {}
GetLFRChoiceOrder:
  inputs: {}
  outputs:
  - type: table
GetLifesteal:
  inputs: {}
  outputs:
  - name: value
    type: number
GetLocale:
  inputs: {}
  outputs:
  - name: localeName
    stub: enUS
    type: string
GetLocalGameTime:
  inputs: {}
  outputs:
  - name: hour
    type: number
  - name: minute
    type: number
GetLooseMacroIcons:
  inputs:
  - name: iconTable
    nilable: true
    type: table
  outputs: {}
GetLooseMacroItemIcons: {}
GetLootInfo: {}
GetLootMethod:
  inputs: {}
  outputs:
  - name: lootMethod
    stub: freeforall
    type: string
  - name: partyMaster
    type: number
  - name: raidMaster
    type: number
GetLootRollItemInfo:
  inputs:
  - name: rollID
    type: number
  outputs:
  - name: texture
    type: string
  - name: name
    type: string
  - name: count
    type: number
  - name: quality
    type: number
  - name: bindOnPickUp
    type: boolean
  - name: canNeed
    type: boolean
  - name: canGreed
    type: boolean
  - name: canDisenchant
    type: boolean
  - name: reasonNeed
    type: number
  - name: reasonGreed
    type: number
  - name: reasonDisenchant
    type: number
  - name: deSkillRequired
    type: number
GetLootRollItemLink: {}
GetLootRollTimeLeft: {}
GetLootSlotInfo:
  inputs:
  - type: number
  outputs:
  - type: string
  - type: string
  - type: number
  - type: number
  - type: number
  - type: boolean
  - type: boolean
  - type: number
  - type: boolean
GetLootSlotLink: {}
GetLootSlotType:
  inputs:
  - name: slotIndex
    type: number
  outputs:
  - name: slotType
    type: number
GetLootSourceInfo: {}
GetLootSpecialization: {}
GetLootThreshold:
  outputs:
  - type: number
GetMacroBody: {}
GetMacroIcons:
  inputs:
  - name: iconTable
    nilable: true
    type: table
  outputs:
  - name: iconTable
    type: table
GetMacroIndexByName:
  inputs:
  - name: name
    type: string
  outputs:
  - name: macroSlot
    type: number
GetMacroInfo:
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: body
    type: string
GetMacroItem: {}
GetMacroItemIcons: {}
GetMacroSpell: {}
GetManaRegen: {}
GetMasterLootCandidate:
  inputs:
  - name: slot
    type: number
  - name: index
    type: number
  outputs:
  - name: candidate
    type: string
GetMastery: {}
GetMasteryEffect:
  inputs: {}
  outputs:
  - name: mastery
    type: number
  - name: bonusCoefficient
    type: number
GetMawPowerLinkBySpellID: {}
GetMaxBattlefieldID:
  outputs:
  - type: number
GetMaxCombatRatingBonus: {}
GetMaximumExpansionLevel:
  inputs: {}
  outputs:
  - name: expansionLevel
    type: number
GetMaxLevelForExpansionLevel:
  inputs:
  - name: expansionLevel
    type: number
  outputs:
  - name: maxLevel
    type: number
GetMaxLevelForLatestExpansion:
  inputs: {}
  outputs:
  - name: maxLevel
    type: number
GetMaxLevelForPlayerExpansion:
  inputs: {}
  outputs:
  - name: maxLevel
    type: number
GetMaxNumCUFProfiles: {}
GetMaxPlayerLevel:
  outputs:
  - type: number
GetMaxRenderScale:
  inputs: {}
  outputs:
  - name: value
    type: number
GetMaxRewardCurrencies:
  inputs: {}
  outputs:
  - name: maxRewardCurrencies
    type: number
GetMaxSpellStartRecoveryOffset: {}
GetMaxTalentTier: {}
GetMeleeHaste: {}
GetMerchantCurrencies:
  inputs: {}
  outputs: {}
GetMerchantFilter:
  inputs: {}
  outputs:
  - name: currentFilter
    type: number
GetMerchantItemCostInfo: {}
GetMerchantItemCostItem: {}
GetMerchantItemID:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemID
    type: number
GetMerchantItemInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: number
  - name: texture
    type: string
  - name: price
    type: number
  - name: quantity
    type: number
  - name: numAvailable
    type: number
  - name: isPurchasable
    type: oneornil
  - name: isUsable
    type: oneornil
  - name: extendedCost
    type: oneornil
  - name: currencyID
    nilable: true
    type: number
GetMerchantItemLink:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemLink
    type: string
GetMerchantItemMaxStack: {}
GetMerchantNumItems:
  inputs: {}
  outputs:
  - name: numMerchantItems
    type: number
getmetatable:
  stdlib: getmetatable
GetMinimapZoneText:
  inputs: {}
  outputs:
  - type: string
GetMinimumExpansionLevel:
  inputs: {}
  outputs:
  - name: expansionLevel
    type: number
GetMinRenderScale:
  inputs: {}
  outputs:
  - name: value
    type: number
GetMirrorTimerInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: timer
    stub: UNKNOWN
    type: string
  - name: value
    type: number
  - name: maxValue
    type: number
  - name: scale
    type: number
  - name: paused
    type: number
  - name: label
    type: string
GetMirrorTimerProgress: {}
GetModifiedClick: {}
GetModifiedClickAction: {}
GetModResilienceDamageReduction: {}
GetMoney:
  outputs:
  - type: number
GetMonitorAspectRatio: {}
GetMonitorCount: {}
GetMonitorName: {}
GetMouseButtonClicked:
  inputs: {}
  outputs:
  - name: buttonName
    type: string
GetMouseButtonName:
  inputs:
  - name: button
    type: string
  outputs:
  - name: buttonName
    type: string
GetMouseFocus: {}
GetMovieDownloadProgress:
  inputs:
  - name: movieId
    type: number
  outputs:
  - name: inProgress
    type: boolean
  - name: downloaded
    type: number
  - name: total
    type: number
GetMultiCastBarIndex:
  outputs:
  - type: number
GetMultiCastTotemSpells: {}
getn:
  alias: table.getn
GetNegativeCorruptionEffectInfo:
  inputs: {}
  outputs:
  - name: corruptionEffects
    type:
      arrayof:
        structure: CorruptionEffectInfo
GetNetIpTypes: {}
GetNetStats:
  inputs: {}
  outputs:
  - name: bandwidthIn
    type: number
  - name: bandwidthOut
    type: number
  - name: latencyHome
    type: number
  - name: latencyWorld
    type: number
GetNewSocketInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: gemMatchesSocket
    type: boolean
GetNewSocketLink: {}
GetNextAchievement: {}
GetNextCompleatedTutorial: {}
GetNextPendingInviteConfirmation:
  inputs: {}
  outputs:
  - name: firstInvite
    nilable: true
    type: number
GetNormalizedRealmName:
  inputs: {}
  outputs:
  - name: normalizedRealmName
    type: string
GetNumActiveQuests:
  inputs: {}
  outputs:
  - name: numActiveQuests
    type: number
GetNumArchaeologyRaces:
  outputs:
  - type: number
GetNumArenaOpponents:
  outputs:
  - type: number
GetNumArenaOpponentSpecs:
  outputs:
  - type: number
GetNumArtifactsByRace:
  outputs:
  - type: number
GetNumAutoQuestPopUps: {}
GetNumAvailableQuests:
  inputs: {}
  outputs:
  - name: numAvailableQuests
    type: number
GetNumBankSlots:
  inputs: {}
  outputs:
  - type: number
  - type: oneornil
GetNumBattlefieldFlagPositions:
  outputs:
  - type: number
GetNumBattlefieldScores:
  inputs: {}
  outputs:
  - name: value
    type: number
GetNumBattlefieldVehicles: {}
GetNumBattlegroundTypes:
  outputs:
  - type: number
GetNumBindings:
  outputs:
  - type: number
GetNumBuybackItems:
  inputs: {}
  outputs:
  - name: numBuybackItems
    type: number
GetNumChannelMembers: {}
GetNumClasses:
  impl: GetNumClasses
  inputs: {}
  outputs:
  - name: numClasses
    type: number
GetNumCompanions:
  inputs:
  - name: type
    type: string
  outputs:
  - name: count
    type: number
GetNumComparisonCompletedAchievements: {}
GetNumCompletedAchievements:
  inputs:
  - name: forGuild
    nilable: true
    type: boolean
  outputs:
  - name: numAchievements
    type: number
  - name: numCompleted
    type: number
GetNumDeclensionSets:
  inputs:
  - name: name
    type: string
  - name: gender
    nilable: true
    type: number
  outputs:
  - name: numDeclensionSets
    type: number
GetNumDisplayChannels:
  inputs: {}
  outputs:
  - type: number
GetNumDungeonForRandomSlot: {}
GetNumExpansions:
  inputs: {}
  outputs:
  - name: numExpansions
    type: number
GetNumFactions:
  outputs:
  - name: numFactions
    type: number
GetNumFilteredAchievements: {}
GetNumFlexRaidDungeons: {}
GetNumFlyouts: {}
GetNumGroupChannels: {}
GetNumGroupMembers:
  outputs:
  - type: number
GetNumGuildBankMoneyTransactions:
  inputs: {}
  outputs:
  - name: value
    type: number
GetNumGuildBankTabs:
  outputs:
  - type: number
GetNumGuildBankTransactions: {}
GetNumGuildChallenges:
  inputs: {}
  outputs:
  - name: numChallenges
    type: number
GetNumGuildEvents:
  inputs: {}
  outputs:
  - name: numEvents
    type: number
GetNumGuildMembers:
  inputs: {}
  outputs:
  - name: totalMembers
    type: number
  - name: onlineMembers
    type: number
  - name: onlineAndMobileMembers
    type: number
GetNumGuildNews:
  inputs: {}
  outputs:
  - name: numNews
    type: number
GetNumGuildPerks:
  inputs: {}
  outputs:
  - name: numGuildPerks
    type: number
GetNumGuildRewards:
  inputs: {}
  outputs:
  - name: numRewards
    type: number
GetNumGuildTradeSkill: {}
GetNumLanguages:
  outputs:
  - type: number
GetNumLootItems:
  outputs:
  - type: number
GetNumMacros:
  inputs: {}
  outputs:
  - name: global
    type: number
  - name: perChar
    type: number
GetNumMembersInRank: {}
GetNumModifiedClickActions: {}
GetNumPetitionNames:
  inputs: {}
  outputs:
  - name: value
    type: number
GetNumQuestChoices:
  inputs: {}
  outputs:
  - name: numChoices
    type: number
GetNumQuestCurrencies:
  inputs: {}
  outputs:
  - name: numQuestCurrencies
    type: number
GetNumQuestItemDrops: {}
GetNumQuestItems:
  inputs: {}
  outputs:
  - name: numRequiredItems
    type: number
GetNumQuestLeaderBoards:
  inputs:
  - name: questLogIndex
    nilable: true
    type: number
  outputs:
  - name: numObjectives
    type: number
GetNumQuestLogChoices:
  outputs:
  - type: number
GetNumQuestLogRewardCurrencies: {}
GetNumQuestLogRewardFactions: {}
GetNumQuestLogRewards:
  outputs:
  - type: number
GetNumQuestLogTasks: {}
GetNumQuestRewards:
  inputs: {}
  outputs:
  - name: numRewards
    type: number
GetNumRaidProfiles: {}
GetNumRandomDungeons:
  inputs: {}
  outputs:
  - name: value
    type: number
GetNumRandomScenarios: {}
GetNumRewardCurrencies:
  inputs: {}
  outputs:
  - name: numQuestCurrencies
    type: number
GetNumRFDungeons:
  inputs: {}
  outputs:
  - name: value
    type: number
GetNumRoutes: {}
GetNumSavedInstances:
  outputs:
  - type: number
GetNumSavedWorldBosses:
  inputs: {}
  outputs:
  - name: numSavedWorldBosses
    type: number
GetNumScenarios: {}
GetNumShapeshiftForms:
  outputs:
  - type: number
GetNumSockets:
  inputs: {}
  outputs:
  - name: value
    type: number
GetNumSpecGroups:
  outputs:
  - type: number
GetNumSpecializations:
  outputs:
  - type: number
GetNumSpecializationsForClassID:
  impl: GetNumSpecializationsForClassID
  inputs:
  - name: specID
    type: number
  outputs:
  - name: specCount
    type: number
GetNumSpellTabs:
  outputs:
  - type: number
GetNumSubgroupMembers:
  outputs:
  - type: number
GetNumTitles:
  outputs:
  - type: number
GetNumTrainerServices:
  inputs: {}
  outputs:
  - name: numServices
    type: number
GetNumTreasurePickerItems: {}
GetNumUnspentPvpTalents: {}
GetNumUnspentTalents: {}
GetNumVoidTransferDeposit:
  inputs: {}
  outputs:
  - name: numDeposits
    type: number
GetNumVoidTransferWithdrawal:
  inputs: {}
  outputs:
  - name: numWithdrawals
    type: number
GetNumWarGameTypes: {}
GetNumWorldPVPAreas: {}
GetObjectiveText: {}
GetOptOutOfLoot: {}
GetOSLocale:
  inputs: {}
  outputs:
  - name: localeName
    type: string
GetOverrideAPBySpellPower: {}
GetOverrideBarIndex:
  inputs: {}
  outputs:
  - type: number
GetOverrideBarSkin: {}
GetOverrideSpellPowerByAP: {}
GetParryChance: {}
GetParryChanceFromAttribute: {}
GetPartyAssignment: {}
GetPartyLFGBackfillInfo: {}
GetPartyLFGID:
  outputs:
  - type: number
GetPendingGlyphName: {}
GetPendingInviteConfirmations: {}
GetPersonalRatedInfo:
  inputs:
  - name: bracketIndex
    type: number
  outputs:
  - name: rating
    type: number
  - name: seasonBest
    type: number
  - name: weeklyBest
    type: number
  - name: seasonPlayed
    type: number
  - name: seasonWon
    type: number
  - name: weeklyPlayed
    type: number
  - name: weeklyWon
    type: number
  - name: lastWeeksBest
    type: number
  - name: hasWon
    type: number
  - name: pvpTier
    type: number
  - name: ranking
    type: number
  - name: teamSize
    type: number
GetPetActionCooldown: {}
GetPetActionInfo: {}
GetPetActionSlotUsable: {}
GetPetActionsUsable: {}
GetPetExperience:
  outputs:
  - name: currXP
    type: number
  - name: nextXP
    type: number
GetPetFoodTypes: {}
GetPetIcon: {}
GetPetitionInfo:
  inputs: {}
  outputs:
  - name: petitionType
    type: string
  - name: title
    type: string
  - name: bodyText
    type: string
  - name: maxSignatures
    type: number
  - name: originatorName
    type: string
  - name: isOriginator
    type: boolean
  - name: minSignatures
    type: number
GetPetitionNameInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
GetPetMeleeHaste: {}
GetPetSpellBonusDamage:
  inputs: {}
  outputs:
  - name: spellDamageBonus
    type: number
GetPetTalentTree: {}
GetPetTimeRemaining: {}
GetPhysicalScreenSize:
  inputs: {}
  outputs:
  - name: sizeX
    stub: 1024
    type: number
  - name: sizeY
    stub: 768
    type: number
GetPlayerFacing: {}
GetPlayerInfoByGUID:
  inputs:
  - type: string
  outputs:
  - type: string
  - type: string
  - type: string
  - type: string
  - type: number
  - type: string
  - type: string
GetPlayerTradeCurrency: {}
GetPlayerTradeMoney:
  outputs:
  - type: number
GetPossessInfo: {}
GetPowerRegen: {}
GetPowerRegenForPowerType: {}
GetPrevCompleatedTutorial: {}
GetPreviousAchievement: {}
GetPreviousArenaSeason: {}
GetPrimarySpecialization: {}
GetProfessionInfo: {}
GetProfessions:
  inputs: {}
  outputs:
  - name: prof1
    nilable: true
    type: number
  - name: prof2
    nilable: true
    type: number
  - name: archaeology
    nilable: true
    type: number
  - name: fishing
    nilable: true
    type: number
  - name: cooking
    nilable: true
    type: number
GetProgressText:
  inputs: {}
  outputs:
  - name: progressText
    type: string
GetPromotionRank: {}
GetPVPDesired: {}
GetPVPGearStatRules: {}
GetPVPLifetimeStats:
  inputs: {}
  outputs:
  - name: honorableKills
    type: number
  - name: dishonorableKills
    type: number
  - name: highestRank
    type: number
GetPvpPowerDamage: {}
GetPvpPowerHealing: {}
GetPVPRoles:
  inputs: {}
  outputs:
  - type: boolean
  - type: boolean
  - type: boolean
GetPVPSessionStats: {}
GetPvpTalentInfoByID: {}
GetPvpTalentInfoBySpecialization: {}
GetPvpTalentLink: {}
GetPVPTimer: {}
GetPVPYesterdayStats: {}
GetQuestBackgroundMaterial: {}
GetQuestCurrencyID:
  inputs:
  - name: type
    type: string
  - name: index
    type: number
  outputs:
  - name: currencyID
    type: number
GetQuestCurrencyInfo:
  inputs:
  - name: itemType
    type: string
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: string
  - name: numItems
    type: number
  - name: quality
    type: number
GetQuestExpansion: {}
GetQuestFactionGroup: {}
GetQuestID:
  inputs: {}
  outputs:
  - name: questID
    type: number
GetQuestItemInfo:
  inputs:
  - name: type
    type: string
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: string
  - name: count
    type: number
  - name: quality
    type: number
  - name: isUsable
    type: oneornil
  - name: itemID
    stub: 17
    type: number
GetQuestItemInfoLootType:
  inputs:
  - name: questItemType
    type: string
  - name: index
    type: number
  outputs:
  - name: lootType
    type: number
GetQuestItemLink:
  inputs:
  - name: type
    type: string
  - name: index
    type: number
  outputs:
  - name: itemLink
    type: string
GetQuestLink: {}
GetQuestLogChoiceInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: quantity
    type: number
  - name: quality
    type: number
  - name: isUsable
    type: boolean
  - name: itemID
    type: number
GetQuestLogChoiceInfoLootType: {}
GetQuestLogCompletionText: {}
GetQuestLogCriteriaSpell: {}
GetQuestLogItemDrop: {}
GetQuestLogItemLink: {}
GetQuestLogLeaderBoard:
  inputs:
  - name: objectiveIndex
    type: number
  - name: questLogIndex
    nilable: true
    type: number
  outputs:
  - name: text
    type: string
  - name: type
    type: string
  - name: finished
    type: boolean
GetQuestLogPortraitTurnIn: {}
GetQuestLogQuestText: {}
GetQuestLogQuestType: {}
GetQuestLogRewardArtifactXP: {}
GetQuestLogRewardCurrencyInfo:
  inputs:
  - name: i
    type: number
  - name: questID
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: string
  - name: numItems
    type: number
  - name: currencyID
    type: number
  - name: quality
    type: number
GetQuestLogRewardFactionInfo: {}
GetQuestLogRewardHonor:
  outputs:
  - name: value
    stub: 0
    type: number
GetQuestLogRewardInfo:
  inputs:
  - name: itemIndex
    type: number
  - name: questID
    nilable: true
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: quantity
    type: number
  - name: quality
    type: number
  - name: isUsable
    type: boolean
  - name: itemID
    type: number
GetQuestLogRewardMoney:
  outputs:
  - type: number
GetQuestLogRewardSkillPoints: {}
GetQuestLogRewardTitle: {}
GetQuestLogRewardXP: {}
GetQuestLogSpecialItemCooldown: {}
GetQuestLogSpecialItemInfo: {}
GetQuestLogTimeLeft:
  outputs:
  - type: number
GetQuestMoneyToGet:
  inputs: {}
  outputs:
  - name: money
    type: number
GetQuestObjectiveInfo: {}
GetQuestPOIBlobCount: {}
GetQuestPOILeaderBoard: {}
GetQuestPOIs:
  inputs:
  - name: poiTable
    nilable: true
    type: table
  outputs: {}
GetQuestPortraitGiver: {}
GetQuestPortraitTurnIn:
  inputs: {}
  outputs:
  - name: questPortrait
    stub: 0
    type: number
  - name: questPortraitText
    type: string
  - name: questPortraitName
    type: string
GetQuestProgressBarPercent: {}
GetQuestResetTime: {}
GetQuestReward: {}
GetQuestSortIndex: {}
GetQuestText: {}
GetQuestUiMapID: {}
GetRaidDifficultyID:
  inputs: {}
  outputs:
  - type: number
GetRaidProfileFlattenedOptions: {}
GetRaidProfileName: {}
GetRaidProfileOption: {}
GetRaidProfileSavedPosition: {}
GetRaidRosterInfo:
  inputs:
  - name: raidIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: rank
    type: number
  - name: subgroup
    type: number
  - name: level
    type: number
  - name: class
    type: string
  - name: fileName
    type: string
  - name: zone
    type: string
  - name: online
    type: oneornil
  - name: isDead
    type: oneornil
  - name: role
    type: string
  - name: isML
    type: oneornil
  - name: combatRole
    type: string
GetRaidTargetIndex: {}
GetRandomDungeonBestChoice:
  inputs: {}
  outputs:
  - name: bestChoice
    type: number
GetRandomScenarioBestChoice: {}
GetRandomScenarioInfo: {}
GetRangedCritChance:
  inputs: {}
  outputs:
  - name: value
    type: number
GetRangedHaste: {}
GetRatedBattleGroundInfo: {}
GetReadyCheckStatus:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: readyCheckStatus
    nilable: true
    type: string
GetReadyCheckTimeLeft: {}
GetReagentBankCost: {}
GetRealmID:
  outputs:
  - type: number
GetRealmName:
  inputs: {}
  outputs:
  - name: realmName
    stub: Realm
    type: string
GetRealZoneText:
  inputs:
  - name: instanceID
    nilable: true
    type: number
  outputs:
  - name: zone
    stub: RealZoneText
    type: string
GetReleaseTimeRemaining:
  inputs: {}
  outputs:
  - name: timeRemaining
    type: number
GetRepairAllCost:
  outputs:
  - type: number
GetResSicknessDuration:
  inputs: {}
  outputs:
  - name: value
    type: number
GetRestrictedAccountData:
  inputs: {}
  outputs:
  - name: rLevel
    type: number
  - name: rMoney
    type: number
  - name: profCap
    type: number
GetRestState:
  inputs: {}
  outputs:
  - name: exhaustionStateID
    type: number
  - name: exhaustionStateName
    type: string
  - name: exhaustionStateMultiplier
    type: number
GetRewardArtifactXP:
  inputs: {}
  outputs:
  - name: artifactXP
    type: number
  - name: artifactCategory
    type: number
GetRewardHonor:
  inputs: {}
  outputs:
  - name: value
    type: number
GetRewardMoney:
  inputs: {}
  outputs:
  - name: money
    type: number
GetRewardNumSkillUps: {}
GetRewardPackArtifactPower: {}
GetRewardPackCurrencies: {}
GetRewardPackItems: {}
GetRewardPackMoney: {}
GetRewardPackTitle: {}
GetRewardPackTitleName: {}
GetRewardSkillLineID: {}
GetRewardSkillPoints:
  inputs: {}
  outputs:
  - name: skillName
    type: string
  - name: skillIcon
    type: number
  - name: skillPoints
    type: number
GetRewardText:
  inputs: {}
  outputs:
  - name: rewardText
    type: string
GetRewardTitle:
  inputs: {}
  outputs:
  - name: playerTitle
    type: string
GetRewardXP:
  inputs: {}
  outputs:
  - name: xp
    type: number
GetRFDungeonInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: id
    type: number
  - name: name
    type: string
  - name: typeID
    type: number
  - name: subtype
    type: number
  - name: minLevel
    type: number
  - name: maxLevel
    type: number
GetRuneCooldown: {}
GetRuneCount: {}
GetRunningMacro: {}
GetRunningMacroButton: {}
GetSavedInstanceChatLink:
  outputs:
  - name: link
    type: string
GetSavedInstanceEncounterInfo: {}
GetSavedInstanceInfo:
  inputs:
  - type: number
  outputs:
  - type: string
  - type: number
  - type: number
  - type: number
  - type: boolean
  - type: boolean
  - type: number
  - type: boolean
  - type: number
  - type: string
  - type: number
  - type: number
  - type: boolean
GetSavedWorldBossInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: worldBossID
    type: number
  - name: reset
    type: number
GetScenariosChoiceOrder: {}
GetSchoolString:
  inputs:
  - type: number
  outputs:
  - type: string
GetScreenDPIScale:
  inputs: {}
  outputs:
  - name: scale
    type: number
GetScreenHeight:
  impl: GetScreenHeight
  inputs: {}
  outputs:
  - name: height
    type: number
GetScreenWidth:
  impl: GetScreenWidth
  inputs: {}
  outputs:
  - name: width
    type: number
GetSecondsUntilParentalControlsKick:
  inputs: {}
  outputs:
  - name: remaining
    nilable: true
    type: number
GetSelectedArtifactInfo: {}
GetSelectedDisplayChannel: {}
GetSelectedFaction:
  inputs: {}
  outputs:
  - name: value
    type: number
GetSelectedWarGameType: {}
GetSendMailCOD: {}
GetSendMailItem: {}
GetSendMailItemLink: {}
GetSendMailMoney: {}
GetSendMailPrice:
  outputs:
  - type: number
GetServerExpansionLevel:
  inputs: {}
  outputs:
  - name: serverExpansionLevel
    type: number
GetServerTime:
  inputs: {}
  outputs:
  - name: time
    type: number
GetSessionTime:
  inputs: {}
  outputs:
  - name: time
    type: number
GetSetBonusesForSpecializationByItemID: {}
GetShapeshiftForm:
  inputs:
  - nilable: true
    type: boolean
  outputs:
  - type: number
GetShapeshiftFormCooldown: {}
GetShapeshiftFormID:
  inputs: {}
  outputs:
  - name: index
    type: number
GetShapeshiftFormInfo: {}
GetSheathState: {}
GetShieldBlock: {}
GetSocketItemBoundTradeable:
  inputs: {}
  outputs:
  - name: value
    type: boolean
GetSocketItemInfo:
  inputs: {}
  outputs:
  - name: name
    type: string
  - name: icon
    type: number
  - name: quality
    type: number
GetSocketItemRefundable:
  inputs: {}
  outputs:
  - name: value
    type: boolean
GetSocketTypes:
  inputs:
  - name: index
    type: number
  outputs:
  - name: gemColor
    stub: Blue
    type: string
GetSoundEntryCount: {}
GetSpecChangeCost: {}
GetSpecialization:
  outputs:
  - type: number
GetSpecializationInfo:
  impl: GetSpecializationInfo
  inputs:
  - name: specIndex
    type: number
  - name: isInspect
    nilable: true
    type: boolean
  - name: isPet
    nilable: true
    type: boolean
  - name: inspectTarget
    nilable: true
    type: string
  - name: sex
    nilable: true
    type: number
  outputs:
  - name: id
    type: number
  - name: name
    type: string
  - name: description
    type: string
  - name: icon
    type: number
  - name: role
    type: string
  - name: primaryStat
    type: number
GetSpecializationInfoByID:
  impl: GetSpecializationInfoByID
  inputs:
  - name: specID
    type: number
  - name: gender
    type: gender
  mayreturnnothing: true
  outputs:
  - name: id
    type: number
  - name: name
    type: string
  - name: description
    type: string
  - name: texture
    type: number
  - name: role
    type: string
  - name: classFile
    type: string
  - name: className
    type: string
GetSpecializationInfoForClassID:
  impl: GetSpecializationInfoForClassID
  inputs:
  - name: classID
    type: number
  - name: index
    type: number
  - name: gender
    nilable: true
    type: number
  mayreturnnothing: true
  outputs:
  - name: id
    type: number
  - name: name
    type: string
  - name: description
    type: string
  - name: icon
    type: number
  - name: role
    type: string
  - name: recommended
    type: boolean
  - name: allowedForBoost
    type: boolean
  - name: masterySpell1
    nilable: true
    type: number
  - name: masterySpell2
    nilable: true
    type: number
GetSpecializationInfoForSpecID:
  impl: GetSpecializationInfoForSpecID
  inputs:
  - name: specID
    type: number
  - name: gender
    nilable: true
    type: number
  outputs:
  - name: id
    type: number
  - name: name
    type: string
  - name: description
    type: string
  - name: icon
    type: number
  - name: role
    type: string
  - name: recommended
    type: boolean
  - name: allowedForBoost
    type: boolean
  - name: masterySpell1
    nilable: true
    type: number
  - name: masterySpell2
    nilable: true
    type: number
GetSpecializationMasterySpells: {}
GetSpecializationNameForSpecID:
  inputs:
  - name: specID
    type: number
  - name: gender
    nilable: true
    type: number
  outputs:
  - name: name
    nilable: true
    type: string
GetSpecializationRole:
  inputs:
  - name: spec
    type: number
  outputs:
  - name: role
    stub: DAMAGER
    type: string
GetSpecializationRoleByID: {}
GetSpecializationSpells: {}
GetSpecsForSpell: {}
GetSpeed:
  inputs: {}
  outputs:
  - name: value
    type: number
GetSpellAutocast:
  inputs:
  - name: slot
    type: number
  - name: bookType
    type: string
  outputs:
  - name: autoCastAllowed
    type: boolean
  - name: autoCastEnabled
    type: boolean
GetSpellAvailableLevel: {}
GetSpellBaseCooldown: {}
GetSpellBonusDamage: {}
GetSpellBonusHealing:
  inputs: {}
  outputs:
  - name: bonusHealing
    type: number
GetSpellBookItemInfo: {}
GetSpellBookItemName:
  inputs:
  - name: slot
    type: number
  - name: bookType
    type: string
  outputs:
  - name: spellName
    type: string
  - name: subSpellName
    type: string
  - name: spellID
    type: number
GetSpellBookItemTexture:
  outputs:
  - name: fileID
    type: number
GetSpellCharges: {}
GetSpellConfirmationPromptsInfo:
  outputs:
  - type: table
GetSpellCooldown:
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
  - name: enable
    type: boolean
  - name: modRate
    type: number
GetSpellCount: {}
GetSpellCritChance:
  inputs:
  - name: school
    nilable: true
    type: number
  outputs:
  - name: value
    type: number
GetSpellDescription:
  inputs:
  - nilable: true
    type: number
  outputs:
  - type: string
GetSpellHitModifier: {}
GetSpellInfo:
  outputs:
  - name: name
    type: string
  - name: rank
    type: nil
  - name: icon
    type: number
  - name: castTime
    type: number
  - name: minRange
    type: number
  - name: maxRange
    type: number
  - name: spellID
    type: number
GetSpellLevelLearned: {}
GetSpellLink: {}
GetSpellLossOfControlCooldown: {}
GetSpellPenetration: {}
GetSpellPowerCost: {}
GetSpellQueueWindow: {}
GetSpellRank: {}
GetSpellsForCharacterUpgradeTier: {}
GetSpellSubtext:
  inputs:
  - nilable: true
    type: number
  outputs:
  - type: nil
GetSpellTabInfo:
  inputs:
  - name: tabIndex
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: offset
    type: number
  - name: numSlots
    type: number
  - name: isGuild
    type: boolean
  - name: offSpecID
    type: string
  - name: shouldHide
    type: boolean
  - name: specID
    type: number
GetSpellTexture:
  outputs:
  - name: icon
    type: number
GetSpellTradeSkillLink: {}
GetStablePetFoodTypes:
  inputs:
  - name: index
    type: number
GetStablePetInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: petIcon
    type: string
  - name: petName
    type: string
  - name: petLevel
    type: number
  - name: petType
    type: string
  - name: petTalents
    type: string
GetStatistic: {}
GetStatisticsCategoryList: {}
GetSturdiness: {}
GetSubZoneText:
  inputs: {}
  outputs:
  - type: string
GetSuggestedGroupSize: {}
GetSummonFriendCooldown:
  inputs: {}
  outputs:
  - name: start
    type: number
  - name: duration
    type: number
GetTabardCreationCost:
  outputs:
  - type: number
GetTabardInfo: {}
GetTalentInfo: {}
GetTalentInfoByID: {}
GetTalentInfoBySpecialization:
  inputs:
  - name: specIndex
    type: number
  - name: tier
    type: number
  - name: column
    type: number
  outputs:
  - name: talentID
    type: number
  - name: name
    type: string
  - name: texture
    type: number
  - name: selected
    type: boolean
  - name: available
    type: boolean
  - name: spellID
    type: number
  - name: unknown
    nilable: true
    type: unknown
  - name: row
    type: number
  - name: column
    type: number
  - name: known
    type: boolean
  - name: grantedByAura
    type: boolean
GetTalentLink: {}
GetTalentTierInfo: {}
GetTargetTradeCurrency: {}
GetTargetTradeMoney:
  inputs: {}
  outputs:
  - name: money
    type: number
GetTaskInfo: {}
GetTaskPOIs: {}
GetTasksTable: {}
GetTaxiBenchmarkMode: {}
GetTaxiMapID: {}
GetTempShapeshiftBarIndex: {}
GetText:
  inputs:
  - name: token
    type: string
  - name: gender
    nilable: true
    type: number
  - name: ordinal
    nilable: true
    type: number
  outputs:
  - name: text
    type: string
GetThreatStatusColor:
  inputs:
  - name: status
    type: number
  outputs:
  - name: r
    type: number
  - name: g
    type: number
  - name: b
    type: number
GetTickTime:
  inputs: {}
  outputs:
  - name: time
    type: number
GetTime:
  impl: GetTime
  inputs: {}
  outputs:
  - name: time
    type: number
GetTimePreciseSec:
  inputs: {}
  outputs:
  - name: time
    type: number
GetTimeToWellRested: {}
GetTitleName: {}
GetTitleText:
  inputs: {}
  outputs:
  - name: titleText
    type: string
GetTotalAchievementPoints:
  inputs: {}
  outputs:
  - name: points
    type: number
GetTotemCannotDismiss: {}
GetTotemInfo: {}
GetTotemTimeLeft: {}
GetTradePlayerItemInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: numItems
    type: number
  - name: quality
    type: number
  - name: enchantment
    nilable: true
    type: string
  - name: canLoseTransmog
    type: boolean
GetTradePlayerItemLink:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemLink
    type: string
GetTradeTargetItemInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: texture
    type: number
  - name: numItems
    type: number
  - name: quality
    type: number
  - name: isUsable
    type: boolean
  - name: enchantment
    nilable: true
    type: string
GetTradeTargetItemLink:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemLink
    type: string
GetTrainerGreetingText:
  inputs: {}
  outputs:
  - name: value
    type: string
GetTrainerSelectionIndex:
  inputs: {}
  outputs:
  - name: value
    type: number
GetTrainerServiceAbilityReq:
  inputs:
  - name: skillIndex
    type: number
  - name: index
    type: number
  outputs:
  - name: ability
    type: number
  - name: hasReq
    type: boolean
GetTrainerServiceCost:
  inputs:
  - name: index
    type: number
  outputs:
  - name: money
    type: number
  - name: isProfession
    type: boolean
GetTrainerServiceDescription: {}
GetTrainerServiceIcon: {}
GetTrainerServiceInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: name
    type: string
  - name: rank
    type: string
  - name: category
    type: string
  - name: expanded
    type: oneornil
GetTrainerServiceItemLink: {}
GetTrainerServiceLevelReq: {}
GetTrainerServiceNumAbilityReq:
  inputs:
  - name: skillIndex
    type: number
  outputs:
  - name: numRequirements
    type: number
GetTrainerServiceSkillLine: {}
GetTrainerServiceSkillReq: {}
GetTrainerServiceStepIndex:
  inputs: {}
  outputs:
  - name: value
    nilable: true
    type: number
GetTrainerServiceTypeFilter: {}
GetTrainerTradeskillRankValues:
  inputs: {}
  outputs:
  - name: rank
    type: number
  - name: maxRank
    type: number
  - name: rankModifier
    type: number
GetTreasurePickerItemInfo: {}
GetTutorialsEnabled:
  inputs: {}
  outputs:
  - type: boolean
GetUICameraInfo: {}
GetUnitChargedPowerPoints:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: pointIndices
    type:
      arrayof: number
GetUnitEmpowerHoldAtMaxTime:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: holdAtMaxTime
    type: number
GetUnitEmpowerMinHoldTime:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: minHoldTime
    type: number
GetUnitEmpowerStageDuration:
  inputs:
  - name: unit
    type: unit
  - name: index
    type: number
  outputs:
  - name: duration
    type: number
GetUnitHealthModifier: {}
GetUnitMaxHealthModifier:
  inputs:
  - type: string
  outputs:
  - type: number
GetUnitPowerBarInfo:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: info
    type:
      structure: UnitPowerBarInfo
GetUnitPowerBarInfoByID:
  inputs:
  - name: barID
    type: number
  outputs:
  - name: info
    type:
      structure: UnitPowerBarInfo
GetUnitPowerBarStrings:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: name
    nilable: true
    type: string
  - name: tooltip
    nilable: true
    type: string
  - name: cost
    nilable: true
    type: string
GetUnitPowerBarStringsByID:
  inputs:
  - name: barID
    type: number
  outputs:
  - name: name
    nilable: true
    type: string
  - name: tooltip
    nilable: true
    type: string
  - name: cost
    nilable: true
    type: string
GetUnitPowerBarTextureInfo:
  inputs:
  - name: unitToken
    type: unit
  - name: textureIndex
    type: number
  - name: timerIndex
    nilable: true
    type: number
  outputs:
  - name: texture
    type: number
  - name: colorR
    type: number
  - name: colorG
    type: number
  - name: colorB
    type: number
  - name: colorA
    type: number
GetUnitPowerBarTextureInfoByID:
  inputs:
  - name: barID
    type: number
  - name: textureIndex
    type: number
  outputs:
  - name: texture
    type: number
  - name: colorR
    type: number
  - name: colorG
    type: number
  - name: colorB
    type: number
  - name: colorA
    type: number
GetUnitPowerModifier: {}
GetUnitSpeed:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: currentSpeed
    type: number
  - name: runSpeed
    type: number
  - name: flightSpeed
    type: number
  - name: swimSpeed
    type: number
GetVehicleBarIndex:
  inputs: {}
  outputs:
  - type: number
GetVehicleUIIndicator: {}
GetVehicleUIIndicatorSeat: {}
GetVersatilityBonus:
  inputs:
  - type: number
  outputs:
  - type: number
GetVideoCaps: {}
GetVoidItemHyperlinkString: {}
GetVoidItemInfo:
  inputs:
  - name: page
    type: number
  - name: slot
    type: number
  outputs:
  - name: itemID
    type: number
  - name: textureName
    type: number
  - name: locked
    type: boolean
  - name: recentDeposit
    type: boolean
  - name: isFiltered
    type: boolean
  - name: quality
    type: number
GetVoidStorageSlotPageIndex: {}
GetVoidTransferCost:
  inputs: {}
  outputs:
  - name: cost
    type: number
GetVoidTransferDepositInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemID
    type: number
  - name: textureName
    type: number
  - name: quality
    type: number
GetVoidTransferWithdrawalInfo:
  inputs:
  - name: index
    type: number
  outputs:
  - name: itemID
    type: number
  - name: textureName
    type: number
  - name: quality
    type: number
GetVoidUnlockCost:
  inputs: {}
  outputs:
  - name: voidStorageUnlockCost
    type: number
GetWarGameQueueStatus: {}
GetWarGameTypeInfo: {}
GetWatchedFactionInfo:
  inputs: {}
  outputs:
  - type: string
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
GetWeaponEnchantInfo: {}
GetWebTicket: {}
GetWorldElapsedTime: {}
GetWorldElapsedTimers: {}
GetWorldMapActionButtonSpellInfo: {}
GetWorldPVPAreaInfo: {}
GetWorldPVPQueueStatus: {}
GetXPExhaustion: {}
GetZonePVPInfo: {}
GetZoneText: {}
GiveMasterLoot: {}
gmatch:
  alias: string.gmatch
GMEuropaBugsEnabled: {}
GMEuropaComplaintsEnabled: {}
GMEuropaSuggestionsEnabled: {}
GMEuropaTicketsEnabled: {}
GMItemRestorationButtonEnabled: {}
GMQuickTicketSystemEnabled: {}
GMQuickTicketSystemThrottled: {}
GMReportLag: {}
GMRequestPlayerInfo: {}
GMResponseResolve: {}
GMSurveyAnswer: {}
GMSurveyAnswerSubmit: {}
GMSurveyCommentSubmit: {}
GMSurveyNumAnswers: {}
GMSurveyQuestion: {}
GMSurveySubmit: {}
GroupHasOfflineMember: {}
gsub:
  alias: string.gsub
GuildControlAddRank: {}
GuildControlDelRank: {}
GuildControlGetAllowedShifts: {}
GuildControlGetNumRanks:
  outputs:
  - type: number
GuildControlGetRankName:
  inputs:
  - name: rank
    type: number
  outputs:
  - name: value
    type: string
GuildControlSaveRank: {}
GuildControlSetRank: {}
GuildControlSetRankFlag: {}
GuildControlShiftRankDown: {}
GuildControlShiftRankUp: {}
GuildDemote: {}
GuildDisband: {}
GuildInfo: {}
GuildInvite: {}
GuildLeave: {}
GuildMasterAbsent: {}
GuildNewsSetSticky: {}
GuildNewsSort:
  inputs:
  - name: unknown
    type: number
  outputs: {}
GuildPromote: {}
GuildRosterSetOfficerNote: {}
GuildRosterSetPublicNote: {}
GuildSetLeader: {}
GuildSetMOTD: {}
GuildUninvite: {}
HandleAtlasMemberCommand: {}
HasAction: {}
HasAPEffectsSpellPower: {}
HasArtifactEquipped:
  inputs: {}
  outputs:
  - type: oneornil
HasAttachedGlyph: {}
HasBonusActionBar: {}
HasBoundGemProposed:
  inputs: {}
  outputs:
  - name: value
    type: boolean
HasCompletedAnyAchievement: {}
HasDualWieldPenalty: {}
HasExtraActionBar:
  inputs: {}
  outputs:
  - type: oneornil
HasFullControl: {}
HasIgnoreDualWieldWeapon: {}
HasInboxItem: {}
HasLFGRestrictions: {}
HasLoadedCUFProfiles:
  inputs: {}
  outputs:
  - type: boolean
HasNewMail:
  inputs: {}
  outputs:
  - name: value
    type: boolean
HasNoReleaseAura: {}
HasOverrideActionBar: {}
HasPendingGlyphCast: {}
HasPetSpells: {}
HasPetUI: {}
HasSendMailItem:
  inputs:
  - name: index
    type: number
  outputs:
  - name: value
    type: boolean
HasSPEffectsAttackPower: {}
HasTempShapeshiftActionBar: {}
HasVehicleActionBar: {}
HasWandEquipped: {}
HaveQuestData:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: value
    type: boolean
HaveQuestRewardData:
  inputs:
  - name: questID
    type: number
  outputs:
  - name: value
    type: boolean
HearthAndResurrectFromArea: {}
HideRepairCursor: {}
hooksecurefunc:
  stdlib: hooksecurefunc
InboxItemCanDelete:
  inputs:
  - name: index
    type: number
  outputs:
  - name: value
    type: boolean
InCinematic: {}
InCombatLockdown: {}
InGuildParty:
  inputs: {}
  outputs:
  - name: inGroup
    type: boolean
  - name: numGuildPresent
    type: number
  - name: numGuildRequired
    type: number
  - name: xpMultiplier
    type: number
InitiateRolePoll: {}
InitiateTrade:
  inputs:
  - name: unit
    type: unit
  outputs: {}
InRepairMode: {}
ipairs:
  stdlib: ipairs
Is64BitClient:
  inputs: {}
  outputs:
  - name: is64Bit
    type: boolean
IsAccountSecured: {}
IsAchievementEligible: {}
IsActionInRange: {}
IsActiveBattlefieldArena: {}
IsActiveQuestLegendary:
  inputs:
  - name: index
    type: number
  outputs:
  - name: isActiveQuestLegendary
    type: boolean
IsActiveQuestTrivial:
  inputs:
  - name: index
    type: number
  outputs:
  - name: isActiveQuestTrivial
    type: boolean
IsAdvancedFlyableArea: {}
IsAllowedToUserTeleport: {}
IsAltKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsArenaSkirmish: {}
IsArenaTeamCaptain: {}
IsArtifactCompletionHistoryAvailable: {}
IsArtifactPowerItem: {}
IsArtifactRelicItem:
  inputs:
  - name: itemIDOrLink
    type: string
  outputs:
  - name: value
    type: boolean
IsAtStableMaster: {}
IsAttackAction:
  inputs:
  - name: action
    type: number
  outputs:
  - name: value
    type: boolean
IsAttackSpell: {}
IsAutoRepeatAction:
  inputs:
  - name: action
    type: number
  outputs:
  - name: value
    type: boolean
IsAutoRepeatSpell:
  outputs:
  - name: value
    type: boolean
IsAvailableQuestTrivial: {}
IsBindingForGamePad: {}
IsBNLogin: {}
IsBreadcrumbQuest: {}
IsCastingGlyph: {}
IsCemeterySelectionAvailable:
  inputs: {}
  outputs:
  - name: value
    type: boolean
IsCharacterNewlyBoosted: {}
IsChatAFK: {}
IsChatChannelRaid: {}
IsChatDND: {}
IsConsumableAction: {}
IsConsumableItem:
  inputs:
  - name: itemID
    nilable: true
    type: number
  outputs:
  - name: value
    type: boolean
IsConsumableSpell:
  inputs:
  - name: spellName
    nilable: true
    type: string
  outputs:
  - name: value
    type: boolean
IsControlKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsCorruptedItem:
  inputs:
  - name: itemLink
    type: string
  outputs: {}
IsCosmeticItem:
  inputs:
  - name: itemIDOrLink
    type: string
  outputs: {}
IsCurrentAction:
  inputs:
  - name: action
    type: number
  outputs:
  - name: value
    type: boolean
IsCurrentItem: {}
IsCurrentQuestFailed: {}
IsCurrentSpell:
  outputs:
  - name: value
    type: boolean
IsDebugBuild:
  inputs: {}
  outputs:
  - name: value
    type: boolean
IsDemonHunterAvailable:
  inputs: {}
  outputs:
  - name: available
    type: boolean
IsDesaturateSupported: {}
IsDisplayChannelModerator: {}
IsDisplayChannelOwner: {}
IsDualWielding: {}
IsEncounterInProgress:
  inputs: {}
  outputs:
  - name: value
    type: boolean
IsEncounterLimitingResurrections:
  inputs: {}
  outputs:
  - type: boolean
IsEncounterSuppressingRelease: {}
IsEquippableItem: {}
IsEquippedAction: {}
IsEquippedItem: {}
IsEquippedItemType: {}
IsEuropeanNumbers: {}
IsEveryoneAssistant:
  inputs: {}
  outputs:
  - name: value
    type: boolean
IsExpansionTrial:
  inputs: {}
  outputs:
  - name: isExpansionTrialAccount
    type: boolean
IsFactionInactive: {}
IsFalling:
  inputs: {}
  outputs:
  - name: falling
    type: boolean
IsFishingLoot: {}
IsFlyableArea: {}
IsFlying: {}
IsGamePadCursorControlEnabled: {}
IsGamePadFreelookEnabled: {}
IsGMClient:
  inputs: {}
  outputs:
  - name: isGM
    type: boolean
IsGraphicsCVarValueSupported: {}
IsGraphicsSettingValueSupported: {}
IsGUIDInGroup: {}
IsGuildLeader: {}
IsGuildMember: {}
IsGuildRankAssignmentAllowed: {}
IsHarmfulItem: {}
IsHarmfulSpell: {}
IsHelpfulItem: {}
IsHelpfulSpell: {}
IsInActiveWorldPVP:
  inputs:
  - nilable: true
    type: string
  outputs:
  - type: oneornil
IsInArenaTeam: {}
IsInAuthenticatedRank: {}
IsInCinematicScene: {}
IsIndoors: {}
IsInGroup: {}
IsInGuild: {}
IsInGuildGroup: {}
IsInInstance: {}
IsInJailersTower: {}
IsInLFGDungeon: {}
IsInRaid: {}
IsInsane: {}
IsInScenarioGroup: {}
IsInventoryItemLocked: {}
IsInventoryItemProfessionBag: {}
IsItemAction: {}
IsItemInRange: {}
IsJailersTowerLayerTimeLocked: {}
IsKeyDown:
  inputs:
  - name: keyOrMouseName
    type: string
  - default: false
    name: excludeBindingState
    type: boolean
  outputs:
  - name: down
    nilable: true
    type: boolean
IsLeftAltKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsLeftControlKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsLeftMetaKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsLeftShiftKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsLegacyDifficulty: {}
IsLFGComplete: {}
IsLFGDungeonJoinable:
  inputs:
  - name: id
    type: number
  outputs:
  - name: isAvailable
    type: boolean
  - name: isAvailableToPlayer
    type: boolean
  - name: hideIfNotJoinable
    type: boolean
  - name: totalGroupSizeRequired
    type: number
IsLinuxClient:
  impl: IsLinuxClient
  inputs: {}
  outputs:
  - name: isLinux
    type: boolean
IsLoggedIn:
  impl: IsLoggedIn
  inputs: {}
  outputs:
  - name: isLoggedIn
    type: boolean
IsMacClient:
  impl: IsMacClient
  inputs: {}
  outputs:
  - name: isMac
    type: boolean
IsMasterLooter: {}
IsMetaKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsModifiedClick:
  inputs:
  - name: action
    nilable: true
    type: string
  outputs:
  - name: value
    type: boolean
IsModifierKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsMounted:
  outputs:
  - type: boolean
IsMouseButtonDown:
  inputs:
  - name: button
    nilable: true
    type: string
  outputs:
  - name: down
    type: boolean
IsMouselooking: {}
IsMovieLocal:
  inputs:
  - name: movieId
    type: number
  outputs:
  - name: isLocal
    type: boolean
IsMoviePlayable:
  inputs:
  - name: movieId
    type: number
  outputs:
  - name: isPlayable
    type: boolean
IsOnGlueScreen:
  inputs: {}
  outputs:
  - name: isOnGlueScreen
    type: boolean
IsOnGroundFloorInJailersTower: {}
IsOnTournamentRealm: {}
IsOutdoors: {}
IsOutlineModeSupported: {}
IsOutOfBounds: {}
IsPartyLFG: {}
IsPartyWorldPVP: {}
IsPassiveSpell:
  outputs:
  - name: isPassive
    type: boolean
IsPendingGlyphRemoval: {}
IsPetActive: {}
IsPetAttackAction:
  inputs:
  - type: number
  outputs:
  - type: boolean
IsPetAttackActive: {}
IsPlayerInGuildFromGUID:
  inputs:
  - name: playerGUID
    type: string
  outputs:
  - name: IsInGuild
    type: boolean
IsPlayerInWorld: {}
IsPlayerMoving: {}
IsPlayerNeutral: {}
IsPlayerSpell: {}
IsPossessBarVisible: {}
IsPressHoldReleaseSpell: {}
IsPublicBuild:
  inputs: {}
  outputs:
  - name: isPublicBuild
    stub: true
    type: boolean
IsPvpTalentSpell: {}
IsPVPTimerRunning: {}
IsQuestCompletable:
  inputs: {}
  outputs:
  - name: isCompletable
    type: boolean
IsQuestIDValidSpellTarget: {}
IsQuestItemHidden:
  inputs:
  - name: index
    type: number
  outputs:
  - name: hidden
    stub: 0
    type: number
IsQuestLogSpecialItemInRange: {}
IsQuestSequenced: {}
IsRaidMarkerActive: {}
IsRangedWeapon: {}
IsReagentBankUnlocked:
  inputs: {}
  outputs:
  - name: value
    type: boolean
IsRecognizedName: {}
IsRecruitAFriendLinked: {}
IsResting: {}
IsRestrictedAccount: {}
IsRightAltKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsRightControlKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsRightMetaKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsRightShiftKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
issecure:
  stdlib: issecure
issecurevariable:
  stdlib: issecurevariable
IsSelectedSpellBookItem: {}
IsServerControlledBackfill: {}
IsShiftKeyDown:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsSpecializationActivateSpell: {}
IsSpellClassOrSpec: {}
IsSpellInRange: {}
IsSpellKnown: {}
IsSpellKnownOrOverridesKnown:
  inputs:
  - name: spellID
    type: number
  - name: isPet
    nilable: true
    type: boolean
  outputs:
  - name: value
    type: boolean
IsSpellOverlayed: {}
IsSpellValidForPendingGlyph: {}
IsSplashFramePrimaryFeatureUnlocked: {}
IsStackableAction: {}
IsStealthed:
  inputs: {}
  outputs:
  - name: value
    type: boolean
IsStoryQuest: {}
IsSubmerged: {}
IsSubZonePVPPOI: {}
IsSwimming: {}
IsTalentSpell: {}
IsTargetLoose: {}
IsTestBuild:
  impl: IsTestBuild
  inputs: {}
  outputs:
  - name: isTestBuild
    type: boolean
IsThreatWarningEnabled: {}
IsTitleKnown: {}
IsTradeskillTrainer:
  inputs: {}
  outputs:
  - name: value
    type: boolean
IsTrialAccount:
  inputs: {}
  outputs:
  - name: isTrialAccount
    type: boolean
IsTutorialFlagged: {}
IsUnitModelReadyForUI:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: isReady
    type: boolean
IsUsableAction: {}
IsUsableItem: {}
IsUsableSpell: {}
IsUsingFixedTimeStep:
  inputs: {}
  outputs:
  - name: isUsingFixedTimeStep
    type: boolean
IsUsingGamepad:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsUsingMouse:
  inputs: {}
  outputs:
  - name: down
    type: boolean
IsUsingVehicleControls: {}
IsVehicleAimAngleAdjustable: {}
IsVehicleAimPowerAdjustable: {}
IsVeteranTrialAccount:
  inputs: {}
  outputs:
  - name: isVeteranTrialAccount
    type: boolean
IsVoidStorageReady:
  inputs: {}
  outputs:
  - name: ready
    type: boolean
IsWargame: {}
IsWindowsClient:
  impl: IsWindowsClient
  inputs: {}
  outputs:
  - name: isWindows
    type: boolean
IsWorldLootObject: {}
IsXPUserDisabled: {}
ItemAddedToArtifact: {}
ItemCanTargetGarrisonFollowerAbility: {}
ItemHasRange: {}
ItemTextGetCreator:
  inputs: {}
  outputs:
  - name: creatorName
    type: string
ItemTextGetItem:
  inputs: {}
  outputs:
  - name: textName
    type: string
ItemTextGetMaterial:
  inputs: {}
  outputs:
  - name: materialName
    nilable: true
    type: string
ItemTextGetPage:
  inputs: {}
  outputs:
  - name: pageNum
    type: number
ItemTextGetText:
  inputs: {}
  outputs:
  - name: pageBody
    type: string
ItemTextHasNextPage:
  inputs: {}
  outputs:
  - name: value
    type: oneornil
ItemTextIsFullPage:
  inputs: {}
  outputs:
  - name: value
    type: boolean
ItemTextNextPage: {}
ItemTextPrevPage: {}
JoinArena: {}
JoinBattlefield: {}
JoinChannelByName: {}
JoinLFG: {}
JoinPermanentChannel: {}
JoinRatedBattlefield: {}
JoinRatedSoloShuffle: {}
JoinSingleLFG: {}
JoinSkirmish: {}
JoinTemporaryChannel: {}
JumpOrAscendStart:
  inputs: {}
  outputs: {}
Kiosk.GetCharacterTemplateSetIndex: {}
Kiosk.GetKioskLoginInfo: {}
Kiosk.IsCompetitiveModeEnabled: {}
Kiosk.IsEnabled:
  inputs: {}
  outputs:
  - type: boolean
Kiosk.ShutdownSession: {}
Kiosk.StartSession: {}
LaunchURL:
  inputs:
  - name: url
    type: string
  outputs: {}
ldexp:
  alias: math.ldexp
LearnPvpTalent: {}
LearnPvpTalents: {}
LearnTalent: {}
LearnTalents: {}
LeaveBattlefield: {}
LeaveChannelByLocalID: {}
LeaveChannelByName: {}
LeaveLFG: {}
LeaveSingleLFG: {}
LFGTeleport: {}
ListChannelByName: {}
ListChannels: {}
LoadBindings: {}
loadstring:
  stdlib: loadstring
loadstring_untainted:
  stdlib: loadstring_untainted
LoadURLIndex:
  inputs:
  - name: index
    type: number
  - name: param
    nilable: true
    type: number
  outputs: {}
log:
  alias: math.log
log10:
  alias: math.log10
LoggingChat:
  inputs:
  - name: value
    nilable: true
    type: boolean
  outputs:
  - name: value
    type: boolean
LoggingCombat:
  inputs:
  - name: value
    nilable: true
    type: boolean
  outputs:
  - name: value
    type: boolean
Logout:
  inputs: {}
  outputs: {}
LootMoneyNotify: {}
LootSlot: {}
LootSlotHasItem: {}
MacOptions_AreOSShortcutsDisabled: {}
MacOptions_GetGameBundleName: {}
MacOptions_HasNewStyleInputMonitoring: {}
MacOptions_IsInputMonitoringEnabled: {}
MacOptions_IsMicrophoneEnabled: {}
MacOptions_IsUniversalAccessEnabled: {}
MacOptions_OpenInputMonitoring: {}
MacOptions_OpenMicrophoneRequestDialogue: {}
MacOptions_OpenUniversalAccess: {}
MacOptions_SetOSShortcutsDisabled: {}
math.abs:
  stdlib: math.abs
math.acos:
  stdlib: math.acos
math.asin:
  stdlib: math.asin
math.atan:
  stdlib: math.atan
math.atan2:
  stdlib: math.atan2
math.ceil:
  stdlib: math.ceil
math.cos:
  stdlib: math.cos
math.cosh:
  stdlib: math.cosh
math.deg:
  stdlib: math.deg
math.exp:
  stdlib: math.exp
math.floor:
  stdlib: math.floor
math.fmod:
  stdlib: math.fmod
math.frexp:
  stdlib: math.frexp
math.huge:
  stdlib: math.huge
math.ldexp:
  stdlib: math.ldexp
math.log:
  stdlib: math.log
math.log10:
  stdlib: math.log10
math.max:
  stdlib: math.max
math.min:
  stdlib: math.min
math.modf:
  stdlib: math.modf
math.pi:
  stdlib: math.pi
math.pow:
  stdlib: math.pow
math.rad:
  stdlib: math.rad
math.random:
  stdlib: math.random
math.sin:
  stdlib: math.sin
math.sinh:
  stdlib: math.sinh
math.sqrt:
  stdlib: math.sqrt
math.tan:
  stdlib: math.tan
math.tanh:
  stdlib: math.tanh
max:
  alias: math.max
min:
  alias: math.min
mod:
  alias: math.fmod
MouselookStart: {}
MouselookStop: {}
MouseOverrideCinematicDisable: {}
MoveAndSteerStart:
  inputs: {}
  outputs: {}
MoveAndSteerStop:
  inputs: {}
  outputs: {}
MoveBackwardStart:
  inputs: {}
  outputs: {}
MoveBackwardStop: {}
MoveForwardStart:
  inputs: {}
  outputs: {}
MoveForwardStop: {}
MoveViewDownStart: {}
MoveViewDownStop: {}
MoveViewInStart:
  inputs: {}
  outputs: {}
MoveViewInStop: {}
MoveViewLeftStart: {}
MoveViewLeftStop: {}
MoveViewOutStart:
  inputs: {}
  outputs: {}
MoveViewOutStop: {}
MoveViewRightStart: {}
MoveViewRightStop: {}
MoveViewUpStart: {}
MoveViewUpStop: {}
MultiSampleAntiAliasingSupported: {}
MuteSoundFile: {}
NeutralPlayerSelectFaction: {}
newproxy:
  stdlib: newproxy
next:
  stdlib: next
NextView:
  inputs: {}
  outputs: {}
NoPlayTime:
  inputs: {}
  outputs:
  - type: boolean
NotifyInspect: {}
NotWhileDeadError: {}
NumTaxiNodes: {}
OfferPetition: {}
OpeningCinematic: {}
OpenTrainer: {}
pairs:
  stdlib: pairs
PartialPlayTime:
  inputs: {}
  outputs:
  - type: boolean
PartyLFGStartBackfill: {}
pcall:
  stdlib: pcall
pcallwithenv:
  stdlib: pcallwithenv
PetAbandon: {}
PetAggressiveMode: {}
PetAssistMode: {}
PetAttack:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs: {}
PetCanBeAbandoned: {}
PetCanBeDismissed: {}
PetCanBeRenamed: {}
PetDefensiveAssistMode: {}
PetDefensiveMode: {}
PetDismiss: {}
PetFollow: {}
PetHasActionBar: {}
PetHasSpellbook: {}
PetMoveTo: {}
PetPassiveMode: {}
PetRename: {}
PetStopAttack: {}
PetUsesPetFrame: {}
PetWait: {}
PI:
  stdlib: math.pi
PickupAction: {}
PickupBagFromSlot: {}
PickupCompanion: {}
PickupGuildBankItem: {}
PickupGuildBankMoney: {}
PickupInventoryItem: {}
PickupItem: {}
PickupMacro: {}
PickupMerchantItem: {}
PickupPetAction: {}
PickupPetSpell: {}
PickupPlayerMoney: {}
PickupPvpTalent: {}
PickupSpell: {}
PickupSpellBookItem: {}
PickupStablePet: {}
PickupTalent: {}
PickupTradeMoney: {}
PitchDownStart:
  inputs: {}
  outputs: {}
PitchDownStop:
  inputs: {}
  outputs: {}
PitchUpStart:
  inputs: {}
  outputs: {}
PitchUpStop:
  inputs: {}
  outputs: {}
PlaceAction: {}
PlaceRaidMarker: {}
PlayAutoAcceptQuestSound: {}
PlayerCanTeleport: {}
PlayerEffectiveAttackPower: {}
PlayerHasToy:
  inputs:
  - name: itemID
    type: number
  outputs:
  - name: value
    type: boolean
PlayerIsPVPInactive:
  inputs:
  - type: unit
  outputs:
  - type: boolean
PlayerVehicleHasComboPoints:
  inputs: {}
  outputs:
  - name: vehicleHasComboPoints
    type: boolean
PlayMusic: {}
PlaySound: {}
PlaySoundFile: {}
PlayVocalErrorSoundID: {}
PortGraveyard: {}
PreloadMovie:
  inputs:
  - name: movieId
    type: number
  outputs: {}
PrevView:
  inputs: {}
  outputs: {}
ProcessExceptionClient: {}
ProcessQuestLogRewardFactions: {}
PromoteToAssistant: {}
PromoteToLeader:
  inputs:
  - name: unit
    type: unit
  outputs: {}
PurchaseSlot: {}
PutItemInBackpack: {}
PutItemInBag: {}
QueryGuildBankLog: {}
QueryGuildBankTab:
  inputs:
  - name: index
    type: number
  outputs: {}
QueryGuildBankText:
  inputs:
  - name: tabIndex
    type: number
  outputs: {}
QueryGuildEventLog: {}
QueryGuildNews: {}
QueryGuildRecipes: {}
QuestChooseRewardError: {}
QuestFlagsPVP: {}
QuestGetAutoAccept: {}
QuestGetAutoLaunched: {}
QuestHasPOIInfo: {}
QuestIsDaily: {}
QuestIsFromAdventureMap: {}
QuestIsFromAreaTrigger: {}
QuestIsWeekly: {}
QuestLogPushQuest: {}
QuestLogRewardHasTreasurePicker: {}
QuestLogShouldShowPortrait: {}
QuestMapUpdateAllQuests:
  outputs:
  - type: number
QuestPOIGetIconInfo: {}
QuestPOIGetSecondaryLocations: {}
QuestPOIUpdateIcons: {}
Quit:
  inputs: {}
  outputs: {}
rad:
  alias: math.rad
RaidProfileExists: {}
RaidProfileHasUnsavedChanges: {}
random:
  alias: math.random
RandomRoll:
  inputs:
  - name: low
    type: number
  - name: high
    type: number
  outputs: {}
rawequal:
  stdlib: rawequal
rawget:
  stdlib: rawget
rawset:
  stdlib: rawset
ReagentBankButtonIDToInvSlotID: {}
RedockChatWindows:
  inputs: {}
  outputs: {}
RefreshLFGList: {}
RegisterStaticConstants: {}
RejectProposal: {}
ReleaseAction: {}
RemoveAutoQuestPopUp: {}
RemoveChatWindowChannel: {}
RemoveChatWindowMessages: {}
RemoveItemFromArtifact: {}
RemovePvpTalent: {}
RemoveTalent: {}
RenamePetition: {}
RepairAllItems: {}
ReplaceEnchant: {}
ReplaceGuildMaster: {}
ReplaceTradeEnchant: {}
ReplaceTradeskillEnchant: {}
RepopMe:
  inputs: {}
  outputs: {}
ReportBug: {}
ReportPlayerIsPVPAFK: {}
ReportSuggestion: {}
RequestBattlefieldScoreData: {}
RequestBattlegroundInstanceInfo: {}
RequestBottomLeftActionBar: {}
RequestGuildChallengeInfo: {}
RequestGuildPartyState:
  inputs: {}
  outputs: {}
RequestGuildRewards: {}
RequestLFDPartyLockInfo:
  inputs: {}
  outputs: {}
RequestLFDPlayerLockInfo:
  inputs: {}
  outputs: {}
RequestPVPOptionsEnabled: {}
RequestPVPRewards: {}
RequestRaidInfo: {}
RequestRandomBattlegroundInstanceInfo: {}
RequestRatedInfo: {}
RequestTimePlayed:
  impl: RequestTimePlayed
  inputs: {}
  outputs: {}
RequeueSkirmish: {}
ResetChatColors: {}
ResetChatWindows: {}
ResetCPUUsage: {}
ResetCursor: {}
ResetInstances: {}
ResetPerformanceValues:
  debug: true
  inputs: {}
  outputs: {}
ResetSetMerchantFilter:
  inputs: {}
  outputs: {}
ResetTutorials: {}
ResetView:
  inputs:
  - name: view
    type: number
  outputs: {}
ResistancePercent: {}
RespondInstanceLock:
  inputs:
  - name: response
    nilable: true
    type: boolean
  outputs: {}
RespondMailLockSendItem: {}
RespondToInviteConfirmation: {}
RestartGx:
  inputs: {}
  outputs: {}
RestoreRaidProfileFromCopy: {}
ResurrectGetOfferer: {}
ResurrectHasSickness: {}
ResurrectHasTimer: {}
RetrieveCorpse: {}
ReturnInboxItem: {}
RollOnLoot: {}
RunBinding: {}
RunMacro: {}
RunMacroText:
  impl: RunMacroText_Callback
  inputs:
  - name: macroText
    type: string
  outputs: {}
RunScript:
  impl: RunScript
  inputs:
  - name: script
    nilable: true
    type: string
  outputs: {}
SaveBindings:
  inputs:
  - type: number
  outputs: {}
SaveRaidProfileCopy: {}
SaveView:
  inputs:
  - name: view
    type: number
  outputs: {}
Screenshot:
  inputs: {}
  outputs: {}
ScriptsDisallowedForBeta:
  inputs: {}
  outputs:
  - name: value
    type: boolean
scrub:
  stdlib: scrub
SearchLFGGetEncounterResults: {}
SearchLFGGetJoinedID: {}
SearchLFGGetNumResults: {}
SearchLFGGetPartyResults: {}
SearchLFGGetResults: {}
SearchLFGJoin: {}
SearchLFGLeave: {}
SearchLFGSort: {}
securecall:
  stdlib: securecall
securecallfunction:
  stdlib: securecallfunction
SecureCmdOptionParse:
  impl: SecureCmdOptionParse
  inputs:
  - name: command
    type: string
  outputs:
  - name: result
    nilable: true
    type: string
  - name: target
    nilable: true
    type: string
secureexecuterange:
  stdlib: secureexecuterange
select:
  stdlib: select
SelectActiveQuest: {}
SelectAvailableQuest: {}
SelectedRealmName: {}
SelectTrainerService: {}
SellCursorItem: {}
SendChatMessage:
  inputs:
  - name: message
    type: string
  - name: type
    type: string
  - name: languageID
    nilable: true
    type: number
  - name: target
    nilable: true
    type: string
  outputs: {}
SendMail: {}
SendSubscriptionInterstitialResponse:
  inputs:
  - name: response
    type:
      enum: SubscriptionInterstitialResponseType
  outputs: {}
SendSystemMessage:
  impl: SendSystemMessage
  inputs:
  - name: msg
    type: string
  outputs: {}
SetAchievementComparisonUnit: {}
SetAchievementSearchString: {}
SetActionBarToggles: {}
SetActionUIButton: {}
SetAllowDangerousScripts: {}
SetAllowLowLevelRaid: {}
SetAutoDeclineGuildInvites: {}
SetBarSlotFromIntro: {}
SetBattlefieldScoreFaction: {}
SetBinding: {}
SetBindingClick: {}
SetBindingItem: {}
SetBindingMacro: {}
SetBindingSpell: {}
SetCemeteryPreference: {}
SetChannelOwner: {}
SetChannelPassword: {}
SetChatColorNameByClass: {}
SetChatWindowAlpha: {}
SetChatWindowColor: {}
SetChatWindowDocked: {}
SetChatWindowLocked: {}
SetChatWindowName: {}
SetChatWindowSavedDimensions: {}
SetChatWindowSavedPosition: {}
SetChatWindowShown: {}
SetChatWindowSize:
  inputs:
  - name: chatFrameID
    type: number
  - name: fontSize
    type: number
  outputs: {}
SetChatWindowUninteractable: {}
SetConsoleKey:
  inputs:
  - name: key
    nilable: true
    type: string
  outputs: {}
SetCurrentGraphicsSetting: {}
SetCurrentGuildBankTab: {}
SetCurrentTitle: {}
SetCursor: {}
SetCursorVirtualItem: {}
SetDungeonDifficultyID: {}
seterrorhandler:
  stdlib: seterrorhandler
SetEuropeanNumbers: {}
SetEveryoneIsAssistant: {}
SetFactionActive: {}
SetFactionInactive: {}
setfenv:
  stdlib: setfenv
SetFocusedAchievement: {}
SetGamePadCursorControl: {}
SetGamePadFreeLook: {}
SetGuildBankTabInfo: {}
SetGuildBankTabItemWithdraw: {}
SetGuildBankTabPermissions: {}
SetGuildBankText: {}
SetGuildBankWithdrawGoldLimit: {}
SetGuildInfoText: {}
SetGuildMemberRank: {}
SetGuildNewsFilter: {}
SetGuildRosterSelection: {}
SetGuildRosterShowOffline: {}
SetGuildTradeSkillCategoryFilter: {}
SetGuildTradeSkillItemNameFilter: {}
SetInWorldUIVisibility: {}
SetLegacyRaidDifficultyID: {}
SetLFGBootVote: {}
SetLFGComment: {}
SetLFGDungeon: {}
SetLFGDungeonEnabled: {}
SetLFGHeaderCollapsed: {}
SetLFGRoles: {}
SetLootMethod: {}
SetLootPortrait: {}
SetLootSpecialization: {}
SetLootThreshold: {}
SetMacroItem: {}
SetMacroSpell: {}
SetMerchantFilter: {}
setmetatable:
  stdlib: setmetatable
SetModifiedClick:
  inputs:
  - type: string
  - type: string
  outputs: {}
SetMouselookOverrideBinding: {}
SetMoveEnabled: {}
SetMultiCastSpell: {}
SetOptOutOfLoot: {}
SetOverrideBinding: {}
SetOverrideBindingClick: {}
SetOverrideBindingItem: {}
SetOverrideBindingMacro: {}
SetOverrideBindingSpell: {}
SetPartyAssignment:
  inputs:
  - name: role
    type: string
  - name: unit
    type: unit
  outputs: {}
SetPetSlot: {}
SetPetStablePaperdoll: {}
SetPOIIconOverlapDistance: {}
SetPOIIconOverlapPushDistance: {}
SetPortraitTexture:
  impl: SetPortraitTexture
  inputs:
  - name: textureObject
    type: Texture
  - name: unitToken
    type: unit
  - default: false
    name: disableMasking
    type: boolean
  outputs: {}
SetPortraitTextureFromCreatureDisplayID:
  inputs:
  - name: textureObject
    type: Texture
  - name: creatureDisplayID
    type: number
  outputs: {}
SetPortraitToTexture:
  inputs:
  - name: texture
    type: Texture
  - name: asset
    type: string
  outputs: {}
SetPVP: {}
SetPVPRoles: {}
SetRaidDifficultyID: {}
SetRaidProfileOption: {}
SetRaidProfileSavedPosition: {}
SetRaidSubgroup: {}
SetRaidTarget:
  inputs:
  - type: string
  - type: number
  outputs: {}
SetRaidTargetProtected: {}
SetSavedInstanceExtend: {}
SetSelectedArtifact: {}
SetSelectedDisplayChannel: {}
SetSelectedFaction: {}
SetSelectedScreenResolutionIndex: {}
SetSelectedWarGameType: {}
SetSendMailCOD: {}
SetSendMailMoney: {}
SetSendMailShowing:
  inputs:
  - name: sendMailShowing
    type: boolean
  outputs: {}
SetSpecialization: {}
SetSpellbookPetAction: {}
SetTaxiBenchmarkMode:
  inputs:
  - name: value
    nilable: true
    type: boolean
  outputs: {}
SetTaxiMap: {}
SetTradeCurrency: {}
SetTradeMoney:
  inputs:
  - name: money
    type: number
  outputs: {}
SetTrainerServiceTypeFilter:
  inputs:
  - name: type
    type: string
  - name: status
    type: number
  outputs: {}
SetTurnEnabled: {}
SetUIVisibility: {}
SetUnitCursorTexture:
  inputs:
  - name: textureObject
    type: Texture
  - name: unit
    type: unit
  - name: style
    nilable: true
    type:
      enum: CursorStyle
  - name: includeLowPriority
    nilable: true
    type: boolean
  outputs:
  - name: hasCursor
    type: boolean
SetupFullscreenScale: {}
SetView:
  inputs:
  - name: view
    type: number
  outputs: {}
SetWatchedFactionIndex: {}
ShouldShowIslandsWeeklyPOI: {}
ShouldShowSpecialSplashScreen: {}
ShowAccountAchievements: {}
ShowBossFrameWhenUninteractable: {}
ShowBuybackSellCursor: {}
ShowQuestComplete: {}
ShowQuestOffer: {}
ShowRepairCursor: {}
SignPetition: {}
sin:
  nowrap: true
  stdlib: sin
SitStandOrDescendStart:
  inputs: {}
  outputs: {}
SocketInventoryItem: {}
SocketItemToArtifact: {}
SolveArtifact: {}
sort:
  alias: table.sort
SortBattlefieldScoreData: {}
SortBGList: {}
SortGuildRoster: {}
SortGuildTradeSkill: {}
SortQuests: {}
SortQuestSortTypes: {}
Sound_ChatSystem_GetInputDriverNameByIndex: {}
Sound_ChatSystem_GetNumInputDrivers: {}
Sound_ChatSystem_GetNumOutputDrivers: {}
Sound_ChatSystem_GetOutputDriverNameByIndex: {}
Sound_GameSystem_GetInputDriverNameByIndex: {}
Sound_GameSystem_GetNumInputDrivers: {}
Sound_GameSystem_GetNumOutputDrivers:
  outputs:
  - type: number
Sound_GameSystem_GetOutputDriverNameByIndex: {}
Sound_GameSystem_RestartSoundSystem: {}
SpellCancelQueuedSpell:
  inputs: {}
  outputs: {}
SpellCanTargetGarrisonFollower: {}
SpellCanTargetGarrisonFollowerAbility: {}
SpellCanTargetGarrisonMission: {}
SpellCanTargetItem: {}
SpellCanTargetItemID: {}
SpellCanTargetQuest: {}
SpellCanTargetUnit: {}
SpellGetVisibilityInfo: {}
SpellHasRange: {}
SpellIsAlwaysShown: {}
SpellIsPriorityAura: {}
SpellIsSelfBuff: {}
SpellIsTargeting: {}
SpellStopCasting:
  inputs: {}
  outputs:
  - name: value
    type: boolean
SpellStopTargeting:
  inputs: {}
  outputs:
  - type: boolean
SpellTargetItem: {}
SpellTargetUnit: {}
SplashFrameCanBeShown: {}
SplitGuildBankItem: {}
sqrt:
  alias: math.sqrt
StartAttack: {}
StartAutoRun:
  inputs: {}
  outputs: {}
StartDuel:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs: {}
StartSoloShuffleWarGameByName: {}
StartSpectatorSoloShuffleWarGame: {}
StartSpectatorWarGame: {}
StartWarGame: {}
StartWarGameByName:
  inputs:
  - name: args
    nilable: true
    type: string
  outputs: {}
StopAttack: {}
StopAutoRun:
  inputs: {}
  outputs: {}
StopCinematic: {}
StopMacro:
  inputs: {}
  outputs: {}
StopMusic: {}
StopSound: {}
StoreSecureReference: {}
StrafeLeftStart:
  inputs: {}
  outputs: {}
StrafeLeftStop: {}
StrafeRightStart:
  inputs: {}
  outputs: {}
StrafeRightStop: {}
strbyte:
  alias: string.byte
strcmputf8i:
  stdlib: strcmputf8i
strconcat:
  stdlib: strconcat
strfind:
  alias: string.find
string.byte:
  stdlib: string.byte
string.char:
  stdlib: string.char
string.find:
  stdlib: string.find
string.format:
  stdlib: string.format
string.gfind:
  stdlib: string.gfind
string.gmatch:
  stdlib: string.gmatch
string.gsub:
  stdlib: string.gsub
string.join:
  stdlib: strjoin
string.len:
  stdlib: string.len
string.lower:
  stdlib: string.lower
string.match:
  stdlib: string.match
string.rep:
  stdlib: string.rep
string.reverse:
  stdlib: string.reverse
string.split:
  stdlib: strsplit
string.sub:
  stdlib: string.sub
string.trim:
  stdlib: strtrim
string.upper:
  stdlib: string.upper
StripHyperlinks:
  inputs:
  - name: text
    type: string
  - default: false
    name: maintainColor
    type: boolean
  - default: false
    name: maintainBrackets
    type: boolean
  - default: false
    name: stripNewlines
    type: boolean
  - default: false
    name: maintainAtlases
    type: boolean
  outputs:
  - name: stripped
    type: string
strjoin:
  alias: string.join
strlen:
  alias: string.len
strlenutf8:
  stdlib: strlenutf8
strlower:
  alias: string.lower
strmatch:
  alias: string.match
strrep:
  alias: string.rep
strsplit:
  alias: string.split
strsplittable:
  stdlib: strsplittable
strsub:
  alias: string.sub
strtrim:
  alias: string.trim
strupper:
  alias: string.upper
Stuck: {}
SubmitRequiredGuildRename: {}
SummonFriend: {}
SummonRandomCritter: {}
SupportsClipCursor:
  inputs: {}
  outputs:
  - name: supportsClipCursor
    type: boolean
SurrenderArena: {}
SwapRaidSubgroup: {}
SwitchAchievementSearchTab: {}
table.concat:
  stdlib: table.concat
table.foreach:
  stdlib: table.foreach
table.foreachi:
  stdlib: table.foreachi
table.getn:
  stdlib: table.getn
table.insert:
  stdlib: table.insert
table.maxn:
  stdlib: table.maxn
table.remove:
  stdlib: table.remove
table.removemulti:
  stdlib: table.removemulti
table.setn:
  stdlib: table.setn
table.sort:
  stdlib: table.sort
table.wipe:
  stdlib: table.wipe
TakeInboxItem: {}
TakeInboxMoney: {}
TakeInboxTextItem: {}
TakeTaxiNode: {}
tan:
  nowrap: true
  stdlib: tan
TargetDirectionEnemy: {}
TargetDirectionFinished: {}
TargetDirectionFriend: {}
TargetLastEnemy:
  inputs: {}
  outputs: {}
TargetLastFriend: {}
TargetLastTarget:
  inputs: {}
  outputs: {}
TargetNearest: {}
TargetNearestEnemy:
  inputs:
  - name: reverse
    nilable: true
    type: boolean
  outputs: {}
TargetNearestEnemyPlayer:
  inputs:
  - name: reverse
    nilable: true
    type: boolean
  outputs: {}
TargetNearestFriend:
  inputs:
  - name: reverse
    nilable: true
    type: boolean
  outputs: {}
TargetNearestFriendPlayer:
  inputs:
  - name: reverse
    nilable: true
    type: boolean
  outputs: {}
TargetNearestPartyMember: {}
TargetNearestRaidMember: {}
TargetPriorityHighlightEnd:
  inputs:
  - nilable: true
    type: boolean
  outputs: {}
TargetPriorityHighlightStart:
  inputs:
  - nilable: true
    type: boolean
  outputs: {}
TargetSpellReplacesBonusTree: {}
TargetToggle: {}
TargetTotem: {}
TargetUnit:
  inputs:
  - nilable: true
    type: unit
  outputs: {}
TaxiGetDestX: {}
TaxiGetDestY: {}
TaxiGetNodeSlot: {}
TaxiGetSrcX: {}
TaxiGetSrcY: {}
TaxiIsDirectFlight: {}
TaxiNodeCost: {}
TaxiNodeGetType: {}
TaxiNodeName: {}
TaxiNodePosition: {}
TaxiRequestEarlyLanding: {}
time:
  stdlib: time
TimeoutResurrect: {}
tinsert:
  alias: table.insert
ToggleAnimKitDisplay:
  inputs: {}
  outputs: {}
ToggleAutoRun:
  inputs: {}
  outputs: {}
ToggleCollision:
  debug: true
  inputs: {}
  outputs: {}
ToggleCollisionDisplay:
  debug: true
  inputs: {}
  outputs: {}
ToggleDebugAIDisplay:
  inputs: {}
  outputs: {}
TogglePerformancePause:
  debug: true
  inputs: {}
  outputs: {}
TogglePerformanceValues:
  debug: true
  inputs:
  - type: number
  outputs: {}
TogglePetAutocast: {}
TogglePlayerBounds:
  debug: true
  inputs: {}
  outputs: {}
TogglePortals:
  debug: true
  inputs: {}
  outputs: {}
TogglePVP:
  inputs: {}
  outputs: {}
ToggleRun:
  inputs: {}
  outputs: {}
ToggleSelfHighlight:
  inputs: {}
  outputs:
  - type: boolean
ToggleSheath:
  inputs: {}
  outputs: {}
ToggleSpellAutocast: {}
ToggleTris:
  debug: true
  inputs: {}
  outputs: {}
ToggleWindowed:
  inputs: {}
  outputs: {}
tonumber:
  stdlib: tonumber
tostring:
  stdlib: tostring
tremove:
  alias: table.remove
TriggerTutorial: {}
TurnInGuildCharter: {}
TurnLeftStart:
  inputs: {}
  outputs: {}
TurnLeftStop: {}
TurnOrActionStart:
  inputs: {}
  outputs: {}
TurnOrActionStop:
  inputs: {}
  outputs: {}
TurnRightStart:
  inputs: {}
  outputs: {}
TurnRightStop: {}
type:
  stdlib: type
UninviteUnit: {}
UnitAffectingCombat:
  inputs:
  - type: string
  outputs:
  - type: boolean
UnitAlliedRaceInfo:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: isAlliedRace
    type: boolean
  - name: hasHeritageArmorUnlocked
    type: boolean
UnitArmor:
  inputs:
  - type: string
  outputs:
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
UnitAttackPower:
  inputs:
  - type: string
  outputs:
  - type: number
  - type: number
  - type: number
UnitAttackSpeed:
  inputs:
  - type: string
  outputs:
  - type: number
  - type: number
UnitAura: {}
UnitAuraBySlot: {}
UnitAuraSlots: {}
UnitBattlePetLevel:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    nilable: true
    type: number
UnitBattlePetSpeciesID:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    nilable: true
    type: number
UnitBattlePetType:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    nilable: true
    type: number
UnitBuff: {}
UnitCanAssist:
  inputs:
  - name: unit
    type: unit
  - name: target
    type: unit
  outputs:
  - name: result
    type: boolean
UnitCanAttack:
  inputs:
  - name: unit
    type: unit
  - name: target
    type: unit
  outputs:
  - name: result
    type: boolean
UnitCanCooperate:
  inputs:
  - name: unit
    type: unit
  - name: target
    type: unit
  outputs:
  - name: result
    type: boolean
UnitCanPetBattle:
  inputs:
  - name: unit
    type: unit
  - name: target
    type: unit
  outputs:
  - name: result
    type: boolean
UnitCastingInfo:
  inputs:
  - type: string
UnitChannelInfo:
  inputs:
  - type: string
UnitChromieTimeID:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: ID
    type: number
UnitClass:
  impl: UnitClass
  inputs:
  - name: unit
    type: unit
  mayreturnnothing: true
  outputs:
  - name: className
    type: string
  - name: classFilename
    type: string
  - name: classID
    type: number
UnitClassBase:
  impl: UnitClassBase
  inputs:
  - name: unit
    type: unit
  mayreturnnothing: true
  outputs:
  - name: classFilename
    type: string
  - name: classID
    type: number
UnitClassification:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    stub: normal
    type: string
UnitControllingVehicle: {}
UnitCreatureFamily: {}
UnitCreatureType: {}
UnitDamage:
  inputs:
  - type: string
  outputs:
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
  - type: number
UnitDebuff: {}
UnitDetailedThreatSituation: {}
UnitDistanceSquared:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: distance
    type: number
  - name: checkedDistance
    type: boolean
UnitEffectiveLevel:
  inputs:
  - type: string
  outputs:
  - type: number
UnitExists:
  impl: UnitExists
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitFactionGroup:
  impl: UnitFactionGroup
  inputs:
  - name: unitName
    type: unit
  - default: false
    name: checkDisplayRace
    type: boolean
  mayreturnnothing: true
  outputs:
  - name: factionGroupTag
    type: string
  - name: localized
    type: string
UnitFullName:
  inputs:
  - type: string
  outputs:
  - type: string
  - type: string
UnitGetAvailableRoles: {}
UnitGetIncomingHeals:
  inputs:
  - type: string
  - nilable: true
    type: string
  outputs:
  - type: number
UnitGetTotalAbsorbs:
  inputs:
  - type: string
  outputs:
  - type: number
UnitGetTotalHealAbsorbs:
  inputs:
  - type: string
  outputs:
  - type: number
UnitGroupRolesAssigned:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    stub: DAMAGER
    type: string
UnitGUID:
  impl: UnitGUID
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: guid
    nilable: true
    type: string
UnitHasIncomingResurrection:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: isBeingResurrected
    type: boolean
UnitHasLFGDeserter:
  inputs:
  - type: string
  outputs:
  - type: boolean
UnitHasLFGRandomCooldown:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: value
    type: boolean
UnitHasRelicSlot:
  inputs:
  - nilable: true
    type: string
  outputs:
  - type: boolean
UnitHasVehiclePlayerFrameUI:
  inputs:
  - nilable: true
    type: string
  outputs:
  - type: boolean
UnitHasVehicleUI:
  inputs:
  - nilable: true
    type: string
  outputs:
  - type: oneornil
UnitHealth:
  inputs:
  - type: string
  outputs:
  - type: number
UnitHealthMax:
  inputs:
  - type: string
  outputs:
  - type: number
UnitHonor:
  inputs:
  - type: string
  outputs:
  - type: number
UnitHonorLevel:
  inputs:
  - type: string
  outputs:
  - type: number
UnitHonorMax:
  inputs:
  - type: string
  outputs:
  - type: number
UnitHPPerStamina:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: value
    type: number
UnitInAnyGroup:
  inputs:
  - name: unit
    nilable: true
    type: unit
  - name: partyIndex
    nilable: true
    type: number
  outputs:
  - name: result
    type: boolean
UnitInBattleground:
  inputs:
  - name: unit
    nilable: true
    type: unit
  - name: partyIndex
    nilable: true
    type: number
  outputs:
  - name: result
    nilable: true
    type: number
UnitInOtherParty: {}
UnitInParty:
  inputs:
  - name: unit
    nilable: true
    type: unit
  - name: partyIndex
    nilable: true
    type: number
  outputs:
  - name: result
    type: boolean
UnitInPartyShard:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: inPartyShard
    type: boolean
UnitInRaid:
  inputs:
  - name: unit
    nilable: true
    type: unit
  - name: partyIndex
    nilable: true
    type: number
  outputs:
  - name: result
    nilable: true
    type: number
UnitInRange:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: inRange
    stub: true
    type: boolean
  - name: checkedRange
    stub: true
    type: boolean
UnitInSubgroup:
  inputs:
  - name: unit
    nilable: true
    type: unit
  - name: partyIndex
    nilable: true
    type: number
  outputs:
  - name: result
    type: boolean
UnitInVehicle:
  inputs:
  - type: string
  outputs:
  - type: boolean
UnitInVehicleControlSeat: {}
UnitInVehicleHidesPetFrame: {}
UnitIsAFK:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsBattlePet:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    nilable: true
    type: boolean
UnitIsBattlePetCompanion:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsBossMob: {}
UnitIsCharmed:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsConnected:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: isConnected
    type: boolean
UnitIsControlling: {}
UnitIsCorpse:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsDead:
  inputs:
  - type: string
  outputs:
  - type: boolean
UnitIsDeadOrGhost:
  inputs:
  - type: string
  outputs:
  - type: boolean
UnitIsDND:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsEnemy:
  inputs:
  - name: unit
    type: unit
  - name: target
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsFeignDeath:
  inputs:
  - type: string
  outputs:
  - type: oneornil
UnitIsFriend:
  inputs:
  - name: unit
    type: unit
  - name: target
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsGameObject:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsGhost:
  inputs:
  - type: string
  outputs:
  - type: boolean
UnitIsGroupAssistant:
  inputs:
  - type: string
  outputs:
  - type: boolean
UnitIsGroupLeader:
  inputs:
  - type: string
  outputs:
  - type: boolean
UnitIsInMyGuild:
  inputs:
  - name: unit
    type: string
  outputs:
  - name: result
    type: boolean
UnitIsInteractable:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsMercenary: {}
UnitIsOtherPlayersBattlePet:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsOtherPlayersPet:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsOwnerOrControllerOfUnit:
  inputs:
  - name: controllingUnit
    type: unit
  - name: controlledUnit
    type: unit
  outputs:
  - name: unitIsOwnerOrControllerOfUnit
    type: boolean
UnitIsPlayer:
  impl: UnitIsPlayer
  inputs:
  - name: unit
    nilable: true
    type: unit
  - name: partyIndex
    nilable: true
    type: number
  outputs:
  - name: result
    type: boolean
UnitIsPossessed:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsPVP:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsPVPFreeForAll:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsPVPSanctuary:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsQuestBoss: {}
UnitIsRaidOfficer:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsSameServer: {}
UnitIsTapDenied:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: unitIsTapDenied
    type: boolean
UnitIsTrivial: {}
UnitIsUnconscious: {}
UnitIsUnit:
  impl: UnitIsUnit
  inputs:
  - name: unitName1
    type: unit
  - name: unitName2
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsVisible:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitIsWildBattlePet:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: result
    type: boolean
UnitLeadsAnyGroup: {}
UnitLevel:
  impl: UnitLevel
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: level
    type: number
UnitName:
  impl: UnitName
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: name
    nilable: true
    type: string
  - name: realm
    nilable: true
    type: string
UnitNameplateShowsWidgetsOnly:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: nameplateShowsWidgetsOnly
    type: boolean
UnitNameUnmodified:
  inputs:
  - type: string
  outputs:
  - type: string
UnitNumPowerBarTimers: {}
UnitOnTaxi:
  inputs:
  - type: string
  outputs:
  - type: oneornil
UnitPartialPower:
  inputs:
  - name: unitToken
    type: unit
  - default: 26
    name: powerType
    type:
      enum: PowerType
  - default: false
    name: unmodified
    type: boolean
  outputs:
  - name: partialPower
    type: number
UnitPercentHealthFromGUID:
  inputs:
  - name: unitGUID
    type: string
  outputs:
  - name: percentHealth
    nilable: true
    type: number
UnitPhaseReason:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: reason
    nilable: true
    type:
      enum: PhaseReason
UnitPlayerControlled:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: result
    type: boolean
UnitPlayerOrPetInParty:
  inputs:
  - name: unit
    nilable: true
    type: unit
  - name: partyIndex
    nilable: true
    type: number
  outputs:
  - name: result
    type: boolean
UnitPlayerOrPetInRaid:
  inputs:
  - name: unit
    nilable: true
    type: unit
  - name: partyIndex
    nilable: true
    type: number
  outputs:
  - name: result
    type: boolean
UnitPosition: {}
UnitPower:
  inputs:
  - name: unitToken
    type: unit
  - default: 26
    name: powerType
    type:
      enum: PowerType
  - default: false
    name: unmodified
    type: boolean
  outputs:
  - name: power
    type: number
UnitPowerBarID:
  inputs:
  - name: unitToken
    type: unit
  outputs:
  - name: barID
    type: number
UnitPowerBarTimerInfo: {}
UnitPowerDisplayMod:
  inputs:
  - name: powerType
    type:
      enum: PowerType
  outputs:
  - name: displayMod
    type: number
UnitPowerMax:
  inputs:
  - name: unitToken
    type: unit
  - default: 26
    name: powerType
    type:
      enum: PowerType
  - default: false
    name: unmodified
    type: boolean
  outputs:
  - name: maxPower
    type: number
UnitPowerType:
  impl: UnitPowerType
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: powerType
    type: number
  - name: powerToken
    nilable: true
    type: string
  - name: altR
    nilable: true
    type: number
  - name: altG
    nilable: true
    type: number
  - name: altB
    nilable: true
    type: number
UnitPvpClassification:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: classification
    nilable: true
    type:
      enum: PvPUnitClassification
UnitPVPName:
  inputs:
  - type: string
  outputs:
  - type: string
UnitQuestTrivialLevelRange:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: levelRange
    type: number
UnitQuestTrivialLevelRangeScaling:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: levelRange
    type: number
UnitRace:
  impl: UnitRace
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: race
    type: string
  - name: fileName
    type: string
  - name: id
    type: number
UnitRangedAttackPower: {}
UnitRangedDamage: {}
UnitReaction:
  inputs:
  - name: unit
    type: unit
  - name: target
    type: unit
  outputs:
  - name: result
    nilable: true
    type: number
UnitRealmRelationship:
  inputs:
  - type: string
  outputs:
  - type: number
UnitSelectionColor:
  inputs:
  - name: unit
    type: unit
  - name: useExtendedColors
    nilable: true
    type: boolean
  outputs:
  - name: red
    type: number
  - name: green
    type: number
  - name: blue
    type: number
  - name: alpha
    type: number
UnitSelectionType: {}
UnitSetRole: {}
UnitSex:
  impl: UnitSex
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: sex
    nilable: true
    type: number
UnitShouldDisplayName: {}
UnitSpellHaste:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: spellHastePercent
    stub: 100
    type: number
UnitStagger:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: stagger
    type: number
UnitStat:
  inputs:
  - type: string
  - type: number
  outputs:
  - type: number
  - type: number
  - type: number
  - type: number
UnitSwitchToVehicleSeat: {}
UnitTargetsVehicleInRaidUI:
  inputs:
  - name: unit
    nilable: true
    type: unit
  outputs:
  - name: value
    type: boolean
UnitThreatPercentageOfLead: {}
UnitThreatSituation: {}
UnitTokenFromGUID:
  inputs:
  - name: unitGUID
    type: string
  outputs:
  - name: unitToken
    nilable: true
    type: string
UnitTreatAsPlayerForDisplay:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: treatAsPlayer
    type: boolean
UnitTrialBankedLevels:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: bankedLevels
    type: number
  - name: xpIntoCurrentLevel
    type: number
  - name: xpForNextLevel
    type: number
UnitTrialXP: {}
UnitUsingVehicle: {}
UnitVehicleSeatCount: {}
UnitVehicleSeatInfo: {}
UnitVehicleSkin: {}
UnitWeaponAttackPower: {}
UnitWidgetSet:
  inputs:
  - name: unit
    type: unit
  outputs:
  - name: uiWidgetSet
    type: number
UnitXP:
  inputs:
  - type: string
  outputs:
  - type: number
UnitXPMax:
  inputs:
  - type: string
  outputs:
  - type: number
UnlearnSpecialization: {}
UnlockVoidStorage: {}
UnmuteSoundFile: {}
unpack:
  stdlib: unpack
UpdateAddOnCPUUsage: {}
UpdateAddOnMemoryUsage:
  inputs: {}
  outputs: {}
UpdateInventoryAlertStatus: {}
UpdateUIParentPosition: {}
UpdateWarGamesList: {}
UpdateWindow:
  inputs: {}
  outputs: {}
UseAction:
  inputs:
  - type: number
  - nilable: true
    type: unknown
  - type: string
  outputs: {}
  protection: secure
UseInventoryItem: {}
UseItemByName: {}
UseQuestLogSpecialItem: {}
UseToy: {}
UseToyByName: {}
UseWorldMapActionButtonSpellOnQuest: {}
VehicleAimDecrement:
  inputs:
  - name: amount
    nilable: true
    type: number
  outputs: {}
VehicleAimDownStart:
  inputs: {}
  outputs: {}
VehicleAimDownStop:
  inputs: {}
  outputs: {}
VehicleAimGetNormPower: {}
VehicleAimIncrement:
  inputs:
  - name: amount
    nilable: true
    type: number
  outputs: {}
VehicleAimRequestAngle: {}
VehicleAimSetNormPower: {}
VehicleAimUpStart:
  inputs: {}
  outputs: {}
VehicleAimUpStop:
  inputs: {}
  outputs: {}
VehicleExit:
  inputs: {}
  outputs: {}
VehicleNextSeat:
  inputs: {}
  outputs: {}
VehiclePrevSeat:
  inputs: {}
  outputs: {}
ViewGuildRecipes: {}
WarGameRespond: {}
wipe:
  alias: table.wipe
WithdrawGuildBankMoney: {}
WorldLootObjectExists: {}
xpcall:
  stdlib: xpcall
