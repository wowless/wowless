<Ui>
  <Script>
    _G.WowlessLog = {}
    local function log(fmt, ...)
      table.insert(_G.WowlessLog, string.format(fmt, ...))
    end
    local function scriptHandler(name, self, ...)
      local rest = table.concat({...}, ',')
      local argstr = table.concat({
        self:GetName(),
        self:GetParent() and tostring(self:GetParent():GetName()) or 'none',
        rest ~= '' and rest or nil,
      }, ',')
      log('%s(%s)', name, argstr)
    end
    local names = {
      'OnAttributeChanged',
      'OnHide',
      'OnLoad',
      'OnShow',
    }
    for _, name in ipairs(names) do
      _G['Wowless_' .. name] = function(...)
        scriptHandler(name, ...)
      end
    end
  </Script>
  <Frame name='WowlessLogger' virtual='true'>
    <Scripts>
      <OnAttributeChanged function='Wowless_OnAttributeChanged' />
      <OnHide function='Wowless_OnHide' />
      <OnLoad function='Wowless_OnLoad' />
      <OnShow function='Wowless_OnShow' />
    </Scripts>
  </Frame>
  <Frame name='WowlessSimpleFrame' inherits='WowlessLogger' />
  <Frame name='WowlessAttributeFrame' inherits='WowlessLogger'>
    <Attributes>
      <Attribute name='attr1' value='attrvalue1' />
      <Attribute name='attr2' value='attrvalue2' />
    </Attributes>
  </Frame>
  <Frame name='WowlessHiddenFrame' inherits='WowlessLogger' hidden='true' />
  <Frame name='WowlessParentTemplate' inherits='WowlessLogger' virtual='true'>
    <Frames>
      <Frame name='$parentKid2' inherits='WowlessLogger' />
      <Frame name='$parentKid1' inherits='WowlessLogger' />
    </Frames>
  </Frame>
  <Frame name='WowlessParent' inherits='WowlessParentTemplate' />
  <Frame name='WowlessKeyParent' inherits='WowlessLogger' />
  <Frame name='$parentKid1' inherits='WowlessLogger' parent='WowlessKeyParent' parentkey='Moo' />
  <Frame name='$parentKid2' inherits='WowlessLogger' parentkey='Cow' parent='WowlessKeyParent' />
  <Script>
    local expected = {
      'OnLoad(WowlessSimpleFrame,none)',
      'OnShow(WowlessSimpleFrame,none)',
      'OnLoad(WowlessAttributeFrame,none)',
      'OnShow(WowlessAttributeFrame,none)',
      'OnLoad(WowlessHiddenFrame,none)',
      'OnLoad(WowlessParentKid2,WowlessParent)',
      'OnShow(WowlessParentKid2,WowlessParent)',
      'OnLoad(WowlessParentKid1,WowlessParent)',
      'OnShow(WowlessParentKid1,WowlessParent)',
      'OnLoad(WowlessParent,none)',
      'OnShow(WowlessParent,none)',
      'OnLoad(WowlessKeyParent,none)',
      'OnShow(WowlessKeyParent,none)',
      'OnLoad(WowlessKeyParentKid1,WowlessKeyParent)',
      'OnShow(WowlessKeyParentKid1,WowlessKeyParent)',
      'OnLoad(WowlessKeyParentKid2,WowlessKeyParent)',
      'OnShow(WowlessKeyParentKid2,WowlessKeyParent)',
      'before WowlessLuaFrame',
      'OnLoad(WowlessLuaFrame,none)',
      'OnShow(WowlessLuaFrame,none)',
      'after WowlessLuaFrame',
    }
    table.insert(_G.WowlessLog, 'before WowlessLuaFrame')
    CreateFrame('Frame', 'WowlessLuaFrame', nil, 'WowlessLogger')
    table.insert(_G.WowlessLog, 'after WowlessLuaFrame')
    assertEquals(table.concat(expected, '\n'), table.concat(_G.WowlessLog, '\n'))
  </Script>

  <Button name='WowlessAttrOrder' text='moocow'>
    <Scripts>
      <OnLoad>assert(self:GetText() == 'moocow', 'outer load')</OnLoad>
    </Scripts>
    <Frames>
      <Frame name='$parentKid1'>
        <Scripts>
          <OnLoad>assert(self:GetParent():GetText() == nil, 'inner load')</OnLoad>
        </Scripts>
      </Frame>
    </Frames>
  </Button>

  <Script>
    WowlessLog = {}
  </Script>
  <Frame>
    <Scripts>
      <OnLoad>
        tinsert(WowlessLog, 'during')
        end, (function()
          tinsert(WowlessLog, 'before')
        end)()
      --</OnLoad>
    </Scripts>
  </Frame>
  <Script>
    assert(table.concat(WowlessLog, ',') == 'before,during')
  </Script>

  <Frame>
    <Frames>
      <Frame hidden='true'>
        <Scripts>
          <OnHide>error('should not be called')</OnHide>
        </Scripts>
      </Frame>
    </Frames>
    <Scripts>
      <OnLoad>self:Hide()</OnLoad>
    </Scripts>
  </Frame>

  <Frame name='WowlessTemplate1' frameStrata='LOW' virtual='true'>
    <Scripts>
      <OnLoad>end, assertEquals('LOW', WowlessFrame:GetFrameStrata())--</OnLoad>
    </Scripts>
  </Frame>
  <Frame name='WowlessTemplate2' frameStrata='MEDIUM' virtual='true'>
    <Scripts>
      <OnLoad>end, assertEquals('MEDIUM', WowlessFrame:GetFrameStrata())--</OnLoad>
    </Scripts>
  </Frame>
  <Frame name='WowlessTemplate3' frameStrata='HIGH' virtual='true' inherits='WowlessTemplate2'>
    <Scripts>
      <OnLoad>end, assertEquals('HIGH', WowlessFrame:GetFrameStrata())--</OnLoad>
    </Scripts>
  </Frame>
  <Frame name='WowlessFrame' frameStrata='DIALOG' inherits='WowlessTemplate1,WowlessTemplate3'>
    <Scripts>
      <OnLoad>end, assertEquals('DIALOG', WowlessFrame:GetFrameStrata())--</OnLoad>
    </Scripts>
  </Frame>

  <Button name='WowlessTemplate' registerForClicks='AnyUp,AnyDown' virtual='true'>
    <Scripts>
      <OnLoad>end, assertEquals('Frame', WowlessFrame:GetObjectType())--</OnLoad>
    </Scripts>
  </Button>
  <Frame name='WowlessFrame' inherits='WowlessTemplate' />

  <Frame name='WowlessIntrinsicType' intrinsic='true' />
  <Script>
    local obj = CreateFrame('WowlessIntrinsicType')
    assertEquals(true, obj ~= nil)
    assertEquals('Frame', obj:GetObjectType())
    assertEquals(true, obj:IsObjectType('Frame'))
    assertEquals(__wowless ~= nil, obj:IsObjectType('WowlessIntrinsicType')) -- TODO fix wowless
  </Script>
  <WowlessIntrinsicType>
    <Scripts>
      <OnLoad>end, error('this should not be executed')--</OnLoad>
    </Scripts>
  </WowlessIntrinsicType>
  <WowlessIntrinsicType name='WowlessEvenMoreIntrinsicType' intrinsic='true'>
    <Scripts>
      <OnLoad>end, error('this should not be executed')--</OnLoad>
    </Scripts>
  </WowlessIntrinsicType>
  <Include file='evenmoreintrinsic.xml' />
  <Script>--[[ TODO requires more sophistication in api re intrinsics
    assertEquals(false, pcall(function() CreateFrame('WowlessEvenMoreIntrinsicType') end))
    table.insert(_G.Wowless.ExpectedLuaWarnings, {
      warnText = 'WowlessEvenMoreIntrinsicType',
      warnType = 0,
    })]]--
  </Script>

  <Script>
    assertEquals(nil, coroutine.running())
  </Script>

  <Frame>
    <Layers>
      <Layer>
        <Texture parentKey='Default' />
        <Texture parentKey='Override'>
          <TexCoords top='1' bottom='0' left='1' right='0' />
        </Texture>
        <Texture parentKey='PartialOverride'>
          <TexCoords left='1' right='0' />  <!-- top=0 bottom=1 defaults -->
        </Texture>
        <Texture parentKey='MultipleOverride'>
          <TexCoords top='1' bottom='0' />  <!-- this is ignored/overridden -->
          <TexCoords left='1' right='0' />
        </Texture>
      </Layer>
    </Layers>
    <Scripts>
      <OnLoad>
        local function check(ulx, uly, llx, lly, urx, ury, lrx, lry, ...)
          assertEquals(8, select('#', ...))
          assertEquals(ulx, select(1, ...))
          assertEquals(uly, select(2, ...))
          assertEquals(llx, select(3, ...))
          assertEquals(lly, select(4, ...))
          assertEquals(urx, select(5, ...))
          assertEquals(ury, select(6, ...))
          assertEquals(lrx, select(7, ...))
          assertEquals(lry, select(8, ...))
        end
        check(0, 0, 0, 1, 1, 0, 1, 1, self.Default:GetTexCoord())
        check(1, 1, 1, 0, 0, 1, 0, 0, self.Override:GetTexCoord())
        check(1, 0, 1, 1, 0, 0, 0, 1, self.PartialOverride:GetTexCoord())
        check(1, 0, 1, 1, 0, 0, 0, 1, self.MultipleOverride:GetTexCoord())
      </OnLoad>
    </Scripts>
  </Frame>

  <Frame>
    <Size x='300' y='200' />
    <Layers>
      <Layer>
        <Texture parentKey='NoPoints' />
        <Texture parentKey='NoPointsSetFalse' setallpoints='false' />
        <Texture parentKey='OnePoint'>
          <Anchors>
            <Anchor point='CENTER' />
          </Anchors>
        </Texture>
        <Texture parentKey='OnePointSetTrue' setallpoints='true'>
          <Anchors>
            <Anchor point='CENTER' />
          </Anchors>
        </Texture>
        <Texture parentKey='Sized'>
          <Size x='32' y='32' />
        </Texture>
      </Layer>
    </Layers>
    <Scripts>
      <OnLoad>
        local function checkPoint(ep, err, erp, ex, ey, ...)
          assertEquals(5, select('#', ...))
          local ap, arr, arp, ax, ay = ...
          assertEquals(ep, ap)
          assertEquals(err, arr)
          assertEquals(erp, arp)
          assertEquals(ex, ax)
          assertEquals(ey, ay)
        end
        assertEquals(2, self.NoPoints:GetNumPoints())
        checkPoint('TOPLEFT', self, 'TOPLEFT', 0, 0, self.NoPoints:GetPoint(1))
        checkPoint('BOTTOMRIGHT', self, 'BOTTOMRIGHT', 0, 0, self.NoPoints:GetPoint(2))
        assertEquals(2, self.NoPointsSetFalse:GetNumPoints())
        assertEquals(1, self.OnePoint:GetNumPoints())
        checkPoint('CENTER', self, 'CENTER', 0, 0, self.OnePoint:GetPoint(1))
        assertEquals(1, self.OnePointSetTrue:GetNumPoints())
        assertEquals(2, self.Sized:GetNumPoints())
        checkPoint('TOPLEFT', self, 'TOPLEFT', 0, 0, self.Sized:GetPoint(1))
        checkPoint('BOTTOMRIGHT', self, 'BOTTOMRIGHT', 0, 0, self.Sized:GetPoint(2))
      </OnLoad>
    </Scripts>
  </Frame>

  <Frame>
    <Layers>
      <Layer level='OVERLAY'>
        <Texture parentKey='Overlay' />
      </Layer>
    </Layers>
    <Scripts>
      <OnLoad>
        assertEquals('OVERLAY', self.Overlay:GetDrawLayer())
      </OnLoad>
    </Scripts>
  </Frame>

  <CheckButton>
    <HighlightTexture parentKey='Kid' alphaMode='ADD' />
    <Scripts>
      <OnLoad>
        assertEquals(self.Kid, self:GetHighlightTexture())
        assertEquals('Texture', self.Kid:GetObjectType())
        assertEquals('ADD', self.Kid:GetBlendMode())
      </OnLoad>
    </Scripts>
  </CheckButton>

  <Script>
    _G.WowlessLog = {}
  </Script>
  <Frame name='WowlessScriptInherit' virtual='true'>
    <Scripts>
      <OnLoad>
        table.insert(_G.WowlessLog, self.name .. ':base')
      </OnLoad>
    </Scripts>
  </Frame>
  <Frame>
    <Frames>
      <Frame inherits='WowlessScriptInherit'>
        <KeyValues>
          <KeyValue key='name' value='unspecified' />
        </KeyValues>
        <Scripts>
          <OnLoad>
            table.insert(_G.WowlessLog, self.name)
          </OnLoad>
        </Scripts>
      </Frame>
      <Frame inherits='WowlessScriptInherit'>
        <KeyValues>
          <KeyValue key='name' value='prepend' />
        </KeyValues>
        <Scripts>
          <OnLoad inherit='prepend'>
            table.insert(_G.WowlessLog, self.name)
          </OnLoad>
        </Scripts>
      </Frame>
      <Frame inherits='WowlessScriptInherit'>
        <KeyValues>
          <KeyValue key='name' value='append' />
        </KeyValues>
        <Scripts>
          <OnLoad inherit='append'>
            table.insert(_G.WowlessLog, self.name)
          </OnLoad>
        </Scripts>
      </Frame>
    </Frames>
  </Frame>
  <Script>
    local expected = {
      'unspecified',
      'prepend:base',
      'prepend',
      'append',
      'append:base',
    }
    assertEquals(table.concat(expected, ','), table.concat(_G.WowlessLog, ','))
  </Script>

  <Frame>
    <Frames>
      <Frame>
        <Scripts>
          <OnLoad>
            assertEquals('MEDIUM', self:GetFrameStrata())
            assertEquals(1, self:GetFrameLevel())
          </OnLoad>
        </Scripts>
      </Frame>
    </Frames>
    <Scripts>
      <OnLoad>
        assertEquals('MEDIUM', self:GetFrameStrata())
        assertEquals(0, self:GetFrameLevel())
      </OnLoad>
    </Scripts>
  </Frame>

  <Frame name='WowlessScriptIdentityTemplate' virtual='true'>
    <Scripts>
      <OnEvent>
        -- No real behavior, this just needs to exist.
      </OnEvent>
    </Scripts>
  </Frame>
  <Frame>
    <Frames>
      <Frame parentKey='foo' inherits='WowlessScriptIdentityTemplate' />
      <Frame parentKey='bar' inherits='WowlessScriptIdentityTemplate' />
    </Frames>
    <Scripts>
      <OnLoad>
        local foo = self.foo:GetScript('OnEvent')
        local bar = self.bar:GetScript('OnEvent')
        assert(foo ~= nil)
        assert(foo == bar)
      </OnLoad>
    </Scripts>
  </Frame>

  <Script>
    local foo = getmetatable(CreateFrame('WowlessIntrinsicType'))
    local bar = getmetatable(CreateFrame('Frame'))
    assertEquals(foo, bar)
  </Script>

  <!-- Actors support scripts through XML even though they aren't ScriptObjects. -->
  <Actor name='WowlessActorTemplate' virtual='true'>
    <Scripts>
      <OnLoad>
        self.loaded = true
      </OnLoad>
    </Scripts>
  </Actor>
  <Script>
    assert(CreateFrame('ModelScene'):CreateActor(nil, 'WowlessActorTemplate').loaded)
  </Script>

  <Frame>
    <Layers>
      <Layer>
        <Texture parentKey='tex'>
          <Scripts>
            <OnLoad>
              self.loaded = true
            </OnLoad>
          </Scripts>
        </Texture>
      </Layer>
    </Layers>
    <Scripts>
      <OnLoad>
        assertEquals(_G.WowlessData.product ~= 'wow_classic_era', not not self.tex.loaded)
      </OnLoad>
    </Scripts>
  </Frame>

  <Script>
    WowlessLog = {}
    WowlessHide = function()
      table.insert(WowlessLog, 'hide1')
    end
  </Script>
  <Frame>
    <Scripts>
      <OnLoad>
        table.insert(WowlessLog, 'load')
        WowlessHide = function()
          table.insert(WowlessLog, 'hide2')
        end
        self:Hide()
      </OnLoad>
      <OnHide function='WowlessHide' />
    </Scripts>
  </Frame>
  <Script>
    assertEquals('load,hide1', table.concat(WowlessLog, ','))
  </Script>

  <Script>
    WowlessLog = {}
    WowlessMixin = {
      OnHide = function()
        table.insert(WowlessLog, 'hide1')
      end,
    }
  </Script>
  <Frame mixin='WowlessMixin'>
    <Scripts>
      <OnLoad>
        table.insert(WowlessLog, 'load')
        self.OnHide = function()
          table.insert(WowlessLog, 'hide2')
        end
        self:Hide()
      </OnLoad>
      <OnHide method='OnHide' />
    </Scripts>
  </Frame>
  <Script>
    assertEquals('load,hide1', table.concat(WowlessLog, ','))
  </Script>

  <Script>
    WowlessLog = {}
    WowlessMixin = {
      OnHide = function()
        table.insert(WowlessLog, 'hidden')
      end,
      OnLoad = function(self)
        self.OnHide = self:GetScript('OnHide')
        self:SetScript('OnHide', function(self, ...)
          self:OnHide(...)
        end)
        self:Hide()
      end,
    }
  </Script>
  <Frame mixin='WowlessMixin'>
    <Scripts>
      <OnLoad method='OnLoad' />
      <OnHide method='OnHide' />
    </Scripts>
  </Frame>
  <Script>
    assertEquals('hidden', table.concat(WowlessLog, ','))
  </Script>

  <!-- function= in templates is resolved at template instantiation time -->
  <Script>
    WowlessLog = {}
    WowlessLoad = function()
      table.insert(WowlessLog, 'load1')
    end
  </Script>
  <Frame name='WowlessFunctionInstantiationTemplate' virtual='true'>
    <Scripts>
      <OnLoad function='WowlessLoad' />
    </Scripts>
  </Frame>
  <Script>
    WowlessLoad = function()
      table.insert(WowlessLog, 'load2')
    end
  </Script>
  <Frame inherits='WowlessFunctionInstantiationTemplate' />
  <Script>
    WowlessLoad = function()
      table.insert(WowlessLog, 'load3')
    end
  </Script>
  <Frame inherits='WowlessFunctionInstantiationTemplate' />
  <Frame inherits='WowlessFunctionInstantiationTemplate'>
    <Scripts>
      <OnLoad function='' />
    </Scripts>
  </Frame>
  <Script>
    assertEquals('load2,load3', table.concat(WowlessLog, ','))
  </Script>

  <Script>
    WowlessLog = {}
  </Script>
  <Frame name='WowlessFunctionLoadstringTemplate' virtual='true'>
    <Scripts>
      <OnLoad>end, table.insert(WowlessLog, 'foo')--</OnLoad>
    </Scripts>
  </Frame>
  <Script>
    assertEquals('', table.concat(WowlessLog, ','))
  </Script>
  <Frame inherits='WowlessFunctionLoadstringTemplate' />
  <Script>
    assertEquals('foo', table.concat(WowlessLog, ','))
  </Script>
  <Frame inherits='WowlessFunctionLoadstringTemplate' />
  <Script>
    assertEquals('foo', table.concat(WowlessLog, ','))
  </Script>

  <Script>
    WowlessLog = {}
  </Script>
  <Frame>
    <Scripts>
      <OnLoad>table.insert(WowlessLog, 'overwritten') end, table.insert(WowlessLog, 'before')--</OnLoad>
    </Scripts>
    <Frames>
      <Frame>
        <Scripts>
          <OnLoad>table.insert(WowlessLog, 'innerload') end, table.insert(WowlessLog, 'inner')--</OnLoad>
        </Scripts>
      </Frame>
    </Frames>
    <Scripts>
      <OnLoad>table.insert(WowlessLog, 'load') end, table.insert(WowlessLog, 'after')--</OnLoad>
    </Scripts>
  </Frame>
  <Script>
    assertEquals('before,after,inner,innerload,load', table.concat(WowlessLog, ','))
  </Script>

  <Frame name='WowlessParentSubFrame'>
    <Frames>
      <Frame>
        <Frames>
          <Frame name='$parentChild'>
            <Scripts>
              <OnLoad>
                assertEquals('WowlessParentSubFrameChild', self:GetName())
                assertEquals(WowlessParentSubFrame, self:GetParent():GetParent())
              </OnLoad>
            </Scripts>
          </Frame>
          <Frame>
            <Anchors>
              <Anchor point='TOPLEFT' relativeTo='$parent' />
            </Anchors>
            <Scripts>
              <OnLoad>
                assertEquals(WowlessParentSubFrame, self:GetParent():GetParent())
                assertEquals(1, self:GetNumPoints())
                local relativeTo = select(2, self:GetPoint(1))
                assertEquals(self:GetParent():GetParent(), relativeTo) -- notably not self:GetParent()
              </OnLoad>
            </Scripts>
          </Frame>
        </Frames>
      </Frame>
    </Frames>
  </Frame>
</Ui>
